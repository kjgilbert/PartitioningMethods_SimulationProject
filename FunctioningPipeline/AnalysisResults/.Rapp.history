(h <- s1 / (s1-s2))
(s <- (s2 - s1) / (s1 - 1))
het <- 1 + (h*s)
het
h
hom <- 1-s
s1 <- 0.1#
s2 <- 1.9#
#
(qe <- s1 / (s1+s2))#
#
(h <- s1 / (s1-s2))#
#
(s <- (s2 - s1) / (s1 - 1))#
#
het <- 1 + (h*s)#
hom <- 1-s
het
hom
s1 <- 0.1#
s2 <- 0.10001
(qe <- s1 / (s1+s2))#
#
(h <- s1 / (s1-s2))#
#
(s <- (s2 - s1) / (s1 - 1))#
#
(het <- 1 + (h*s))#
(hom <- 1+s)
s1 <- 0.1#
s2 <- 0.4
(qe <- s1 / (s1+s2))#
#
(h <- s1 / (s1-s2))#
#
(s <- (s2 - s1) / (s1 - 1))#
#
(het <- 1 + (h*s))#
(hom <- 1+s)
s1 <- 0.1#
s2 <- 1.9#
#
(qe <- s1 / (s1+s2))#
#
(h <- s1 / (s1-s2))#
#
(s <- (s2 - s1) / (s1 - 1))#
#
(het <- 1 + (h*s))#
(hom <- 1+s)
s1 <- 0.1#
s2 <- 0.1001
(qe <- s1 / (s1+s2))
(h <- s1 / (s1-s2))
(s <- (s2 - s1) / (s1 - 1))
library(ape)
a <- read.dna("~/Documents/UNIL/PartitioningMethods_SimulationProject/FunctioningPipeline/results_lopho/sim_match_lophotroch/MSA/MSA_1_aa.fa", format="fasta")
a <- read.dna("~/Documents/UNIL/PartitioningMethods_SimulationProject/FunctioningPipeline/results_lopho/sim_match_lophotroch/MSA/MSA_2_aa.fa", format="fasta")
a <- read.dna("~/Documents/UNIL/PartitioningMethods_SimulationProject/FunctioningPipeline/results_lopho/sim_match_lophotroch/MSA/MSA_1_aa.fa", format="fasta")
b <- read.dna("~/Documents/UNIL/PartitioningMethods_SimulationProject/FunctioningPipeline/results_lopho/sim_match_lophotroch/MSA/MSA_2_aa.fa", format="fasta")
c <- cbind(a,b)
print(5)
library(scales)#
setwd("~/Documents/UNIL/PartitioningMethods_SimulationProject/FunctioningPipeline/AnalysisResults")#
make.merge.id <- function(dat){#
	id.col <- rep(NA, dim(dat)[1])#
	for(i in 1:dim(dat)[1]){#
		if(length(grep("lopho", dat$file[i])) > 0) spp <- "lopho_"#
		if(length(grep("myria", dat$file[i])) > 0) spp <- "myria_"#
		if(length(grep("10", dat$file[i])) > 0) samp <- "10_"#
		if(length(grep("20", dat$file[i])) > 0) samp <- "20_"#
		if(length(grep("40", dat$file[i])) > 0) samp <- "40_"#
		if(length(grep("80", dat$file[i])) > 0) samp <- "80_"#
		if(length(grep("rcluster", dat$file[i])) > 0) algo <- "rcluster_"#
		if(length(grep("greedy", dat$file[i])) > 0) algo <- "greedy_"#
		if(length(grep("noPart", dat$file[i])) > 0) algo <- "noPart_"#
		if(length(grep("AIC", dat$file[i])) > 0) crit <- "AIC"#
		if(length(grep("AICc", dat$file[i])) > 0) crit <- "AICc"#
		if(length(grep("BIC", dat$file[i])) > 0) crit <- "BIC"#
		if(length(grep("noPart", dat$file[i])) > 0) crit <- "noPart"#
		id.col[i] <- paste(c(spp, samp, algo, crit), collapse="")#
	}#
	return(id.col)#
}
get.rep.difference <- function(dat, rep, samp.size, spp, partitioning.criterion, distance){#
	temp.dat <- dat[dat$replicate == rep & dat$samp.size == samp.size & dat$species == spp , ]#
	no.part.result <- temp.dat[temp.dat$search.algo == "noPart" ,]#
	rclust.AIC.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "AIC" ,]#
	rclust.BIC.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "BIC" ,]#
	rclust.AICc.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "AICc",]#
	if(partitioning.criterion == "AIC"){#
		difference <- no.part.result[distance] - rclust.AIC.result[distance]#
	}#
	if(partitioning.criterion == "BIC"){#
		difference <- no.part.result[distance] - rclust.BIC.result[distance]#
	}#
	if(partitioning.criterion == "AICc"){#
		difference <- no.part.result[distance] - rclust.AICc.result[distance]#
	}#
	return(as.numeric(difference))			#
}#
#
#####################################
#
get.boxplot.dat <- function(dat, samp.size, spp, partitioning.criterion, distance){	#
	samp.size.dists <- NULL#
	for(j in unique(dat$replicate)){#
		dist <- get.rep.difference(dat, rep=j, samp.size=samp.size, spp=spp, partitioning.criterion=partitioning.criterion, distance=distance)#
		samp.size.dists <- c(samp.size.dists, dist)#
	}#
	return(samp.size.dists)#
}
library(scales)#
setwd("~/Documents/UNIL/PartitioningMethods_SimulationProject/FunctioningPipeline/AnalysisResults")#
make.merge.id <- function(dat){#
	id.col <- rep(NA, dim(dat)[1])#
	for(i in 1:dim(dat)[1]){#
		if(length(grep("lopho", dat$file[i])) > 0) spp <- "lopho_"#
		if(length(grep("myria", dat$file[i])) > 0) spp <- "myria_"#
		if(length(grep("10", dat$file[i])) > 0) samp <- "10_"#
		if(length(grep("20", dat$file[i])) > 0) samp <- "20_"#
		if(length(grep("40", dat$file[i])) > 0) samp <- "40_"#
		if(length(grep("80", dat$file[i])) > 0) samp <- "80_"#
		if(length(grep("rcluster", dat$file[i])) > 0) algo <- "rcluster_"#
		if(length(grep("greedy", dat$file[i])) > 0) algo <- "greedy_"#
		if(length(grep("noPart", dat$file[i])) > 0) algo <- "noPart_"#
		if(length(grep("AIC", dat$file[i])) > 0) crit <- "AIC"#
		if(length(grep("AICc", dat$file[i])) > 0) crit <- "AICc"#
		if(length(grep("BIC", dat$file[i])) > 0) crit <- "BIC"#
		if(length(grep("noPart", dat$file[i])) > 0) crit <- "noPart"#
		id.col[i] <- paste(c(spp, samp, algo, crit), collapse="")#
	}#
	return(id.col)#
}#
#####################################
#
get.rep.difference <- function(dat, rep, samp.size, spp, partitioning.criterion, distance){#
	temp.dat <- dat[dat$replicate == rep & dat$samp.size == samp.size & dat$species == spp , ]#
	no.part.result <- temp.dat[temp.dat$search.algo == "noPart" ,]#
	rclust.AIC.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "AIC" ,]#
	rclust.BIC.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "BIC" ,]#
	rclust.AICc.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "AICc",]#
	if(partitioning.criterion == "AIC"){#
		difference <- no.part.result[distance] - rclust.AIC.result[distance]#
	}#
	if(partitioning.criterion == "BIC"){#
		difference <- no.part.result[distance] - rclust.BIC.result[distance]#
	}#
	if(partitioning.criterion == "AICc"){#
		difference <- no.part.result[distance] - rclust.AICc.result[distance]#
	}#
	return(as.numeric(difference))			#
}#
#
#####################################
#
get.boxplot.dat <- function(dat, samp.size, spp, partitioning.criterion, distance){	#
	samp.size.dists <- NULL#
	for(j in unique(dat$replicate)){#
		dist <- get.rep.difference(dat, rep=j, samp.size=samp.size, spp=spp, partitioning.criterion=partitioning.criterion, distance=distance)#
		samp.size.dists <- c(samp.size.dists, dist)#
	}#
	return(samp.size.dists)#
}#
#
#####################################
# # # mut rate 500#
# dat1 <- read.csv("AllStatsOutput_New_Rep1_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
# dat1$uniqueID <- paste(dat1$species, dat1$samp.size, dat1$search.algo, dat1$part.IC, sep="_")#
# dat1b <- read.table("RF_Eucl_results_New_Rep1_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
# dat1b$uniqueID <- make.merge.id(dat1b)#
# dat <- merge(dat1, dat1b, by="uniqueID")#
# dat$gene.size <- 100#
# dat$mut.rate <- 500#
# dat1 <- dat#
# mut rate 1000#
#
infiles.a <- c(#"AllStatsOutput_New_Rep1_100-1000.csv",#
				"AllStatsOutput_New_Rep2_100-1000.csv",#
				"AllStatsOutput_New_Rep3_100-1000.csv",#
				"AllStatsOutput_New_Rep4_100-1000.csv",#
				"AllStatsOutput_New_Rep5_100-1000.csv",#
				"AllStatsOutput_New_Rep6_100-1000.csv"#,#
				#"AllStatsOutput_New_Rep1_100-500.csv",#
				#"AllStatsOutput_New_Rep2_100-500.csv",#
				#"AllStatsOutput_New_Rep3_100-500.csv",#
				#"AllStatsOutput_New_Rep4_100-500.csv",#
				#"AllStatsOutput_New_Rep5_100-500.csv",#
				#"AllStatsOutput_New_Rep6_100-500.csv",#
				# "AllStatsOutput_Newest_Rep7_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep8_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep9_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep10_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep11_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep12_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep13_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep14_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep15_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep16_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep17_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep18_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep19_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep20_100-1000.csv"#
				)#
infiles.b <- c(#"RF_Eucl_results_New_Rep1_100-1000.txt",#
				"RF_Eucl_results_New_Rep2_100-1000.txt",#
				"RF_Eucl_results_New_Rep3_100-1000.txt",#
				"RF_Eucl_results_New_Rep4_100-1000.txt",#
				"RF_Eucl_results_New_Rep5_100-1000.txt",#
				"RF_Eucl_results_New_Rep6_100-1000.txt"#,#
				#"RF_Eucl_results_New_Rep1_100-500.txt",#
				#"RF_Eucl_results_New_Rep2_100-500.txt",#
				#"RF_Eucl_results_New_Rep3_100-500.txt",#
				#"RF_Eucl_results_New_Rep4_100-500.txt",#
				#"RF_Eucl_results_New_Rep5_100-500.txt",#
				#"RF_Eucl_results_New_Rep6_100-500.txt",#
				# "RF_Eucl_results_Newest_Rep7_100-1000.txt",#
				# "RF_Eucl_results_Newest_Rep8_100-1000.txt",#
				# "RF_Eucl_results_Newest_Rep9_100-1000.txt",#
				# "RF_Eucl_results_Newest_Rep10_100-1000.txt",#
				# "RF_Eucl_results_Newest_Rep11_100-1000.txt",#
				# "RF_Eucl_results_Newest_Rep12_100-1000.txt",#
				# "RF_Eucl_results_Newest_Rep13_100-1000.txt",#
				# "RF_Eucl_results_Newest_Rep14_100-1000.txt",#
				# "RF_Eucl_results_Newest_Rep15_100-1000.txt",#
				# "RF_Eucl_results_Newest_Rep16_100-1000.txt",#
				# "RF_Eucl_results_Newest_Rep17_100-1000.txt",#
				# "RF_Eucl_results_Newest_Rep18_100-1000.txt",#
				# "RF_Eucl_results_Newest_Rep19_100-1000.txt",#
				# "RF_Eucl_results_Newest_Rep20_100-1000.txt"#
				)
dat <- NULL#
for(i in 1:length(infiles.a)){#
	temp.dat1 <- read.csv(infiles.a[i], header=TRUE, stringsAsFactors=FALSE)#
	temp.dat1$uniqueID <- paste(temp.dat1$species, temp.dat1$samp.size, temp.dat1$search.algo, temp.dat1$part.IC, sep="_")#
	temp.dat2 <- read.table(infiles.b[i], header=TRUE, stringsAsFactors=FALSE)#
	temp.dat2$uniqueID <- make.merge.id(temp.dat2)#
	temp.dat <- merge(temp.dat1, temp.dat2, by="uniqueID")#
	temp.dat$gene.size <- 100#
	temp.dat$mut.rate <- 1000#
	temp.dat$replicate <- i#
	dat <- rbind(dat, temp.dat)#
}
samp.size.col <- c("steelblue4", "darkorange2", "green4", "red3")#
samp.sizes <- c(10,20
)
plot(0, type="n", xlim=c(0.5,4.5), ylim=c(-0.02,0.02), xlab="", xaxt="n", ylab="diff in RF dist from true tree for 'no part' - 'part'", main="Lophotrochozoa")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:
2
){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion="AIC", distance="rf_dist")#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}
pdf("Results_Plots/Boxplots.pdf", width=7, height=7)#
par(mfrow=c(2,2), mar=c(4,4,1.5,0.5))#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=c(-0.02,0.02), xlab="", xaxt="n", ylab="diff in RF dist from true tree for 'no part' - 'part'", main="Lophotrochozoa")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:2){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion="AIC", distance="rf_dist")#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=c(-0.1,0.1), xlab="", xaxt="n", ylab="", main="Myriapoda")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:2){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion="AIC", distance="rf_dist")#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=c(-1,1), xlab="num. genes", xaxt="n", ylab="diff in euclidean dist from true tree for 'no part' - 'part'", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:2){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion="AIC", distance="eucl_dist")#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=c(-1,1), xlab="num. genes", xaxt="n", ylab="", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:2){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion="AIC", distance="eucl_dist")#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
dev.off()
pdf("Results_Plots/Boxplots.pdf", width=7, height=7)#
par(mfrow=c(2,2), mar=c(4,4,1.5,0.5))#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=c(-0.03,0.03), xlab="", xaxt="n", ylab="diff in RF dist from true tree for 'no part' - 'part'", main="Lophotrochozoa")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:2){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion="AIC", distance="rf_dist")#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=c(-0.03,0.03), xlab="", xaxt="n", ylab="", main="Myriapoda")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:2){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion="AIC", distance="rf_dist")#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=c(-1,1), xlab="num. genes", xaxt="n", ylab="diff in euclidean dist from true tree for 'no part' - 'part'", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:2){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion="AIC", distance="eucl_dist")#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=c(-1,1), xlab="num. genes", xaxt="n", ylab="", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:2){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion="AIC", distance="eucl_dist")#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
dev.off()
library(scales)#
setwd("~/Documents/UNIL/PartitioningMethods_SimulationProject/FunctioningPipeline/AnalysisResults")#
make.merge.id <- function(dat){#
	id.col <- rep(NA, dim(dat)[1])#
	for(i in 1:dim(dat)[1]){#
		if(length(grep("lopho", dat$file[i])) > 0) spp <- "lopho_"#
		if(length(grep("myria", dat$file[i])) > 0) spp <- "myria_"#
		if(length(grep("10", dat$file[i])) > 0) samp <- "10_"#
		if(length(grep("20", dat$file[i])) > 0) samp <- "20_"#
		if(length(grep("40", dat$file[i])) > 0) samp <- "40_"#
		if(length(grep("80", dat$file[i])) > 0) samp <- "80_"#
		if(length(grep("rcluster", dat$file[i])) > 0) algo <- "rcluster_"#
		if(length(grep("greedy", dat$file[i])) > 0) algo <- "greedy_"#
		if(length(grep("noPart", dat$file[i])) > 0) algo <- "noPart_"#
		if(length(grep("AIC", dat$file[i])) > 0) crit <- "AIC"#
		if(length(grep("AICc", dat$file[i])) > 0) crit <- "AICc"#
		if(length(grep("BIC", dat$file[i])) > 0) crit <- "BIC"#
		if(length(grep("noPart", dat$file[i])) > 0) crit <- "noPart"#
		id.col[i] <- paste(c(spp, samp, algo, crit), collapse="")#
	}#
	return(id.col)#
}#
#####################################
#
get.rep.difference <- function(dat, rep, samp.size, spp, partitioning.criterion, distance){#
	temp.dat <- dat[dat$replicate == rep & dat$samp.size == samp.size & dat$species == spp , ]#
	no.part.result <- temp.dat[temp.dat$search.algo == "noPart" ,]#
	rclust.AIC.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "AIC" ,]#
	rclust.BIC.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "BIC" ,]#
	rclust.AICc.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "AICc",]#
	if(partitioning.criterion == "AIC"){#
		difference <- no.part.result[distance] - rclust.AIC.result[distance]#
	}#
	if(partitioning.criterion == "BIC"){#
		difference <- no.part.result[distance] - rclust.BIC.result[distance]#
	}#
	if(partitioning.criterion == "AICc"){#
		difference <- no.part.result[distance] - rclust.AICc.result[distance]#
	}#
	return(as.numeric(difference))			#
}#
#
#####################################
#
get.boxplot.dat <- function(dat, samp.size, spp, partitioning.criterion, distance){	#
	samp.size.dists <- NULL#
	for(j in unique(dat$replicate)){#
		dist <- get.rep.difference(dat, rep=j, samp.size=samp.size, spp=spp, partitioning.criterion=partitioning.criterion, distance=distance)#
		samp.size.dists <- c(samp.size.dists, dist)#
	}#
	return(samp.size.dists)#
}#
#
#####################################
# # # mut rate 500#
# dat1 <- read.csv("AllStatsOutput_New_Rep1_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
# dat1$uniqueID <- paste(dat1$species, dat1$samp.size, dat1$search.algo, dat1$part.IC, sep="_")#
# dat1b <- read.table("RF_Eucl_results_New_Rep1_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
# dat1b$uniqueID <- make.merge.id(dat1b)#
# dat <- merge(dat1, dat1b, by="uniqueID")#
# dat$gene.size <- 100#
# dat$mut.rate <- 500#
# dat1 <- dat#
# mut rate 1000#
#
infiles.a <- c(#"AllStatsOutput_New_Rep1_100-1000.csv",#
				"AllStatsOutput_New_Rep2_100-1000.csv",#
				#"AllStatsOutput_New_Rep3_100-1000.csv",#
				"AllStatsOutput_New_Rep4_100-1000.csv",#
				"AllStatsOutput_New_Rep5_100-1000.csv",#
				"AllStatsOutput_New_Rep6_100-1000.csv"#,#
				#"AllStatsOutput_New_Rep1_100-500.csv",#
				#"AllStatsOutput_New_Rep2_100-500.csv",#
				#"AllStatsOutput_New_Rep3_100-500.csv",#
				#"AllStatsOutput_New_Rep4_100-500.csv",#
				#"AllStatsOutput_New_Rep5_100-500.csv",#
				#"AllStatsOutput_New_Rep6_100-500.csv",#
				"AllStatsOutput_Newest_Rep7_100-1000.csv"#,#
				# "AllStatsOutput_Newest_Rep8_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep9_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep10_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep11_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep12_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep13_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep14_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep15_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep16_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep17_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep18_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep19_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep20_100-1000.csv"#
				)#
infiles.b <- c(#"RF_Eucl_results_New_Rep1_100-1000.txt",#
				"RF_Eucl_results_New_Rep2_100-1000.txt",#
				#"RF_Eucl_results_New_Rep3_100-1000.txt",#
				"RF_Eucl_results_New_Rep4_100-1000.txt",#
				"RF_Eucl_results_New_Rep5_100-1000.txt",#
				"RF_Eucl_results_New_Rep6_100-1000.txt",#
				#"RF_Eucl_results_New_Rep1_100-500.txt",#
				#"RF_Eucl_results_New_Rep2_100-500.txt",#
				#"RF_Eucl_results_New_Rep3_100-500.txt",#
				#"RF_Eucl_results_New_Rep4_100-500.txt",#
				#"RF_Eucl_results_New_Rep5_100-500.txt",#
				#"RF_Eucl_results_New_Rep6_100-500.txt",#
				"RF_Eucl_results_New_Rep7_100-1000.txt"#,#
				# "RF_Eucl_results_New_Rep8_100-1000.txt",#
				# "RF_Eucl_results_New_Rep9_100-1000.txt",#
				# "RF_Eucl_results_New_Rep10_100-1000.txt",#
				# "RF_Eucl_results_New_Rep11_100-1000.txt",#
				# "RF_Eucl_results_New_Rep12_100-1000.txt",#
				# "RF_Eucl_results_New_Rep13_100-1000.txt",#
				# "RF_Eucl_results_New_Rep14_100-1000.txt",#
				# "RF_Eucl_results_New_Rep15_100-1000.txt",#
				# "RF_Eucl_results_New_Rep16_100-1000.txt",#
				# "RF_Eucl_results_New_Rep17_100-1000.txt",#
				# "RF_Eucl_results_New_Rep18_100-1000.txt",#
				# "RF_Eucl_results_New_Rep19_100-1000.txt",#
				# "RF_Eucl_results_New_Rep20_100-1000.txt"#
				)
dat <- NULL#
for(i in 1:length(infiles.a)){#
	temp.dat1 <- read.csv(infiles.a[i], header=TRUE, stringsAsFactors=FALSE)#
	temp.dat1$uniqueID <- paste(temp.dat1$species, temp.dat1$samp.size, temp.dat1$search.algo, temp.dat1$part.IC, sep="_")#
	temp.dat2 <- read.table(infiles.b[i], header=TRUE, stringsAsFactors=FALSE)#
	temp.dat2$uniqueID <- make.merge.id(temp.dat2)#
	temp.dat <- merge(temp.dat1, temp.dat2, by="uniqueID")#
	temp.dat$gene.size <- 100#
	temp.dat$mut.rate <- 1000#
	temp.dat$replicate <- i#
	dat <- rbind(dat, temp.dat)#
}#
#
#####################################
samp.size.col <- c("steelblue4", "darkorange2", "green4", "red3")#
samp.sizes <- c(10,20,40)#,80)#
#####################################
pdf("Results_Plots/Boxplots.pdf", width=7, height=7)#
par(mfrow=c(2,2), mar=c(4,4,1.5,0.5))#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=c(-0.03,0.03), xlab="", xaxt="n", ylab="diff in RF dist from true tree for 'no part' - 'part'", main="Lophotrochozoa")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:3){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion="AIC", distance="rf_dist")#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=c(-0.03,0.03), xlab="", xaxt="n", ylab="", main="Myriapoda")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:3){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion="AIC", distance="rf_dist")#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=c(-1,1), xlab="num. genes", xaxt="n", ylab="diff in euclidean dist from true tree for 'no part' - 'part'", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:3){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion="AIC", distance="eucl_dist")#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=c(-1,1), xlab="num. genes", xaxt="n", ylab="", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:3){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion="AIC", distance="eucl_dist")#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
dev.off()
library(scales)#
setwd("~/Documents/UNIL/PartitioningMethods_SimulationProject/FunctioningPipeline/AnalysisResults")#
make.merge.id <- function(dat){#
	id.col <- rep(NA, dim(dat)[1])#
	for(i in 1:dim(dat)[1]){#
		if(length(grep("lopho", dat$file[i])) > 0) spp <- "lopho_"#
		if(length(grep("myria", dat$file[i])) > 0) spp <- "myria_"#
		if(length(grep("10", dat$file[i])) > 0) samp <- "10_"#
		if(length(grep("20", dat$file[i])) > 0) samp <- "20_"#
		if(length(grep("40", dat$file[i])) > 0) samp <- "40_"#
		if(length(grep("80", dat$file[i])) > 0) samp <- "80_"#
		if(length(grep("rcluster", dat$file[i])) > 0) algo <- "rcluster_"#
		if(length(grep("greedy", dat$file[i])) > 0) algo <- "greedy_"#
		if(length(grep("noPart", dat$file[i])) > 0) algo <- "noPart_"#
		if(length(grep("AIC", dat$file[i])) > 0) crit <- "AIC"#
		if(length(grep("AICc", dat$file[i])) > 0) crit <- "AICc"#
		if(length(grep("BIC", dat$file[i])) > 0) crit <- "BIC"#
		if(length(grep("noPart", dat$file[i])) > 0) crit <- "noPart"#
		id.col[i] <- paste(c(spp, samp, algo, crit), collapse="")#
	}#
	return(id.col)#
}#
#####################################
species <- c("lopho", "myria")#
spp.pch <- c(1,2)#
samp.sizes <- c(10,20,40,80)#
samp.size.col <- c("steelblue4", "orange", "green4", "red")#
pt.wid <- 2#
opac <- 0.95#
#
analyze.rf.datset <- function(dat, criterion){#
	spp.it <- 1#
	for(i in species){#
		col.it <- 1#
		for(j in samp.sizes){#
			no.part.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "noPart" ,]#
			rclust.AIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AIC" ,]#
			rclust.BIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "BIC" ,]#
			rclust.AICc.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AICc",]#
			if(criterion == "AIC") points(no.part.result$rf_dist - rclust.AIC.result$rf_dist, no.part.result$max.log.lik - rclust.AIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)#
			if(criterion == "BIC") points(no.part.result$rf_dist - rclust.BIC.result$rf_dist, no.part.result$max.log.lik - rclust.BIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)#
			if(criterion == "AICc") points(no.part.result$rf_dist - rclust.AICc.result$rf_dist, no.part.result$max.log.lik - rclust.AICc.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)			#
			col.it <- col.it + 1	#
		}#
		spp.it <- spp.it + 1	#
	}#
}#
analyze.euc.datset <- function(dat, criterion){#
	spp.it <- 1#
	for(i in species){#
		col.it <- 1#
		for(j in samp.sizes){#
			no.part.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "noPart" ,]#
			rclust.AIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AIC" ,]#
			rclust.BIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "BIC" ,]#
			rclust.AICc.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AICc",]#
			if(criterion == "AIC") points(no.part.result$eucl_dist - rclust.AIC.result$eucl_dist, no.part.result$max.log.lik - rclust.AIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)#
			if(criterion == "BIC") points(no.part.result$eucl_dist - rclust.BIC.result$eucl_dist, no.part.result$max.log.lik - rclust.BIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)#
			if(criterion == "AICc") points(no.part.result$eucl_dist - rclust.AICc.result$eucl_dist, no.part.result$max.log.lik - rclust.AICc.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)			#
			col.it <- col.it + 1	#
		}#
		spp.it <- spp.it + 1	#
	}#
}#
#
# can use any of these scores from the treebuilding in IQtree:#
#   max.log.lik#
#   uncon.log.lik#
#   AIC#
#   BIC#
#   AICc#
#   cons.log.lik (consensus tree LL)#
#   sum.branch.lens#
#   sum.int.branch.lens#
euc.size.by.partitions <- function(dat, criterion, stat="max.log.lik"){#
	spp.it <- 1#
	for(i in species){#
		col.it <- 1#
		for(j in samp.sizes){#
			no.part.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "noPart" ,]#
			rclust.AIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AIC" ,]#
			rclust.BIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "BIC" ,]#
			rclust.AICc.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AICc",]#
			if(stat == "max.log.lik"){#
				if(criterion == "AIC") points(no.part.result$eucl_dist - rclust.AIC.result$eucl_dist, no.part.result$max.log.lik - rclust.AIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AIC.result$num.partitions/2)#
				if(criterion == "BIC") points(no.part.result$eucl_dist - rclust.BIC.result$eucl_dist, no.part.result$max.log.lik - rclust.BIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.BIC.result$num.partitions/2)#
				if(criterion == "AICc") points(no.part.result$eucl_dist - rclust.AICc.result$eucl_dist, no.part.result$max.log.lik - rclust.AICc.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AICc.result$num.partitions/2)			#
			}#
			if(stat == "uncon.log.lik"){#
				if(criterion == "AIC") points(no.part.result$eucl_dist - rclust.AIC.result$eucl_dist, no.part.result$uncon.log.lik - rclust.AIC.result$uncon.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AIC.result$num.partitions/2)#
				if(criterion == "BIC") points(no.part.result$eucl_dist - rclust.BIC.result$eucl_dist, no.part.result$uncon.log.lik - rclust.BIC.result$uncon.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.BIC.result$num.partitions/2)#
				if(criterion == "AICc") points(no.part.result$eucl_dist - rclust.AICc.result$eucl_dist, no.part.result$uncon.log.lik - rclust.AICc.result$uncon.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AICc.result$num.partitions/2)			#
			}#
			if(stat == "AIC"){#
				if(criterion == "AIC") points(no.part.result$eucl_dist - rclust.AIC.result$eucl_dist, no.part.result$AIC - rclust.AIC.result$AIC, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AIC.result$num.partitions/2)#
				if(criterion == "BIC") points(no.part.result$eucl_dist - rclust.BIC.result$eucl_dist, no.part.result$AIC - rclust.BIC.result$AIC, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.BIC.result$num.partitions/2)#
				if(criterion == "AICc") points(no.part.result$eucl_dist - rclust.AICc.result$eucl_dist, no.part.result$AIC - rclust.AICc.result$AIC, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AICc.result$num.partitions/2)			#
			}#
			if(stat == "BIC"){#
				if(criterion == "AIC") points(no.part.result$eucl_dist - rclust.AIC.result$eucl_dist, no.part.result$BIC - rclust.AIC.result$BIC, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AIC.result$num.partitions/2)#
				if(criterion == "BIC") points(no.part.result$eucl_dist - rclust.BIC.result$eucl_dist, no.part.result$BIC - rclust.BIC.result$BIC, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.BIC.result$num.partitions/2)#
				if(criterion == "AICc") points(no.part.result$eucl_dist - rclust.AICc.result$eucl_dist, no.part.result$BIC - rclust.AICc.result$BIC, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AICc.result$num.partitions/2)			#
			}#
			if(stat == "AICc"){#
				if(criterion == "AIC") points(no.part.result$eucl_dist - rclust.AIC.result$eucl_dist, no.part.result$AICc - rclust.AIC.result$AICc, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AIC.result$num.partitions/2)#
				if(criterion == "BIC") points(no.part.result$eucl_dist - rclust.BIC.result$eucl_dist, no.part.result$AICc - rclust.BIC.result$AICc, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.BIC.result$num.partitions/2)#
				if(criterion == "AICc") points(no.part.result$eucl_dist - rclust.AICc.result$eucl_dist, no.part.result$AICc - rclust.AICc.result$AICc, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AICc.result$num.partitions/2)			#
			}			#
			col.it <- col.it + 1	#
		}#
		spp.it <- spp.it + 1	#
	}#
}#
#####################################
# mut rate 500#
dat1 <- read.csv("AllStatsOutput_New_Rep1_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
dat1$uniqueID <- paste(dat1$species, dat1$samp.size, dat1$search.algo, dat1$part.IC, sep="_")#
dat1b <- read.table("RF_Eucl_results_New_Rep1_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
dat1b$uniqueID <- make.merge.id(dat1b)#
dat <- merge(dat1, dat1b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 500#
dat1 <- dat#
#
dat2 <- read.csv("AllStatsOutput_New_Rep2_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
dat2$uniqueID <- paste(dat2$species, dat2$samp.size, dat2$search.algo, dat2$part.IC, sep="_")#
dat2b <- read.table("RF_Eucl_results_New_Rep2_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
dat2b$uniqueID <- make.merge.id(dat2b)#
dat <- merge(dat2, dat2b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 500#
dat2 <- dat#
#
dat3 <- read.csv("AllStatsOutput_New_Rep3_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
dat3$uniqueID <- paste(dat3$species, dat3$samp.size, dat3$search.algo, dat3$part.IC, sep="_")#
dat3b <- read.table("RF_Eucl_results_New_Rep3_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
dat3b$uniqueID <- make.merge.id(dat3b)#
dat <- merge(dat3, dat3b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 500#
dat3 <- dat#
#
dat4 <- read.csv("AllStatsOutput_New_Rep4_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
dat4$uniqueID <- paste(dat4$species, dat4$samp.size, dat4$search.algo, dat4$part.IC, sep="_")#
dat4b <- read.table("RF_Eucl_results_New_Rep4_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
dat4b$uniqueID <- make.merge.id(dat4b)#
dat <- merge(dat4, dat4b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 500#
dat4 <- dat#
#
dat5 <- read.csv("AllStatsOutput_New_Rep5_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
dat5$uniqueID <- paste(dat5$species, dat5$samp.size, dat5$search.algo, dat5$part.IC, sep="_")#
dat5b <- read.table("RF_Eucl_results_New_Rep5_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
dat5b$uniqueID <- make.merge.id(dat5b)#
dat <- merge(dat5, dat5b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 500#
dat5 <- dat#
#
dat5b <- read.csv("AllStatsOutput_New_Rep6_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
dat5b$uniqueID <- paste(dat5b$species, dat5b$samp.size, dat5b$search.algo, dat5b$part.IC, sep="_")#
dat5bb <- read.table("RF_Eucl_results_New_Rep6_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
dat5bb$uniqueID <- make.merge.id(dat5bb)#
dat <- merge(dat5b, dat5bb, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 500#
dat5b <- dat#
# mut rate 1000#
dat6 <- read.csv("AllStatsOutput_New_Rep1_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat6$uniqueID <- paste(dat6$species, dat6$samp.size, dat6$search.algo, dat6$part.IC, sep="_")#
dat6b <- read.table("RF_Eucl_results_New_Rep1_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat6b$uniqueID <- make.merge.id(dat6b)#
dat <- merge(dat6, dat6b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat6 <- dat#
#
dat7 <- read.csv("AllStatsOutput_New_Rep2_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat7$uniqueID <- paste(dat7$species, dat7$samp.size, dat7$search.algo, dat7$part.IC, sep="_")#
dat7b <- read.table("RF_Eucl_results_New_Rep2_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat7b$uniqueID <- make.merge.id(dat7b)#
dat <- merge(dat7, dat7b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat7 <- dat#
#
dat8 <- read.csv("AllStatsOutput_New_Rep3_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat8$uniqueID <- paste(dat8$species, dat8$samp.size, dat8$search.algo, dat8$part.IC, sep="_")#
dat8b <- read.table("RF_Eucl_results_New_Rep3_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat8b$uniqueID <- make.merge.id(dat8b)#
dat <- merge(dat8, dat8b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat8 <- dat#
#
dat9 <- read.csv("AllStatsOutput_New_Rep4_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat9$uniqueID <- paste(dat9$species, dat9$samp.size, dat9$search.algo, dat9$part.IC, sep="_")#
dat9b <- read.table("RF_Eucl_results_New_Rep4_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat9b$uniqueID <- make.merge.id(dat9b)#
dat <- merge(dat9, dat9b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat9 <- dat#
#
dat10 <- read.csv("AllStatsOutput_New_Rep5_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat10$uniqueID <- paste(dat10$species, dat10$samp.size, dat10$search.algo, dat10$part.IC, sep="_")#
dat10b <- read.table("RF_Eucl_results_New_Rep5_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat10b$uniqueID <- make.merge.id(dat10b)#
dat <- merge(dat10, dat10b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat10 <- dat#
#
dat11 <- read.csv("AllStatsOutput_New_Rep6_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat11$uniqueID <- paste(dat11$species, dat11$samp.size, dat11$search.algo, dat11$part.IC, sep="_")#
dat11b <- read.table("RF_Eucl_results_New_Rep6_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat11b$uniqueID <- make.merge.id(dat11b)#
dat <- merge(dat11, dat11b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat11 <- dat#
#
dat12 <- read.csv("AllStatsOutput_New_Rep7_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat12$uniqueID <- paste(dat12$species, dat12$samp.size, dat12$search.algo, dat12$part.IC, sep="_")#
dat12b <- read.table("RF_Eucl_results_New_Rep7_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat12b$uniqueID <- make.merge.id(dat12b)#
dat <- merge(dat12, dat12b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat12 <- dat#
#
dat13 <- read.csv("AllStatsOutput_New_Rep8_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat13$uniqueID <- paste(dat13$species, dat13$samp.size, dat13$search.algo, dat13$part.IC, sep="_")#
dat13b <- read.table("RF_Eucl_results_New_Rep8_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat13b$uniqueID <- make.merge.id(dat13b)#
dat <- merge(dat13, dat13b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat13 <- dat#
#########
##plot(0, type="n", xlim=c(-0.5,0.5), ylim=c(-50,50))#
##analyze.rf.datset(dat1, "AIC")#
#
#########
plot.stat <- "max.log.lik"#
pdf("Results_Plots/CompareLogLikelihoods.pdf", width=8, height=4)#
par(mfrow=c(1,3))#
opac <- 0.75#
pt.lwd <- 2#
xlimits <- c(-0.9,0.9)#
ylimits <- c(-52.5,3)#
plot(0, type="n", xlim=xlimits, ylim=ylimits, xlab="no part - part eucl dist from true tree", ylab="no part - part max log likelihood", main="partitioning w/ AIC")#
abline(h=0, col="gray75", lty=2); abline(v=0, col="gray75", lty=2)#
#analyze.euc.datset(dat1, "AIC")#
text(-0.7,3.5, "no partitioning", cex=0.6)#
text(-0.7,2, "higher max LL", cex=0.6)#
text(-0.7,-2, "partitioning", cex=0.6)#
text(-0.7,-3.5, "higher max LL", cex=0.6)#
euc.size.by.partitions(dat1, "AIC", stat=plot.stat)#
euc.size.by.partitions(dat2, "AIC", stat=plot.stat)#
euc.size.by.partitions(dat3, "AIC", stat=plot.stat)#
euc.size.by.partitions(dat4, "AIC", stat=plot.stat)#
euc.size.by.partitions(dat5, "AIC", stat=plot.stat)#
euc.size.by.partitions(dat5b, "AIC", stat=plot.stat)#
euc.size.by.partitions(dat6, "AIC", stat=plot.stat)#
euc.size.by.partitions(dat7, "AIC", stat=plot.stat)#
euc.size.by.partitions(dat8, "AIC", stat=plot.stat)#
euc.size.by.partitions(dat9, "AIC", stat=plot.stat)#
euc.size.by.partitions(dat10, "AIC", stat=plot.stat)#
euc.size.by.partitions(dat11, "AIC", stat=plot.stat)#
euc.size.by.partitions(dat12, "AIC", stat=plot.stat)#
euc.size.by.partitions(dat13, "AIC", stat=plot.stat)#
legend("bottomleft", c("lopho", "myria"), species, pch=spp.pch, col="black", bg="white", bty="n")#
#
plot(0, type="n", xlim=xlimits, ylim=ylimits, xlab="no part - part eucl dist from true tree", ylab="no part - part max log likelihood", main="partitioning w/ BIC")#
abline(h=0, col="gray75", lty=2); abline(v=0, col="gray75", lty=2)#
text(-0.5,-49, "no partitioning", cex=0.7)#
text(-0.5,-51, "closer to true tree", cex=0.7)#
text(0.5,-49, "partitioning", cex=0.7)#
text(0.5,-51, "closer to true tree", cex=0.7)#
euc.size.by.partitions(dat1, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat2, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat3, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat4, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat5, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat5b, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat6, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat7, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat8, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat9, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat10, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat11, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat12, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat13, "BIC", stat=plot.stat)#
#
plot(0, type="n", xlim=xlimits, ylim=ylimits, xlab="no part - part eucl dist from true tree", ylab="no part - part max log likelihood", main="partitioning w/ AICc")#
abline(h=0, col="gray75", lty=2); abline(v=0, col="gray75", lty=2)#
euc.size.by.partitions(dat1, "AICc", stat=plot.stat)#
euc.size.by.partitions(dat2, "AICc", stat=plot.stat)#
euc.size.by.partitions(dat3, "AICc", stat=plot.stat)#
euc.size.by.partitions(dat4, "AICc", stat=plot.stat)#
euc.size.by.partitions(dat5, "AICc", stat=plot.stat)#
euc.size.by.partitions(dat5b, "AICc", stat=plot.stat)#
euc.size.by.partitions(dat6, "AICc", stat=plot.stat)#
euc.size.by.partitions(dat7, "AICc", stat=plot.stat)#
euc.size.by.partitions(dat8, "AICc", stat=plot.stat)#
euc.size.by.partitions(dat9, "AICc", stat=plot.stat)#
euc.size.by.partitions(dat10, "AICc", stat=plot.stat)#
euc.size.by.partitions(dat11, "AICc", stat=plot.stat)#
euc.size.by.partitions(dat12, "AICc", stat=plot.stat)#
euc.size.by.partitions(dat13, "AICc", stat=plot.stat)#
#
legend("bottomleft", c("10", "20", "40", "80"), pch=15, col=samp.size.col, title = "num. genes", bg="white", cex=0.9, pt.cex=1.5)#
dev.off()
library(scales)#
setwd("~/Documents/UNIL/PartitioningMethods_SimulationProject/FunctioningPipeline/AnalysisResults")#
make.merge.id <- function(dat){#
	id.col <- rep(NA, dim(dat)[1])#
	for(i in 1:dim(dat)[1]){#
		if(length(grep("lopho", dat$file[i])) > 0) spp <- "lopho_"#
		if(length(grep("myria", dat$file[i])) > 0) spp <- "myria_"#
		if(length(grep("10", dat$file[i])) > 0) samp <- "10_"#
		if(length(grep("20", dat$file[i])) > 0) samp <- "20_"#
		if(length(grep("40", dat$file[i])) > 0) samp <- "40_"#
		if(length(grep("80", dat$file[i])) > 0) samp <- "80_"#
		if(length(grep("rcluster", dat$file[i])) > 0) algo <- "rcluster_"#
		if(length(grep("greedy", dat$file[i])) > 0) algo <- "greedy_"#
		if(length(grep("noPart", dat$file[i])) > 0) algo <- "noPart_"#
		if(length(grep("AIC", dat$file[i])) > 0) crit <- "AIC"#
		if(length(grep("AICc", dat$file[i])) > 0) crit <- "AICc"#
		if(length(grep("BIC", dat$file[i])) > 0) crit <- "BIC"#
		if(length(grep("noPart", dat$file[i])) > 0) crit <- "noPart"#
		id.col[i] <- paste(c(spp, samp, algo, crit), collapse="")#
	}#
	return(id.col)#
}#
#####################################
species <- c("lopho", "myria")#
spp.pch <- c(1,2)#
samp.sizes <- c(10,20,40,80)#
samp.size.col <- c("steelblue4", "orange", "green4", "red")#
pt.wid <- 2#
opac <- 0.95#
#
analyze.rf.datset <- function(dat, criterion){#
	spp.it <- 1#
	for(i in species){#
		col.it <- 1#
		for(j in samp.sizes){#
			no.part.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "noPart" ,]#
			rclust.AIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AIC" ,]#
			rclust.BIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "BIC" ,]#
			rclust.AICc.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AICc",]#
			if(criterion == "AIC") points(no.part.result$rf_dist - rclust.AIC.result$rf_dist, no.part.result$max.log.lik - rclust.AIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)#
			if(criterion == "BIC") points(no.part.result$rf_dist - rclust.BIC.result$rf_dist, no.part.result$max.log.lik - rclust.BIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)#
			if(criterion == "AICc") points(no.part.result$rf_dist - rclust.AICc.result$rf_dist, no.part.result$max.log.lik - rclust.AICc.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)			#
			col.it <- col.it + 1	#
		}#
		spp.it <- spp.it + 1	#
	}#
}#
analyze.euc.datset <- function(dat, criterion){#
	spp.it <- 1#
	for(i in species){#
		col.it <- 1#
		for(j in samp.sizes){#
			no.part.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "noPart" ,]#
			rclust.AIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AIC" ,]#
			rclust.BIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "BIC" ,]#
			rclust.AICc.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AICc",]#
			if(criterion == "AIC") points(no.part.result$eucl_dist - rclust.AIC.result$eucl_dist, no.part.result$max.log.lik - rclust.AIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)#
			if(criterion == "BIC") points(no.part.result$eucl_dist - rclust.BIC.result$eucl_dist, no.part.result$max.log.lik - rclust.BIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)#
			if(criterion == "AICc") points(no.part.result$eucl_dist - rclust.AICc.result$eucl_dist, no.part.result$max.log.lik - rclust.AICc.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)			#
			col.it <- col.it + 1	#
		}#
		spp.it <- spp.it + 1	#
	}#
}#
#
# can use any of these scores from the treebuilding in IQtree:#
#   max.log.lik#
#   uncon.log.lik#
#   AIC#
#   BIC#
#   AICc#
#   cons.log.lik (consensus tree LL)#
#   sum.branch.lens#
#   sum.int.branch.lens#
euc.size.by.partitions <- function(dat, criterion, stat="max.log.lik"){#
	spp.it <- 1#
	for(i in species){#
		col.it <- 1#
		for(j in samp.sizes){#
			no.part.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "noPart" ,]#
			rclust.AIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AIC" ,]#
			rclust.BIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "BIC" ,]#
			rclust.AICc.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AICc",]#
			if(stat == "max.log.lik"){#
				if(criterion == "AIC") points(no.part.result$eucl_dist - rclust.AIC.result$eucl_dist, no.part.result$max.log.lik - rclust.AIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AIC.result$num.partitions/2)#
				if(criterion == "BIC") points(no.part.result$eucl_dist - rclust.BIC.result$eucl_dist, no.part.result$max.log.lik - rclust.BIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.BIC.result$num.partitions/2)#
				if(criterion == "AICc") points(no.part.result$eucl_dist - rclust.AICc.result$eucl_dist, no.part.result$max.log.lik - rclust.AICc.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AICc.result$num.partitions/2)			#
			}#
			if(stat == "uncon.log.lik"){#
				if(criterion == "AIC") points(no.part.result$eucl_dist - rclust.AIC.result$eucl_dist, no.part.result$uncon.log.lik - rclust.AIC.result$uncon.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AIC.result$num.partitions/2)#
				if(criterion == "BIC") points(no.part.result$eucl_dist - rclust.BIC.result$eucl_dist, no.part.result$uncon.log.lik - rclust.BIC.result$uncon.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.BIC.result$num.partitions/2)#
				if(criterion == "AICc") points(no.part.result$eucl_dist - rclust.AICc.result$eucl_dist, no.part.result$uncon.log.lik - rclust.AICc.result$uncon.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AICc.result$num.partitions/2)			#
			}#
			if(stat == "AIC"){#
				if(criterion == "AIC") points(no.part.result$eucl_dist - rclust.AIC.result$eucl_dist, no.part.result$AIC - rclust.AIC.result$AIC, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AIC.result$num.partitions/2)#
				if(criterion == "BIC") points(no.part.result$eucl_dist - rclust.BIC.result$eucl_dist, no.part.result$AIC - rclust.BIC.result$AIC, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.BIC.result$num.partitions/2)#
				if(criterion == "AICc") points(no.part.result$eucl_dist - rclust.AICc.result$eucl_dist, no.part.result$AIC - rclust.AICc.result$AIC, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AICc.result$num.partitions/2)			#
			}#
			if(stat == "BIC"){#
				if(criterion == "AIC") points(no.part.result$eucl_dist - rclust.AIC.result$eucl_dist, no.part.result$BIC - rclust.AIC.result$BIC, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AIC.result$num.partitions/2)#
				if(criterion == "BIC") points(no.part.result$eucl_dist - rclust.BIC.result$eucl_dist, no.part.result$BIC - rclust.BIC.result$BIC, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.BIC.result$num.partitions/2)#
				if(criterion == "AICc") points(no.part.result$eucl_dist - rclust.AICc.result$eucl_dist, no.part.result$BIC - rclust.AICc.result$BIC, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AICc.result$num.partitions/2)			#
			}#
			if(stat == "AICc"){#
				if(criterion == "AIC") points(no.part.result$eucl_dist - rclust.AIC.result$eucl_dist, no.part.result$AICc - rclust.AIC.result$AICc, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AIC.result$num.partitions/2)#
				if(criterion == "BIC") points(no.part.result$eucl_dist - rclust.BIC.result$eucl_dist, no.part.result$AICc - rclust.BIC.result$AICc, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.BIC.result$num.partitions/2)#
				if(criterion == "AICc") points(no.part.result$eucl_dist - rclust.AICc.result$eucl_dist, no.part.result$AICc - rclust.AICc.result$AICc, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AICc.result$num.partitions/2)			#
			}			#
			col.it <- col.it + 1	#
		}#
		spp.it <- spp.it + 1	#
	}#
}#
#####################################
# mut rate 500#
dat1 <- read.csv("AllStatsOutput_New_Rep1_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
dat1$uniqueID <- paste(dat1$species, dat1$samp.size, dat1$search.algo, dat1$part.IC, sep="_")#
dat1b <- read.table("RF_Eucl_results_New_Rep1_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
dat1b$uniqueID <- make.merge.id(dat1b)#
dat <- merge(dat1, dat1b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 500#
dat1 <- dat#
#
dat2 <- read.csv("AllStatsOutput_New_Rep2_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
dat2$uniqueID <- paste(dat2$species, dat2$samp.size, dat2$search.algo, dat2$part.IC, sep="_")#
dat2b <- read.table("RF_Eucl_results_New_Rep2_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
dat2b$uniqueID <- make.merge.id(dat2b)#
dat <- merge(dat2, dat2b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 500#
dat2 <- dat#
#
dat3 <- read.csv("AllStatsOutput_New_Rep3_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
dat3$uniqueID <- paste(dat3$species, dat3$samp.size, dat3$search.algo, dat3$part.IC, sep="_")#
dat3b <- read.table("RF_Eucl_results_New_Rep3_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
dat3b$uniqueID <- make.merge.id(dat3b)#
dat <- merge(dat3, dat3b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 500#
dat3 <- dat#
#
dat4 <- read.csv("AllStatsOutput_New_Rep4_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
dat4$uniqueID <- paste(dat4$species, dat4$samp.size, dat4$search.algo, dat4$part.IC, sep="_")#
dat4b <- read.table("RF_Eucl_results_New_Rep4_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
dat4b$uniqueID <- make.merge.id(dat4b)#
dat <- merge(dat4, dat4b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 500#
dat4 <- dat#
#
dat5 <- read.csv("AllStatsOutput_New_Rep5_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
dat5$uniqueID <- paste(dat5$species, dat5$samp.size, dat5$search.algo, dat5$part.IC, sep="_")#
dat5b <- read.table("RF_Eucl_results_New_Rep5_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
dat5b$uniqueID <- make.merge.id(dat5b)#
dat <- merge(dat5, dat5b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 500#
dat5 <- dat#
#
dat5b <- read.csv("AllStatsOutput_New_Rep6_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
dat5b$uniqueID <- paste(dat5b$species, dat5b$samp.size, dat5b$search.algo, dat5b$part.IC, sep="_")#
dat5bb <- read.table("RF_Eucl_results_New_Rep6_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
dat5bb$uniqueID <- make.merge.id(dat5bb)#
dat <- merge(dat5b, dat5bb, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 500#
dat5b <- dat#
# mut rate 1000#
dat6 <- read.csv("AllStatsOutput_New_Rep1_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat6$uniqueID <- paste(dat6$species, dat6$samp.size, dat6$search.algo, dat6$part.IC, sep="_")#
dat6b <- read.table("RF_Eucl_results_New_Rep1_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat6b$uniqueID <- make.merge.id(dat6b)#
dat <- merge(dat6, dat6b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat6 <- dat#
#
dat7 <- read.csv("AllStatsOutput_New_Rep2_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat7$uniqueID <- paste(dat7$species, dat7$samp.size, dat7$search.algo, dat7$part.IC, sep="_")#
dat7b <- read.table("RF_Eucl_results_New_Rep2_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat7b$uniqueID <- make.merge.id(dat7b)#
dat <- merge(dat7, dat7b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat7 <- dat#
#
dat8 <- read.csv("AllStatsOutput_New_Rep3_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat8$uniqueID <- paste(dat8$species, dat8$samp.size, dat8$search.algo, dat8$part.IC, sep="_")#
dat8b <- read.table("RF_Eucl_results_New_Rep3_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat8b$uniqueID <- make.merge.id(dat8b)#
dat <- merge(dat8, dat8b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat8 <- dat#
#
dat9 <- read.csv("AllStatsOutput_New_Rep4_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat9$uniqueID <- paste(dat9$species, dat9$samp.size, dat9$search.algo, dat9$part.IC, sep="_")#
dat9b <- read.table("RF_Eucl_results_New_Rep4_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat9b$uniqueID <- make.merge.id(dat9b)#
dat <- merge(dat9, dat9b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat9 <- dat#
#
dat10 <- read.csv("AllStatsOutput_New_Rep5_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat10$uniqueID <- paste(dat10$species, dat10$samp.size, dat10$search.algo, dat10$part.IC, sep="_")#
dat10b <- read.table("RF_Eucl_results_New_Rep5_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat10b$uniqueID <- make.merge.id(dat10b)#
dat <- merge(dat10, dat10b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat10 <- dat#
#
dat11 <- read.csv("AllStatsOutput_New_Rep6_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat11$uniqueID <- paste(dat11$species, dat11$samp.size, dat11$search.algo, dat11$part.IC, sep="_")#
dat11b <- read.table("RF_Eucl_results_New_Rep6_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat11b$uniqueID <- make.merge.id(dat11b)#
dat <- merge(dat11, dat11b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat11 <- dat#
#
dat12 <- read.csv("AllStatsOutput_New_Rep7_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat12$uniqueID <- paste(dat12$species, dat12$samp.size, dat12$search.algo, dat12$part.IC, sep="_")#
dat12b <- read.table("RF_Eucl_results_New_Rep7_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat12b$uniqueID <- make.merge.id(dat12b)#
dat <- merge(dat12, dat12b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat12 <- dat#
#
dat13 <- read.csv("AllStatsOutput_New_Rep8_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat13$uniqueID <- paste(dat13$species, dat13$samp.size, dat13$search.algo, dat13$part.IC, sep="_")#
dat13b <- read.table("RF_Eucl_results_New_Rep8_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat13b$uniqueID <- make.merge.id(dat13b)#
dat <- merge(dat13, dat13b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat13 <- dat#
#########
##plot(0, type="n", xlim=c(-0.5,0.5), ylim=c(-50,50))#
##analyze.rf.datset(dat1, "AIC")#
#
#########
plot.stat <- "max.log.lik"#
pdf("Results_Plots/CompareLogLikelihoods.pdf", width=8, height=4)#
par(mfrow=c(1,3))#
opac <- 0.75#
pt.lwd <- 2#
xlimits <- c(-0.9,0.9)#
ylimits <- c(-52.5,3)#
plot(0, type="n", xlim=xlimits, ylim=ylimits, xlab="no part - part eucl dist from true tree", ylab="no part - part max log likelihood", main="partitioning w/ AIC")#
abline(h=0, col="gray75", lty=2); abline(v=0, col="gray75", lty=2)#
#analyze.euc.datset(dat1, "AIC")#
text(-0.7,3.5, "no partitioning", cex=0.6)#
text(-0.7,2, "higher max LL", cex=0.6)#
text(-0.7,-2, "partitioning", cex=0.6)#
text(-0.7,-3.5, "higher max LL", cex=0.6)#
# euc.size.by.partitions(dat1, "AIC", stat=plot.stat)#
# euc.size.by.partitions(dat2, "AIC", stat=plot.stat)#
# euc.size.by.partitions(dat3, "AIC", stat=plot.stat)#
# euc.size.by.partitions(dat4, "AIC", stat=plot.stat)#
# euc.size.by.partitions(dat5, "AIC", stat=plot.stat)#
# euc.size.by.partitions(dat5b, "AIC", stat=plot.stat)#
euc.size.by.partitions(dat6, "AIC", stat=plot.stat)#
euc.size.by.partitions(dat7, "AIC", stat=plot.stat)#
euc.size.by.partitions(dat8, "AIC", stat=plot.stat)#
euc.size.by.partitions(dat9, "AIC", stat=plot.stat)#
euc.size.by.partitions(dat10, "AIC", stat=plot.stat)#
euc.size.by.partitions(dat11, "AIC", stat=plot.stat)#
euc.size.by.partitions(dat12, "AIC", stat=plot.stat)#
euc.size.by.partitions(dat13, "AIC", stat=plot.stat)#
legend("bottomleft", c("lopho", "myria"), species, pch=spp.pch, col="black", bg="white", bty="n")#
#
plot(0, type="n", xlim=xlimits, ylim=ylimits, xlab="no part - part eucl dist from true tree", ylab="no part - part max log likelihood", main="partitioning w/ BIC")#
abline(h=0, col="gray75", lty=2); abline(v=0, col="gray75", lty=2)#
text(-0.5,-49, "no partitioning", cex=0.7)#
text(-0.5,-51, "closer to true tree", cex=0.7)#
text(0.5,-49, "partitioning", cex=0.7)#
text(0.5,-51, "closer to true tree", cex=0.7)#
# euc.size.by.partitions(dat1, "BIC", stat=plot.stat)#
# euc.size.by.partitions(dat2, "BIC", stat=plot.stat)#
# euc.size.by.partitions(dat3, "BIC", stat=plot.stat)#
# euc.size.by.partitions(dat4, "BIC", stat=plot.stat)#
# euc.size.by.partitions(dat5, "BIC", stat=plot.stat)#
# euc.size.by.partitions(dat5b, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat6, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat7, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat8, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat9, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat10, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat11, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat12, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat13, "BIC", stat=plot.stat)#
#
plot(0, type="n", xlim=xlimits, ylim=ylimits, xlab="no part - part eucl dist from true tree", ylab="no part - part max log likelihood", main="partitioning w/ AICc")#
abline(h=0, col="gray75", lty=2); abline(v=0, col="gray75", lty=2)#
# euc.size.by.partitions(dat1, "AICc", stat=plot.stat)#
# euc.size.by.partitions(dat2, "AICc", stat=plot.stat)#
# euc.size.by.partitions(dat3, "AICc", stat=plot.stat)#
# euc.size.by.partitions(dat4, "AICc", stat=plot.stat)#
# euc.size.by.partitions(dat5, "AICc", stat=plot.stat)#
# euc.size.by.partitions(dat5b, "AICc", stat=plot.stat)#
euc.size.by.partitions(dat6, "AICc", stat=plot.stat)#
euc.size.by.partitions(dat7, "AICc", stat=plot.stat)#
euc.size.by.partitions(dat8, "AICc", stat=plot.stat)#
euc.size.by.partitions(dat9, "AICc", stat=plot.stat)#
euc.size.by.partitions(dat10, "AICc", stat=plot.stat)#
euc.size.by.partitions(dat11, "AICc", stat=plot.stat)#
euc.size.by.partitions(dat12, "AICc", stat=plot.stat)#
euc.size.by.partitions(dat13, "AICc", stat=plot.stat)#
#
legend("bottomleft", c("10", "20", "40", "80"), pch=15, col=samp.size.col, title = "num. genes", bg="white", cex=0.9, pt.cex=1.5)#
dev.off()
library(scales)#
setwd("~/Documents/UNIL/PartitioningMethods_SimulationProject/FunctioningPipeline/AnalysisResults")#
make.merge.id <- function(dat){#
	id.col <- rep(NA, dim(dat)[1])#
	for(i in 1:dim(dat)[1]){#
		if(length(grep("lopho", dat$file[i])) > 0) spp <- "lopho_"#
		if(length(grep("myria", dat$file[i])) > 0) spp <- "myria_"#
		if(length(grep("10", dat$file[i])) > 0) samp <- "10_"#
		if(length(grep("20", dat$file[i])) > 0) samp <- "20_"#
		if(length(grep("40", dat$file[i])) > 0) samp <- "40_"#
		if(length(grep("80", dat$file[i])) > 0) samp <- "80_"#
		if(length(grep("rcluster", dat$file[i])) > 0) algo <- "rcluster_"#
		if(length(grep("greedy", dat$file[i])) > 0) algo <- "greedy_"#
		if(length(grep("noPart", dat$file[i])) > 0) algo <- "noPart_"#
		if(length(grep("AIC", dat$file[i])) > 0) crit <- "AIC"#
		if(length(grep("AICc", dat$file[i])) > 0) crit <- "AICc"#
		if(length(grep("BIC", dat$file[i])) > 0) crit <- "BIC"#
		if(length(grep("noPart", dat$file[i])) > 0) crit <- "noPart"#
		id.col[i] <- paste(c(spp, samp, algo, crit), collapse="")#
	}#
	return(id.col)#
}#
#####################################
species <- c("lopho", "myria")#
spp.pch <- c(1,2)#
samp.sizes <- c(10,20,40,80)#
samp.size.col <- c("steelblue4", "orange", "green4", "red")#
pt.wid <- 2#
opac <- 0.95#
#
analyze.rf.datset <- function(dat, criterion){#
	spp.it <- 1#
	for(i in species){#
		col.it <- 1#
		for(j in samp.sizes){#
			no.part.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "noPart" ,]#
			rclust.AIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AIC" ,]#
			rclust.BIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "BIC" ,]#
			rclust.AICc.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AICc",]#
			if(criterion == "AIC") points(no.part.result$rf_dist - rclust.AIC.result$rf_dist, no.part.result$max.log.lik - rclust.AIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)#
			if(criterion == "BIC") points(no.part.result$rf_dist - rclust.BIC.result$rf_dist, no.part.result$max.log.lik - rclust.BIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)#
			if(criterion == "AICc") points(no.part.result$rf_dist - rclust.AICc.result$rf_dist, no.part.result$max.log.lik - rclust.AICc.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)			#
			col.it <- col.it + 1	#
		}#
		spp.it <- spp.it + 1	#
	}#
}#
analyze.euc.datset <- function(dat, criterion){#
	spp.it <- 1#
	for(i in species){#
		col.it <- 1#
		for(j in samp.sizes){#
			no.part.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "noPart" ,]#
			rclust.AIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AIC" ,]#
			rclust.BIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "BIC" ,]#
			rclust.AICc.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AICc",]#
			if(criterion == "AIC") points(no.part.result$eucl_dist - rclust.AIC.result$eucl_dist, no.part.result$max.log.lik - rclust.AIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)#
			if(criterion == "BIC") points(no.part.result$eucl_dist - rclust.BIC.result$eucl_dist, no.part.result$max.log.lik - rclust.BIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)#
			if(criterion == "AICc") points(no.part.result$eucl_dist - rclust.AICc.result$eucl_dist, no.part.result$max.log.lik - rclust.AICc.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)			#
			col.it <- col.it + 1	#
		}#
		spp.it <- spp.it + 1	#
	}#
}#
#
# can use any of these scores from the treebuilding in IQtree:#
#   max.log.lik#
#   uncon.log.lik#
#   AIC#
#   BIC#
#   AICc#
#   cons.log.lik (consensus tree LL)#
#   sum.branch.lens#
#   sum.int.branch.lens#
euc.size.by.partitions <- function(dat, criterion, stat="max.log.lik"){#
	spp.it <- 1#
	for(i in species){#
		col.it <- 1#
		for(j in samp.sizes){#
			no.part.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "noPart" ,]#
			rclust.AIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AIC" ,]#
			rclust.BIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "BIC" ,]#
			rclust.AICc.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AICc",]#
			if(stat == "max.log.lik"){#
				if(criterion == "AIC") points(no.part.result$eucl_dist - rclust.AIC.result$eucl_dist, no.part.result$max.log.lik - rclust.AIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AIC.result$num.partitions/2)#
				if(criterion == "BIC") points(no.part.result$eucl_dist - rclust.BIC.result$eucl_dist, no.part.result$max.log.lik - rclust.BIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.BIC.result$num.partitions/2)#
				if(criterion == "AICc") points(no.part.result$eucl_dist - rclust.AICc.result$eucl_dist, no.part.result$max.log.lik - rclust.AICc.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AICc.result$num.partitions/2)			#
			}#
			if(stat == "uncon.log.lik"){#
				if(criterion == "AIC") points(no.part.result$eucl_dist - rclust.AIC.result$eucl_dist, no.part.result$uncon.log.lik - rclust.AIC.result$uncon.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AIC.result$num.partitions/2)#
				if(criterion == "BIC") points(no.part.result$eucl_dist - rclust.BIC.result$eucl_dist, no.part.result$uncon.log.lik - rclust.BIC.result$uncon.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.BIC.result$num.partitions/2)#
				if(criterion == "AICc") points(no.part.result$eucl_dist - rclust.AICc.result$eucl_dist, no.part.result$uncon.log.lik - rclust.AICc.result$uncon.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AICc.result$num.partitions/2)			#
			}#
			if(stat == "AIC"){#
				if(criterion == "AIC") points(no.part.result$eucl_dist - rclust.AIC.result$eucl_dist, no.part.result$AIC - rclust.AIC.result$AIC, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AIC.result$num.partitions/2)#
				if(criterion == "BIC") points(no.part.result$eucl_dist - rclust.BIC.result$eucl_dist, no.part.result$AIC - rclust.BIC.result$AIC, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.BIC.result$num.partitions/2)#
				if(criterion == "AICc") points(no.part.result$eucl_dist - rclust.AICc.result$eucl_dist, no.part.result$AIC - rclust.AICc.result$AIC, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AICc.result$num.partitions/2)			#
			}#
			if(stat == "BIC"){#
				if(criterion == "AIC") points(no.part.result$eucl_dist - rclust.AIC.result$eucl_dist, no.part.result$BIC - rclust.AIC.result$BIC, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AIC.result$num.partitions/2)#
				if(criterion == "BIC") points(no.part.result$eucl_dist - rclust.BIC.result$eucl_dist, no.part.result$BIC - rclust.BIC.result$BIC, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.BIC.result$num.partitions/2)#
				if(criterion == "AICc") points(no.part.result$eucl_dist - rclust.AICc.result$eucl_dist, no.part.result$BIC - rclust.AICc.result$BIC, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AICc.result$num.partitions/2)			#
			}#
			if(stat == "AICc"){#
				if(criterion == "AIC") points(no.part.result$eucl_dist - rclust.AIC.result$eucl_dist, no.part.result$AICc - rclust.AIC.result$AICc, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AIC.result$num.partitions/2)#
				if(criterion == "BIC") points(no.part.result$eucl_dist - rclust.BIC.result$eucl_dist, no.part.result$AICc - rclust.BIC.result$AICc, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.BIC.result$num.partitions/2)#
				if(criterion == "AICc") points(no.part.result$eucl_dist - rclust.AICc.result$eucl_dist, no.part.result$AICc - rclust.AICc.result$AICc, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AICc.result$num.partitions/2)			#
			}			#
			col.it <- col.it + 1	#
		}#
		spp.it <- spp.it + 1	#
	}#
}#
#####################################
# mut rate 500#
dat1 <- read.csv("AllStatsOutput_New_Rep1_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
dat1$uniqueID <- paste(dat1$species, dat1$samp.size, dat1$search.algo, dat1$part.IC, sep="_")#
dat1b <- read.table("RF_Eucl_results_New_Rep1_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
dat1b$uniqueID <- make.merge.id(dat1b)#
dat <- merge(dat1, dat1b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 500#
dat1 <- dat#
#
dat2 <- read.csv("AllStatsOutput_New_Rep2_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
dat2$uniqueID <- paste(dat2$species, dat2$samp.size, dat2$search.algo, dat2$part.IC, sep="_")#
dat2b <- read.table("RF_Eucl_results_New_Rep2_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
dat2b$uniqueID <- make.merge.id(dat2b)#
dat <- merge(dat2, dat2b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 500#
dat2 <- dat#
#
dat3 <- read.csv("AllStatsOutput_New_Rep3_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
dat3$uniqueID <- paste(dat3$species, dat3$samp.size, dat3$search.algo, dat3$part.IC, sep="_")#
dat3b <- read.table("RF_Eucl_results_New_Rep3_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
dat3b$uniqueID <- make.merge.id(dat3b)#
dat <- merge(dat3, dat3b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 500#
dat3 <- dat#
#
dat4 <- read.csv("AllStatsOutput_New_Rep4_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
dat4$uniqueID <- paste(dat4$species, dat4$samp.size, dat4$search.algo, dat4$part.IC, sep="_")#
dat4b <- read.table("RF_Eucl_results_New_Rep4_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
dat4b$uniqueID <- make.merge.id(dat4b)#
dat <- merge(dat4, dat4b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 500#
dat4 <- dat#
#
dat5 <- read.csv("AllStatsOutput_New_Rep5_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
dat5$uniqueID <- paste(dat5$species, dat5$samp.size, dat5$search.algo, dat5$part.IC, sep="_")#
dat5b <- read.table("RF_Eucl_results_New_Rep5_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
dat5b$uniqueID <- make.merge.id(dat5b)#
dat <- merge(dat5, dat5b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 500#
dat5 <- dat#
#
dat5b <- read.csv("AllStatsOutput_New_Rep6_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
dat5b$uniqueID <- paste(dat5b$species, dat5b$samp.size, dat5b$search.algo, dat5b$part.IC, sep="_")#
dat5bb <- read.table("RF_Eucl_results_New_Rep6_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
dat5bb$uniqueID <- make.merge.id(dat5bb)#
dat <- merge(dat5b, dat5bb, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 500#
dat5b <- dat#
# mut rate 1000#
dat6 <- read.csv("AllStatsOutput_New_Rep1_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat6$uniqueID <- paste(dat6$species, dat6$samp.size, dat6$search.algo, dat6$part.IC, sep="_")#
dat6b <- read.table("RF_Eucl_results_New_Rep1_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat6b$uniqueID <- make.merge.id(dat6b)#
dat <- merge(dat6, dat6b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat6 <- dat#
#
dat7 <- read.csv("AllStatsOutput_New_Rep2_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat7$uniqueID <- paste(dat7$species, dat7$samp.size, dat7$search.algo, dat7$part.IC, sep="_")#
dat7b <- read.table("RF_Eucl_results_New_Rep2_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat7b$uniqueID <- make.merge.id(dat7b)#
dat <- merge(dat7, dat7b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat7 <- dat#
#
dat8 <- read.csv("AllStatsOutput_New_Rep3_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat8$uniqueID <- paste(dat8$species, dat8$samp.size, dat8$search.algo, dat8$part.IC, sep="_")#
dat8b <- read.table("RF_Eucl_results_New_Rep3_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat8b$uniqueID <- make.merge.id(dat8b)#
dat <- merge(dat8, dat8b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat8 <- dat#
#
dat9 <- read.csv("AllStatsOutput_New_Rep4_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat9$uniqueID <- paste(dat9$species, dat9$samp.size, dat9$search.algo, dat9$part.IC, sep="_")#
dat9b <- read.table("RF_Eucl_results_New_Rep4_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat9b$uniqueID <- make.merge.id(dat9b)#
dat <- merge(dat9, dat9b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat9 <- dat#
#
dat10 <- read.csv("AllStatsOutput_New_Rep5_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat10$uniqueID <- paste(dat10$species, dat10$samp.size, dat10$search.algo, dat10$part.IC, sep="_")#
dat10b <- read.table("RF_Eucl_results_New_Rep5_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat10b$uniqueID <- make.merge.id(dat10b)#
dat <- merge(dat10, dat10b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat10 <- dat#
#
dat11 <- read.csv("AllStatsOutput_New_Rep6_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat11$uniqueID <- paste(dat11$species, dat11$samp.size, dat11$search.algo, dat11$part.IC, sep="_")#
dat11b <- read.table("RF_Eucl_results_New_Rep6_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat11b$uniqueID <- make.merge.id(dat11b)#
dat <- merge(dat11, dat11b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat11 <- dat#
#
dat12 <- read.csv("AllStatsOutput_Newest_Rep7_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat12$uniqueID <- paste(dat12$species, dat12$samp.size, dat12$search.algo, dat12$part.IC, sep="_")#
dat12b <- read.table("RF_Eucl_results_New_Rep7_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat12b$uniqueID <- make.merge.id(dat12b)#
dat <- merge(dat12, dat12b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat12 <- dat#
#
dat13 <- read.csv("AllStatsOutput_Newest_Rep8_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat13$uniqueID <- paste(dat13$species, dat13$samp.size, dat13$search.algo, dat13$part.IC, sep="_")#
dat13b <- read.table("RF_Eucl_results_New_Rep8_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat13b$uniqueID <- make.merge.id(dat13b)#
dat <- merge(dat13, dat13b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat13 <- dat
##plot(0, type="n", xlim=c(-0.5,0.5), ylim=c(-50,50))#
##analyze.rf.datset(dat1, "AIC")#
#
#########
plot.stat <- "max.log.lik"#
pdf("Results_Plots/CompareLogLikelihoods.pdf", width=8, height=4)#
par(mfrow=c(1,3))#
opac <- 0.75#
pt.lwd <- 2#
xlimits <- c(-0.9,0.9)#
ylimits <- c(-52.5,3)#
plot(0, type="n", xlim=xlimits, ylim=ylimits, xlab="no part - part eucl dist from true tree", ylab="no part - part max log likelihood", main="partitioning w/ AIC")#
abline(h=0, col="gray75", lty=2); abline(v=0, col="gray75", lty=2)#
#analyze.euc.datset(dat1, "AIC")#
text(-0.7,3.5, "no partitioning", cex=0.6)#
text(-0.7,2, "higher max LL", cex=0.6)#
text(-0.7,-2, "partitioning", cex=0.6)#
text(-0.7,-3.5, "higher max LL", cex=0.6)#
# euc.size.by.partitions(dat1, "AIC", stat=plot.stat)#
# euc.size.by.partitions(dat2, "AIC", stat=plot.stat)#
# euc.size.by.partitions(dat3, "AIC", stat=plot.stat)#
# euc.size.by.partitions(dat4, "AIC", stat=plot.stat)#
# euc.size.by.partitions(dat5, "AIC", stat=plot.stat)#
# euc.size.by.partitions(dat5b, "AIC", stat=plot.stat)#
euc.size.by.partitions(dat6, "AIC", stat=plot.stat)#
euc.size.by.partitions(dat7, "AIC", stat=plot.stat)#
euc.size.by.partitions(dat8, "AIC", stat=plot.stat)#
euc.size.by.partitions(dat9, "AIC", stat=plot.stat)#
euc.size.by.partitions(dat10, "AIC", stat=plot.stat)#
euc.size.by.partitions(dat11, "AIC", stat=plot.stat)#
euc.size.by.partitions(dat12, "AIC", stat=plot.stat)#
euc.size.by.partitions(dat13, "AIC", stat=plot.stat)#
legend("bottomleft", c("lopho", "myria"), species, pch=spp.pch, col="black", bg="white", bty="n")#
#
plot(0, type="n", xlim=xlimits, ylim=ylimits, xlab="no part - part eucl dist from true tree", ylab="no part - part max log likelihood", main="partitioning w/ BIC")#
abline(h=0, col="gray75", lty=2); abline(v=0, col="gray75", lty=2)#
text(-0.5,-49, "no partitioning", cex=0.7)#
text(-0.5,-51, "closer to true tree", cex=0.7)#
text(0.5,-49, "partitioning", cex=0.7)#
text(0.5,-51, "closer to true tree", cex=0.7)#
# euc.size.by.partitions(dat1, "BIC", stat=plot.stat)#
# euc.size.by.partitions(dat2, "BIC", stat=plot.stat)#
# euc.size.by.partitions(dat3, "BIC", stat=plot.stat)#
# euc.size.by.partitions(dat4, "BIC", stat=plot.stat)#
# euc.size.by.partitions(dat5, "BIC", stat=plot.stat)#
# euc.size.by.partitions(dat5b, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat6, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat7, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat8, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat9, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat10, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat11, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat12, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat13, "BIC", stat=plot.stat)#
#
plot(0, type="n", xlim=xlimits, ylim=ylimits, xlab="no part - part eucl dist from true tree", ylab="no part - part max log likelihood", main="partitioning w/ AICc")#
abline(h=0, col="gray75", lty=2); abline(v=0, col="gray75", lty=2)#
# euc.size.by.partitions(dat1, "AICc", stat=plot.stat)#
# euc.size.by.partitions(dat2, "AICc", stat=plot.stat)#
# euc.size.by.partitions(dat3, "AICc", stat=plot.stat)#
# euc.size.by.partitions(dat4, "AICc", stat=plot.stat)#
# euc.size.by.partitions(dat5, "AICc", stat=plot.stat)#
# euc.size.by.partitions(dat5b, "AICc", stat=plot.stat)#
euc.size.by.partitions(dat6, "AICc", stat=plot.stat)#
euc.size.by.partitions(dat7, "AICc", stat=plot.stat)#
euc.size.by.partitions(dat8, "AICc", stat=plot.stat)#
euc.size.by.partitions(dat9, "AICc", stat=plot.stat)#
euc.size.by.partitions(dat10, "AICc", stat=plot.stat)#
euc.size.by.partitions(dat11, "AICc", stat=plot.stat)#
euc.size.by.partitions(dat12, "AICc", stat=plot.stat)#
euc.size.by.partitions(dat13, "AICc", stat=plot.stat)#
#
legend("bottomleft", c("10", "20", "40", "80"), pch=15, col=samp.size.col, title = "num. genes", bg="white", cex=0.9, pt.cex=1.5)#
dev.off()
library(scales)#
setwd("~/Documents/UNIL/PartitioningMethods_SimulationProject/FunctioningPipeline/AnalysisResults")#
make.merge.id <- function(dat){#
	id.col <- rep(NA, dim(dat)[1])#
	for(i in 1:dim(dat)[1]){#
		if(length(grep("lopho", dat$file[i])) > 0) spp <- "lopho_"#
		if(length(grep("myria", dat$file[i])) > 0) spp <- "myria_"#
		if(length(grep("10", dat$file[i])) > 0) samp <- "10_"#
		if(length(grep("20", dat$file[i])) > 0) samp <- "20_"#
		if(length(grep("40", dat$file[i])) > 0) samp <- "40_"#
		if(length(grep("80", dat$file[i])) > 0) samp <- "80_"#
		if(length(grep("rcluster", dat$file[i])) > 0) algo <- "rcluster_"#
		if(length(grep("greedy", dat$file[i])) > 0) algo <- "greedy_"#
		if(length(grep("noPart", dat$file[i])) > 0) algo <- "noPart_"#
		if(length(grep("AIC", dat$file[i])) > 0) crit <- "AIC"#
		if(length(grep("AICc", dat$file[i])) > 0) crit <- "AICc"#
		if(length(grep("BIC", dat$file[i])) > 0) crit <- "BIC"#
		if(length(grep("noPart", dat$file[i])) > 0) crit <- "noPart"#
		id.col[i] <- paste(c(spp, samp, algo, crit), collapse="")#
	}#
	return(id.col)#
}#
#####################################
species <- c("lopho", "myria")#
spp.pch <- c(1,2)#
samp.sizes <- c(10,20,40,80)#
samp.size.col <- c("steelblue4", "darkorange2", "green4", "red3")#
pt.wid <- 2#
opac <- 0.95#
#
analyze.rf.datset <- function(dat, criterion){#
	spp.it <- 1#
	for(i in species){#
		col.it <- 1#
		for(j in samp.sizes){#
			no.part.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "noPart" ,]#
			rclust.AIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AIC" ,]#
			rclust.BIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "BIC" ,]#
			rclust.AICc.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AICc",]#
			if(criterion == "AIC") points(no.part.result$rf_dist - rclust.AIC.result$rf_dist, no.part.result$max.log.lik - rclust.AIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)#
			if(criterion == "BIC") points(no.part.result$rf_dist - rclust.BIC.result$rf_dist, no.part.result$max.log.lik - rclust.BIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)#
			if(criterion == "AICc") points(no.part.result$rf_dist - rclust.AICc.result$rf_dist, no.part.result$max.log.lik - rclust.AICc.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)			#
			col.it <- col.it + 1	#
		}#
		spp.it <- spp.it + 1	#
	}#
}#
analyze.euc.datset <- function(dat, criterion){#
	spp.it <- 1#
	for(i in species){#
		col.it <- 1#
		for(j in samp.sizes){#
			no.part.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "noPart" ,]#
			rclust.AIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AIC" ,]#
			rclust.BIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "BIC" ,]#
			rclust.AICc.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AICc",]#
			if(criterion == "AIC") points(no.part.result$eucl_dist - rclust.AIC.result$eucl_dist, no.part.result$max.log.lik - rclust.AIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)#
			if(criterion == "BIC") points(no.part.result$eucl_dist - rclust.BIC.result$eucl_dist, no.part.result$max.log.lik - rclust.BIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)#
			if(criterion == "AICc") points(no.part.result$eucl_dist - rclust.AICc.result$eucl_dist, no.part.result$max.log.lik - rclust.AICc.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)			#
			col.it <- col.it + 1	#
		}#
		spp.it <- spp.it + 1	#
	}#
}#
#
# can use any of these scores from the treebuilding in IQtree:#
#   max.log.lik#
#   uncon.log.lik#
#   AIC#
#   BIC#
#   AICc#
#   cons.log.lik (consensus tree LL)#
#   sum.branch.lens#
#   sum.int.branch.lens#
euc.size.by.partitions <- function(dat, criterion, stat="max.log.lik"){#
	spp.it <- 1#
	for(i in species){#
		col.it <- 1#
		for(j in samp.sizes){#
			no.part.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "noPart" ,]#
			rclust.AIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AIC" ,]#
			rclust.BIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "BIC" ,]#
			rclust.AICc.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AICc",]#
			if(stat == "max.log.lik"){#
				if(criterion == "AIC") points(no.part.result$max.log.lik - rclust.AIC.result$max.log.lik, no.part.result$eucl_dist - rclust.AIC.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AIC.result$num.partitions/2)#
				if(criterion == "BIC") points(no.part.result$max.log.lik - rclust.BIC.result$max.log.lik, no.part.result$eucl_dist - rclust.BIC.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.BIC.result$num.partitions/2)#
				if(criterion == "AICc") points(no.part.result$max.log.lik - rclust.AICc.result$max.log.lik, no.part.result$eucl_dist - rclust.AICc.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AICc.result$num.partitions/2)			#
			}#
			if(stat == "uncon.log.lik"){#
				if(criterion == "AIC") points(no.part.result$uncon.log.lik - rclust.AIC.result$uncon.log.lik, no.part.result$eucl_dist - rclust.AIC.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AIC.result$num.partitions/2)#
				if(criterion == "BIC") points(no.part.result$uncon.log.lik - rclust.BIC.result$uncon.log.lik, no.part.result$eucl_dist - rclust.BIC.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.BIC.result$num.partitions/2)#
				if(criterion == "AICc") points(no.part.result$uncon.log.lik - rclust.AICc.result$uncon.log.lik, no.part.result$eucl_dist - rclust.AICc.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AICc.result$num.partitions/2)			#
			}		#
			col.it <- col.it + 1	#
		}#
		spp.it <- spp.it + 1	#
	}#
}#
rf_dist.size.by.partitions <- function(dat, criterion, stat="max.log.lik"){#
	spp.it <- 1#
	for(i in species){#
		col.it <- 1#
		for(j in samp.sizes){#
			no.part.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "noPart" ,]#
			rclust.AIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AIC" ,]#
			rclust.BIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "BIC" ,]#
			rclust.AICc.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AICc",]#
			if(stat == "max.log.lik"){#
				if(criterion == "AIC") points(no.part.result$max.log.lik - rclust.AIC.result$max.log.lik, no.part.result$rf_dist - rclust.AIC.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AIC.result$num.partitions/2)#
				if(criterion == "BIC") points(no.part.result$max.log.lik - rclust.BIC.result$max.log.lik, no.part.result$rf_dist - rclust.BIC.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.BIC.result$num.partitions/2)#
				if(criterion == "AICc") points(no.part.result$max.log.lik - rclust.AICc.result$max.log.lik, no.part.result$rf_dist - rclust.AICc.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AICc.result$num.partitions/2)			#
			}#
			if(stat == "uncon.log.lik"){#
				if(criterion == "AIC") points(no.part.result$uncon.log.lik - rclust.AIC.result$uncon.log.lik, no.part.result$rf_dist - rclust.AIC.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AIC.result$num.partitions/2)#
				if(criterion == "BIC") points(no.part.result$uncon.log.lik - rclust.BIC.result$uncon.log.lik, no.part.result$rf_dist - rclust.BIC.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.BIC.result$num.partitions/2)#
				if(criterion == "AICc") points(no.part.result$uncon.log.lik - rclust.AICc.result$uncon.log.lik, no.part.result$rf_dist - rclust.AICc.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AICc.result$num.partitions/2)			#
			}		#
			col.it <- col.it + 1	#
		}#
		spp.it <- spp.it + 1	#
	}#
}#
#####################################
# mut rate 500#
dat1 <- read.csv("AllStatsOutput_New_Rep1_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
dat1$uniqueID <- paste(dat1$species, dat1$samp.size, dat1$search.algo, dat1$part.IC, sep="_")#
dat1b <- read.table("RF_Eucl_results_New_Rep1_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
dat1b$uniqueID <- make.merge.id(dat1b)#
dat <- merge(dat1, dat1b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 500#
dat1 <- dat#
#
dat2 <- read.csv("AllStatsOutput_New_Rep2_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
dat2$uniqueID <- paste(dat2$species, dat2$samp.size, dat2$search.algo, dat2$part.IC, sep="_")#
dat2b <- read.table("RF_Eucl_results_New_Rep2_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
dat2b$uniqueID <- make.merge.id(dat2b)#
dat <- merge(dat2, dat2b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 500#
dat2 <- dat#
#
dat3 <- read.csv("AllStatsOutput_New_Rep3_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
dat3$uniqueID <- paste(dat3$species, dat3$samp.size, dat3$search.algo, dat3$part.IC, sep="_")#
dat3b <- read.table("RF_Eucl_results_New_Rep3_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
dat3b$uniqueID <- make.merge.id(dat3b)#
dat <- merge(dat3, dat3b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 500#
dat3 <- dat#
#
dat4 <- read.csv("AllStatsOutput_New_Rep4_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
dat4$uniqueID <- paste(dat4$species, dat4$samp.size, dat4$search.algo, dat4$part.IC, sep="_")#
dat4b <- read.table("RF_Eucl_results_New_Rep4_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
dat4b$uniqueID <- make.merge.id(dat4b)#
dat <- merge(dat4, dat4b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 500#
dat4 <- dat#
#
dat5 <- read.csv("AllStatsOutput_New_Rep5_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
dat5$uniqueID <- paste(dat5$species, dat5$samp.size, dat5$search.algo, dat5$part.IC, sep="_")#
dat5b <- read.table("RF_Eucl_results_New_Rep5_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
dat5b$uniqueID <- make.merge.id(dat5b)#
dat <- merge(dat5, dat5b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 500#
dat5 <- dat#
#
dat5b <- read.csv("AllStatsOutput_New_Rep6_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
dat5b$uniqueID <- paste(dat5b$species, dat5b$samp.size, dat5b$search.algo, dat5b$part.IC, sep="_")#
dat5bb <- read.table("RF_Eucl_results_New_Rep6_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
dat5bb$uniqueID <- make.merge.id(dat5bb)#
dat <- merge(dat5b, dat5bb, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 500#
dat5b <- dat#
# mut rate 1000#
dat6 <- read.csv("AllStatsOutput_New_Rep1_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat6$uniqueID <- paste(dat6$species, dat6$samp.size, dat6$search.algo, dat6$part.IC, sep="_")#
dat6b <- read.table("RF_Eucl_results_New_Rep1_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat6b$uniqueID <- make.merge.id(dat6b)#
dat <- merge(dat6, dat6b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat6 <- dat#
#
dat7 <- read.csv("AllStatsOutput_New_Rep2_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat7$uniqueID <- paste(dat7$species, dat7$samp.size, dat7$search.algo, dat7$part.IC, sep="_")#
dat7b <- read.table("RF_Eucl_results_New_Rep2_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat7b$uniqueID <- make.merge.id(dat7b)#
dat <- merge(dat7, dat7b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat7 <- dat#
#
dat8 <- read.csv("AllStatsOutput_New_Rep3_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat8$uniqueID <- paste(dat8$species, dat8$samp.size, dat8$search.algo, dat8$part.IC, sep="_")#
dat8b <- read.table("RF_Eucl_results_New_Rep3_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat8b$uniqueID <- make.merge.id(dat8b)#
dat <- merge(dat8, dat8b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat8 <- dat#
#
dat9 <- read.csv("AllStatsOutput_New_Rep4_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat9$uniqueID <- paste(dat9$species, dat9$samp.size, dat9$search.algo, dat9$part.IC, sep="_")#
dat9b <- read.table("RF_Eucl_results_New_Rep4_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat9b$uniqueID <- make.merge.id(dat9b)#
dat <- merge(dat9, dat9b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat9 <- dat#
#
dat10 <- read.csv("AllStatsOutput_New_Rep5_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat10$uniqueID <- paste(dat10$species, dat10$samp.size, dat10$search.algo, dat10$part.IC, sep="_")#
dat10b <- read.table("RF_Eucl_results_New_Rep5_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat10b$uniqueID <- make.merge.id(dat10b)#
dat <- merge(dat10, dat10b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat10 <- dat#
#
dat11 <- read.csv("AllStatsOutput_New_Rep6_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat11$uniqueID <- paste(dat11$species, dat11$samp.size, dat11$search.algo, dat11$part.IC, sep="_")#
dat11b <- read.table("RF_Eucl_results_New_Rep6_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat11b$uniqueID <- make.merge.id(dat11b)#
dat <- merge(dat11, dat11b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat11 <- dat#
#
dat12 <- read.csv("AllStatsOutput_Newest_Rep7_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat12$uniqueID <- paste(dat12$species, dat12$samp.size, dat12$search.algo, dat12$part.IC, sep="_")#
dat12b <- read.table("RF_Eucl_results_New_Rep7_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat12b$uniqueID <- make.merge.id(dat12b)#
dat <- merge(dat12, dat12b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat12 <- dat#
#
dat13 <- read.csv("AllStatsOutput_Newest_Rep8_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat13$uniqueID <- paste(dat13$species, dat13$samp.size, dat13$search.algo, dat13$part.IC, sep="_")#
dat13b <- read.table("RF_Eucl_results_New_Rep8_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat13b$uniqueID <- make.merge.id(dat13b)#
dat <- merge(dat13, dat13b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat13 <- dat#
#########
#########
plot.stat <- "max.log.lik"#
part.text1 <- -35#
part.text2 <- 0.65#
part.text3 <- -0.65#
pdf("Results_Plots/Flipped_CompareLogLikelihoods.pdf", width=4, height=8)#
par(mfrow=c(3,1), mar=c(4,4,1.5,0.5))#
opac <- 0.75#
pt.lwd <- 2#
xlimits <- c(-55,2.5)#
ylimits <- c(-0.75,0.75)#
plot(0, type="n", xlim=xlimits, ylim=ylimits, ylab="", xlab="", main="partitioning w/ AIC")#
abline(h=0, col="gray75", lty=2); abline(v=0, col="gray75", lty=2)#
#analyze.euc.datset(dat1, "AIC")#
text(part.text1, part.text2, expression(italic("partitioning better")), cex=1, col="green4")#
text(part.text1, part.text3, expression(italic("no partitioning better")), cex=1, col="red3")#
# euc.size.by.partitions(dat1, "AIC", stat=plot.stat)#
# euc.size.by.partitions(dat2, "AIC", stat=plot.stat)#
# euc.size.by.partitions(dat3, "AIC", stat=plot.stat)#
# euc.size.by.partitions(dat4, "AIC", stat=plot.stat)#
# euc.size.by.partitions(dat5, "AIC", stat=plot.stat)#
# euc.size.by.partitions(dat5b, "AIC", stat=plot.stat)#
euc.size.by.partitions(dat6, "AIC", stat=plot.stat)#
euc.size.by.partitions(dat7, "AIC", stat=plot.stat)#
euc.size.by.partitions(dat8, "AIC", stat=plot.stat)#
euc.size.by.partitions(dat9, "AIC", stat=plot.stat)#
euc.size.by.partitions(dat10, "AIC", stat=plot.stat)#
euc.size.by.partitions(dat11, "AIC", stat=plot.stat)#
euc.size.by.partitions(dat12, "AIC", stat=plot.stat)#
euc.size.by.partitions(dat13, "AIC", stat=plot.stat)#
#
plot(0, type="n", xlim=xlimits, ylim=ylimits, ylab="", xlab="", main="partitioning w/ BIC")#
mtext(side=2, at=0, line=2.5, "difference in euclidean distance from true tree for 'no partitioning' - 'partitioning'")#
abline(h=0, col="gray75", lty=2); abline(v=0, col="gray75", lty=2)#
text(part.text1, part.text2, expression(italic("partitioning better")), cex=1, col="green4")#
text(part.text1, part.text3, expression(italic("no partitioning better")), cex=1, col="red3")#
# euc.size.by.partitions(dat1, "BIC", stat=plot.stat)#
# euc.size.by.partitions(dat2, "BIC", stat=plot.stat)#
# euc.size.by.partitions(dat3, "BIC", stat=plot.stat)#
# euc.size.by.partitions(dat4, "BIC", stat=plot.stat)#
# euc.size.by.partitions(dat5, "BIC", stat=plot.stat)#
# euc.size.by.partitions(dat5b, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat6, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat7, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat8, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat9, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat10, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat11, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat12, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat13, "BIC", stat=plot.stat)#
legend("bottomleft", c("lopho", "myria"), species, pch=spp.pch, col="black", bg="white", bty="n")#
#
plot(0, type="n", xlim=xlimits, ylim=ylimits, ylab="", xlab="difference in IQtree max log likelihood of 'no partitioning' - 'partitioning'", main="partitioning w/ AICc")#
abline(h=0, col="gray75", lty=2); abline(v=0, col="gray75", lty=2)#
text(part.text1, part.text2, expression(italic("partitioning better")), cex=1, col="green4")#
text(part.text1, part.text3, expression(italic("no partitioning better")), cex=1, col="red3")#
# euc.size.by.partitions(dat1, "AICc", stat=plot.stat)#
# euc.size.by.partitions(dat2, "AICc", stat=plot.stat)#
# euc.size.by.partitions(dat3, "AICc", stat=plot.stat)#
# euc.size.by.partitions(dat4, "AICc", stat=plot.stat)#
# euc.size.by.partitions(dat5, "AICc", stat=plot.stat)#
# euc.size.by.partitions(dat5b, "AICc", stat=plot.stat)#
euc.size.by.partitions(dat6, "AICc", stat=plot.stat)#
euc.size.by.partitions(dat7, "AICc", stat=plot.stat)#
euc.size.by.partitions(dat8, "AICc", stat=plot.stat)#
euc.size.by.partitions(dat9, "AICc", stat=plot.stat)#
euc.size.by.partitions(dat10, "AICc", stat=plot.stat)#
euc.size.by.partitions(dat11, "AICc", stat=plot.stat)#
euc.size.by.partitions(dat12, "AICc", stat=plot.stat)#
euc.size.by.partitions(dat13, "AICc", stat=plot.stat)#
#
legend("bottomleft", c("10", "20", "40", "80"), pch=15, col=samp.size.col, title = "num. genes", bg="white", cex=0.9, pt.cex=1.5)#
#__________________________________________________________________________________________##
#
# robinson foulds distance difference#
ylimits <- c(-0.19,0.14)#
plot(0, type="n", xlim=xlimits, ylim=ylimits, ylab="", xlab="", main="partitioning w/ AIC")#
abline(h=0, col="gray75", lty=2); abline(v=0, col="gray75", lty=2)#
#analyze.euc.datset(dat1, "AIC")#
text(part.text1, part.text2, expression(italic("partitioning better")), cex=1, col="green4")#
text(part.text1, part.text3, expression(italic("no partitioning better")), cex=1, col="red3")#
# rf_dist.size.by.partitions(dat1, "AIC", stat=plot.stat)#
# rf_dist.size.by.partitions(dat2, "AIC", stat=plot.stat)#
# rf_dist.size.by.partitions(dat3, "AIC", stat=plot.stat)#
# rf_dist.size.by.partitions(dat4, "AIC", stat=plot.stat)#
# rf_dist.size.by.partitions(dat5, "AIC", stat=plot.stat)#
# rf_dist.size.by.partitions(dat5b, "AIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat6, "AIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat7, "AIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat8, "AIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat9, "AIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat10, "AIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat11, "AIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat12, "AIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat13, "AIC", stat=plot.stat)#
#
plot(0, type="n", xlim=xlimits, ylim=ylimits, ylab="", xlab="", main="partitioning w/ BIC")#
mtext(side=2, at=0, line=2.5, "difference in RF distance from true tree for 'no partitioning' - 'partitioning'")#
abline(h=0, col="gray75", lty=2); abline(v=0, col="gray75", lty=2)#
text(part.text1, part.text2, expression(italic("partitioning better")), cex=1, col="green4")#
text(part.text1, part.text3, expression(italic("no partitioning better")), cex=1, col="red3")#
# rf_dist.size.by.partitions(dat1, "BIC", stat=plot.stat)#
# rf_dist.size.by.partitions(dat2, "BIC", stat=plot.stat)#
# rf_dist.size.by.partitions(dat3, "BIC", stat=plot.stat)#
# rf_dist.size.by.partitions(dat4, "BIC", stat=plot.stat)#
# rf_dist.size.by.partitions(dat5, "BIC", stat=plot.stat)#
# rf_dist.size.by.partitions(dat5b, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat6, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat7, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat8, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat9, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat10, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat11, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat12, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat13, "BIC", stat=plot.stat)#
legend("bottomleft", c("lopho", "myria"), species, pch=spp.pch, col="black", bg="white", bty="n")#
#
plot(0, type="n", xlim=xlimits, ylim=ylimits, ylab="", xlab="difference in IQtree max log likelihood of 'no partitioning' - 'partitioning'", main="partitioning w/ AICc")#
abline(h=0, col="gray75", lty=2); abline(v=0, col="gray75", lty=2)#
text(part.text1, part.text2, expression(italic("partitioning better")), cex=1, col="green4")#
text(part.text1, part.text3, expression(italic("no partitioning better")), cex=1, col="red3")#
# rf_dist.size.by.partitions(dat1, "AICc", stat=plot.stat)#
# rf_dist.size.by.partitions(dat2, "AICc", stat=plot.stat)#
# rf_dist.size.by.partitions(dat3, "AICc", stat=plot.stat)#
# rf_dist.size.by.partitions(dat4, "AICc", stat=plot.stat)#
# rf_dist.size.by.partitions(dat5, "AICc", stat=plot.stat)#
# rf_dist.size.by.partitions(dat5b, "AICc", stat=plot.stat)#
rf_dist.size.by.partitions(dat6, "AICc", stat=plot.stat)#
rf_dist.size.by.partitions(dat7, "AICc", stat=plot.stat)#
rf_dist.size.by.partitions(dat8, "AICc", stat=plot.stat)#
rf_dist.size.by.partitions(dat9, "AICc", stat=plot.stat)#
rf_dist.size.by.partitions(dat10, "AICc", stat=plot.stat)#
rf_dist.size.by.partitions(dat11, "AICc", stat=plot.stat)#
rf_dist.size.by.partitions(dat12, "AICc", stat=plot.stat)#
rf_dist.size.by.partitions(dat13, "AICc", stat=plot.stat)#
#
legend("bottomleft", c("10", "20", "40", "80"), pch=15, col=samp.size.col, title = "num. genes", bg="white", cex=0.9, pt.cex=1.5)#
#
dev.off()
library(scales)#
setwd("~/Documents/UNIL/PartitioningMethods_SimulationProject/FunctioningPipeline/AnalysisResults")#
make.merge.id <- function(dat){#
	id.col <- rep(NA, dim(dat)[1])#
	for(i in 1:dim(dat)[1]){#
		if(length(grep("lopho", dat$file[i])) > 0) spp <- "lopho_"#
		if(length(grep("myria", dat$file[i])) > 0) spp <- "myria_"#
		if(length(grep("10", dat$file[i])) > 0) samp <- "10_"#
		if(length(grep("20", dat$file[i])) > 0) samp <- "20_"#
		if(length(grep("40", dat$file[i])) > 0) samp <- "40_"#
		if(length(grep("80", dat$file[i])) > 0) samp <- "80_"#
		if(length(grep("rcluster", dat$file[i])) > 0) algo <- "rcluster_"#
		if(length(grep("greedy", dat$file[i])) > 0) algo <- "greedy_"#
		if(length(grep("noPart", dat$file[i])) > 0) algo <- "noPart_"#
		if(length(grep("AIC", dat$file[i])) > 0) crit <- "AIC"#
		if(length(grep("AICc", dat$file[i])) > 0) crit <- "AICc"#
		if(length(grep("BIC", dat$file[i])) > 0) crit <- "BIC"#
		if(length(grep("noPart", dat$file[i])) > 0) crit <- "noPart"#
		id.col[i] <- paste(c(spp, samp, algo, crit), collapse="")#
	}#
	return(id.col)#
}#
#####################################
#
get.rep.difference <- function(dat, rep, samp.size, spp, partitioning.criterion, distance){#
	temp.dat <- dat[dat$replicate == rep & dat$samp.size == samp.size & dat$species == spp , ]#
	no.part.result <- temp.dat[temp.dat$search.algo == "noPart" ,]#
	rclust.AIC.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "AIC" ,]#
	rclust.BIC.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "BIC" ,]#
	rclust.AICc.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "AICc",]#
	if(partitioning.criterion == "AIC"){#
		difference <- no.part.result[distance] - rclust.AIC.result[distance]#
	}#
	if(partitioning.criterion == "BIC"){#
		difference <- no.part.result[distance] - rclust.BIC.result[distance]#
	}#
	if(partitioning.criterion == "AICc"){#
		difference <- no.part.result[distance] - rclust.AICc.result[distance]#
	}#
	return(as.numeric(difference))			#
}#
#
#####################################
#
get.boxplot.dat <- function(dat, samp.size, spp, partitioning.criterion, distance){	#
	samp.size.dists <- NULL#
	for(j in unique(dat$replicate)){#
		dist <- get.rep.difference(dat, rep=j, samp.size=samp.size, spp=spp, partitioning.criterion=partitioning.criterion, distance=distance)#
		samp.size.dists <- c(samp.size.dists, dist)#
	}#
	return(samp.size.dists)#
}#
#
#####################################
# # # mut rate 500#
# dat1 <- read.csv("AllStatsOutput_New_Rep1_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
# dat1$uniqueID <- paste(dat1$species, dat1$samp.size, dat1$search.algo, dat1$part.IC, sep="_")#
# dat1b <- read.table("RF_Eucl_results_New_Rep1_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
# dat1b$uniqueID <- make.merge.id(dat1b)#
# dat <- merge(dat1, dat1b, by="uniqueID")#
# dat$gene.size <- 100#
# dat$mut.rate <- 500#
# dat1 <- dat#
# mut rate 1000#
#
infiles.a <- c(#"AllStatsOutput_New_Rep1_100-1000.csv",#
				"AllStatsOutput_New_Rep2_100-1000.csv",#
				#"AllStatsOutput_New_Rep3_100-1000.csv",#
				"AllStatsOutput_New_Rep4_100-1000.csv",#
				"AllStatsOutput_New_Rep5_100-1000.csv",#
				"AllStatsOutput_New_Rep6_100-1000.csv"#,#
				#"AllStatsOutput_New_Rep1_100-500.csv",#
				#"AllStatsOutput_New_Rep2_100-500.csv",#
				#"AllStatsOutput_New_Rep3_100-500.csv",#
				#"AllStatsOutput_New_Rep4_100-500.csv",#
				#"AllStatsOutput_New_Rep5_100-500.csv",#
				#"AllStatsOutput_New_Rep6_100-500.csv",#
				"AllStatsOutput_Newest_Rep7_100-1000.csv"#,#
				# "AllStatsOutput_Newest_Rep8_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep9_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep10_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep11_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep12_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep13_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep14_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep15_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep16_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep17_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep18_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep19_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep20_100-1000.csv"#
				)#
infiles.b <- c(#"RF_Eucl_results_New_Rep1_100-1000.txt",#
				"RF_Eucl_results_New_Rep2_100-1000.txt",#
				#"RF_Eucl_results_New_Rep3_100-1000.txt",#
				"RF_Eucl_results_New_Rep4_100-1000.txt",#
				"RF_Eucl_results_New_Rep5_100-1000.txt",#
				"RF_Eucl_results_New_Rep6_100-1000.txt",#
				#"RF_Eucl_results_New_Rep1_100-500.txt",#
				#"RF_Eucl_results_New_Rep2_100-500.txt",#
				#"RF_Eucl_results_New_Rep3_100-500.txt",#
				#"RF_Eucl_results_New_Rep4_100-500.txt",#
				#"RF_Eucl_results_New_Rep5_100-500.txt",#
				#"RF_Eucl_results_New_Rep6_100-500.txt",#
				"RF_Eucl_results_New_Rep7_100-1000.txt"#,#
				# "RF_Eucl_results_New_Rep8_100-1000.txt",#
				# "RF_Eucl_results_New_Rep9_100-1000.txt",#
				# "RF_Eucl_results_New_Rep10_100-1000.txt",#
				# "RF_Eucl_results_New_Rep11_100-1000.txt",#
				# "RF_Eucl_results_New_Rep12_100-1000.txt",#
				# "RF_Eucl_results_New_Rep13_100-1000.txt",#
				# "RF_Eucl_results_New_Rep14_100-1000.txt",#
				# "RF_Eucl_results_New_Rep15_100-1000.txt",#
				# "RF_Eucl_results_New_Rep16_100-1000.txt",#
				# "RF_Eucl_results_New_Rep17_100-1000.txt",#
				# "RF_Eucl_results_New_Rep18_100-1000.txt",#
				# "RF_Eucl_results_New_Rep19_100-1000.txt",#
				# "RF_Eucl_results_New_Rep20_100-1000.txt"#
				)#
#
dat <- NULL#
for(i in 1:length(infiles.a)){#
	temp.dat1 <- read.csv(infiles.a[i], header=TRUE, stringsAsFactors=FALSE)#
	temp.dat1$uniqueID <- paste(temp.dat1$species, temp.dat1$samp.size, temp.dat1$search.algo, temp.dat1$part.IC, sep="_")#
	temp.dat2 <- read.table(infiles.b[i], header=TRUE, stringsAsFactors=FALSE)#
	temp.dat2$uniqueID <- make.merge.id(temp.dat2)#
	temp.dat <- merge(temp.dat1, temp.dat2, by="uniqueID")#
	temp.dat$gene.size <- 100#
	temp.dat$mut.rate <- 1000#
	temp.dat$replicate <- i#
	dat <- rbind(dat, temp.dat)#
}#
#
#####################################
samp.size.col <- c("steelblue4", "darkorange2", "green4", "red3")#
samp.sizes <- c(10,20,40)#,80)#
#####################################
pdf("Results_Plots/Boxplots.pdf", width=7, height=7)#
par(mfrow=c(2,2), mar=c(4,4,1.5,0.5))#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=c(-0.03,0.03), xlab="", xaxt="n", ylab="diff in RF dist from true tree for 'no part' - 'part'", main="Lophotrochozoa")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:3){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion="AIC", distance="rf_dist")#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=c(-0.03,0.03), xlab="", xaxt="n", ylab="", main="Myriapoda")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:3){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion="AIC", distance="rf_dist")#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=c(-1,1), xlab="num. genes", xaxt="n", ylab="diff in eucl dist from true tree for 'no part' - 'part'", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:3){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion="AIC", distance="eucl_dist")#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=c(-1,1), xlab="num. genes", xaxt="n", ylab="", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:3){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion="AIC", distance="eucl_dist")#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
dev.off()
library(scales)#
setwd("~/Documents/UNIL/PartitioningMethods_SimulationProject/FunctioningPipeline/AnalysisResults")#
make.merge.id <- function(dat){#
	id.col <- rep(NA, dim(dat)[1])#
	for(i in 1:dim(dat)[1]){#
		if(length(grep("lopho", dat$file[i])) > 0) spp <- "lopho_"#
		if(length(grep("myria", dat$file[i])) > 0) spp <- "myria_"#
		if(length(grep("10", dat$file[i])) > 0) samp <- "10_"#
		if(length(grep("20", dat$file[i])) > 0) samp <- "20_"#
		if(length(grep("40", dat$file[i])) > 0) samp <- "40_"#
		if(length(grep("80", dat$file[i])) > 0) samp <- "80_"#
		if(length(grep("rcluster", dat$file[i])) > 0) algo <- "rcluster_"#
		if(length(grep("greedy", dat$file[i])) > 0) algo <- "greedy_"#
		if(length(grep("noPart", dat$file[i])) > 0) algo <- "noPart_"#
		if(length(grep("AIC", dat$file[i])) > 0) crit <- "AIC"#
		if(length(grep("AICc", dat$file[i])) > 0) crit <- "AICc"#
		if(length(grep("BIC", dat$file[i])) > 0) crit <- "BIC"#
		if(length(grep("noPart", dat$file[i])) > 0) crit <- "noPart"#
		id.col[i] <- paste(c(spp, samp, algo, crit), collapse="")#
	}#
	return(id.col)#
}#
#####################################
#
get.rep.difference <- function(dat, rep, samp.size, spp, partitioning.criterion, distance){#
	temp.dat <- dat[dat$replicate == rep & dat$samp.size == samp.size & dat$species == spp , ]#
	no.part.result <- temp.dat[temp.dat$search.algo == "noPart" ,]#
	rclust.AIC.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "AIC" ,]#
	rclust.BIC.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "BIC" ,]#
	rclust.AICc.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "AICc",]#
	if(partitioning.criterion == "AIC"){#
		difference <- no.part.result[distance] - rclust.AIC.result[distance]#
	}#
	if(partitioning.criterion == "BIC"){#
		difference <- no.part.result[distance] - rclust.BIC.result[distance]#
	}#
	if(partitioning.criterion == "AICc"){#
		difference <- no.part.result[distance] - rclust.AICc.result[distance]#
	}#
	return(as.numeric(difference))			#
}#
#
#####################################
#
get.boxplot.dat <- function(dat, samp.size, spp, partitioning.criterion, distance){	#
	samp.size.dists <- NULL#
	for(j in unique(dat$replicate)){#
		dist <- get.rep.difference(dat, rep=j, samp.size=samp.size, spp=spp, partitioning.criterion=partitioning.criterion, distance=distance)#
		samp.size.dists <- c(samp.size.dists, dist)#
	}#
	return(samp.size.dists)#
}#
#
#####################################
# # # mut rate 500#
# dat1 <- read.csv("AllStatsOutput_New_Rep1_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
# dat1$uniqueID <- paste(dat1$species, dat1$samp.size, dat1$search.algo, dat1$part.IC, sep="_")#
# dat1b <- read.table("RF_Eucl_results_New_Rep1_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
# dat1b$uniqueID <- make.merge.id(dat1b)#
# dat <- merge(dat1, dat1b, by="uniqueID")#
# dat$gene.size <- 100#
# dat$mut.rate <- 500#
# dat1 <- dat#
# mut rate 1000#
#
infiles.a <- c(#"AllStatsOutput_New_Rep1_100-1000.csv",#
				"AllStatsOutput_New_Rep2_100-1000.csv",#
				#"AllStatsOutput_New_Rep3_100-1000.csv",#
				"AllStatsOutput_New_Rep4_100-1000.csv",#
				"AllStatsOutput_New_Rep5_100-1000.csv",#
				"AllStatsOutput_New_Rep6_100-1000.csv"#,#
				#"AllStatsOutput_New_Rep1_100-500.csv",#
				#"AllStatsOutput_New_Rep2_100-500.csv",#
				#"AllStatsOutput_New_Rep3_100-500.csv",#
				#"AllStatsOutput_New_Rep4_100-500.csv",#
				#"AllStatsOutput_New_Rep5_100-500.csv",#
				#"AllStatsOutput_New_Rep6_100-500.csv",#
				"AllStatsOutput_Newest_Rep7_100-1000.csv"#,#
				# "AllStatsOutput_Newest_Rep8_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep9_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep10_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep11_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep12_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep13_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep14_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep15_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep16_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep17_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep18_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep19_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep20_100-1000.csv"#
				)#
infiles.b <- c(#"RF_Eucl_results_New_Rep1_100-1000.txt",#
				"RF_Eucl_results_New_Rep2_100-1000.txt",#
				#"RF_Eucl_results_New_Rep3_100-1000.txt",#
				"RF_Eucl_results_New_Rep4_100-1000.txt",#
				"RF_Eucl_results_New_Rep5_100-1000.txt",#
				"RF_Eucl_results_New_Rep6_100-1000.txt",#
				#"RF_Eucl_results_New_Rep1_100-500.txt",#
				#"RF_Eucl_results_New_Rep2_100-500.txt",#
				#"RF_Eucl_results_New_Rep3_100-500.txt",#
				#"RF_Eucl_results_New_Rep4_100-500.txt",#
				#"RF_Eucl_results_New_Rep5_100-500.txt",#
				#"RF_Eucl_results_New_Rep6_100-500.txt",#
				"RF_Eucl_results_New_Rep7_100-1000.txt"#,#
				# "RF_Eucl_results_New_Rep8_100-1000.txt",#
				# "RF_Eucl_results_New_Rep9_100-1000.txt",#
				# "RF_Eucl_results_New_Rep10_100-1000.txt",#
				# "RF_Eucl_results_New_Rep11_100-1000.txt",#
				# "RF_Eucl_results_New_Rep12_100-1000.txt",#
				# "RF_Eucl_results_New_Rep13_100-1000.txt",#
				# "RF_Eucl_results_New_Rep14_100-1000.txt",#
				# "RF_Eucl_results_New_Rep15_100-1000.txt",#
				# "RF_Eucl_results_New_Rep16_100-1000.txt",#
				# "RF_Eucl_results_New_Rep17_100-1000.txt",#
				# "RF_Eucl_results_New_Rep18_100-1000.txt",#
				# "RF_Eucl_results_New_Rep19_100-1000.txt",#
				# "RF_Eucl_results_New_Rep20_100-1000.txt"#
				)#
#
dat <- NULL#
for(i in 1:length(infiles.a)){#
	temp.dat1 <- read.csv(infiles.a[i], header=TRUE, stringsAsFactors=FALSE)#
	temp.dat1$uniqueID <- paste(temp.dat1$species, temp.dat1$samp.size, temp.dat1$search.algo, temp.dat1$part.IC, sep="_")#
	temp.dat2 <- read.table(infiles.b[i], header=TRUE, stringsAsFactors=FALSE)#
	temp.dat2$uniqueID <- make.merge.id(temp.dat2)#
	temp.dat <- merge(temp.dat1, temp.dat2, by="uniqueID")#
	temp.dat$gene.size <- 100#
	temp.dat$mut.rate <- 1000#
	temp.dat$replicate <- i#
	dat <- rbind(dat, temp.dat)#
}#
#
#####################################
samp.size.col <- c("steelblue4", "darkorange2", "green4", "red3")#
samp.sizes <- c(10,20,40)#,80)#
#####################################
pdf("Results_Plots/Boxplots.pdf", width=7, height=7)#
par(mfrow=c(2,2), mar=c(4,4,1.5,0.5))#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=c(-0.02,0.02), xlab="", xaxt="n", ylab="diff in RF dist from true tree for 'no part' - 'part'", main="Lophotrochozoa")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:3){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion="AIC", distance="rf_dist")#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=c(-0.02,0.02), xlab="", xaxt="n", ylab="", main="Myriapoda")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:3){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion="AIC", distance="rf_dist")#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=c(-1,1), xlab="num. genes", xaxt="n", ylab="diff in eucl dist from true tree for 'no part' - 'part'", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:3){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion="AIC", distance="eucl_dist")#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=c(-1,1), xlab="num. genes", xaxt="n", ylab="", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:3){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion="AIC", distance="eucl_dist")#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
dev.off()
a <- c(1:6)
b <- c(1:5, NA)
mean(a)
mean(b)
mean(b, na.rm=TRUE)
mean(1:5)
library(scales)#
setwd("~/Documents/UNIL/PartitioningMethods_SimulationProject/FunctioningPipeline/AnalysisResults")#
make.merge.id <- function(dat){#
	id.col <- rep(NA, dim(dat)[1])#
	for(i in 1:dim(dat)[1]){#
		if(length(grep("lopho", dat$file[i])) > 0) spp <- "lopho_"#
		if(length(grep("myria", dat$file[i])) > 0) spp <- "myria_"#
		if(length(grep("10", dat$file[i])) > 0) samp <- "10_"#
		if(length(grep("20", dat$file[i])) > 0) samp <- "20_"#
		if(length(grep("40", dat$file[i])) > 0) samp <- "40_"#
		if(length(grep("80", dat$file[i])) > 0) samp <- "80_"#
		if(length(grep("rcluster", dat$file[i])) > 0) algo <- "rcluster_"#
		if(length(grep("greedy", dat$file[i])) > 0) algo <- "greedy_"#
		if(length(grep("noPart", dat$file[i])) > 0) algo <- "noPart_"#
		if(length(grep("AIC", dat$file[i])) > 0) crit <- "AIC"#
		if(length(grep("AICc", dat$file[i])) > 0) crit <- "AICc"#
		if(length(grep("BIC", dat$file[i])) > 0) crit <- "BIC"#
		if(length(grep("noPart", dat$file[i])) > 0) crit <- "noPart"#
		id.col[i] <- paste(c(spp, samp, algo, crit), collapse="")#
	}#
	return(id.col)#
}#
#####################################
#
get.rep.difference <- function(dat, rep, samp.size, spp, partitioning.criterion, distance){#
	temp.dat <- dat[dat$replicate == rep & dat$samp.size == samp.size & dat$species == spp , ]#
	no.part.result <- temp.dat[temp.dat$search.algo == "noPart" ,]#
	rclust.AIC.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "AIC" ,]#
	rclust.BIC.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "BIC" ,]#
	rclust.AICc.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "AICc",]#
	if(partitioning.criterion == "AIC"){#
		difference <- no.part.result[distance] - rclust.AIC.result[distance]#
	}#
	if(partitioning.criterion == "BIC"){#
		difference <- no.part.result[distance] - rclust.BIC.result[distance]#
	}#
	if(partitioning.criterion == "AICc"){#
		difference <- no.part.result[distance] - rclust.AICc.result[distance]#
	}#
	return(as.numeric(difference))			#
}#
#
#####################################
#
get.boxplot.dat <- function(dat, samp.size, spp, partitioning.criterion, distance){	#
	samp.size.dists <- NULL#
	for(j in unique(dat$replicate)){#
		dist <- get.rep.difference(dat, rep=j, samp.size=samp.size, spp=spp, partitioning.criterion=partitioning.criterion, distance=distance)#
		samp.size.dists <- c(samp.size.dists, dist)#
	}#
	return(samp.size.dists)#
}#
#
#####################################
# # # mut rate 500#
# dat1 <- read.csv("AllStatsOutput_New_Rep1_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
# dat1$uniqueID <- paste(dat1$species, dat1$samp.size, dat1$search.algo, dat1$part.IC, sep="_")#
# dat1b <- read.table("RF_Eucl_results_New_Rep1_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
# dat1b$uniqueID <- make.merge.id(dat1b)#
# dat <- merge(dat1, dat1b, by="uniqueID")#
# dat$gene.size <- 100#
# dat$mut.rate <- 500#
# dat1 <- dat#
# mut rate 1000#
#
infiles.a <- c(#"AllStatsOutput_New_Rep1_100-1000.csv",#
				"AllStatsOutput_New_Rep2_100-1000.csv",#
				"AllStatsOutput_New_Rep3_100-1000.csv",#
				"AllStatsOutput_New_Rep4_100-1000.csv",#
				"AllStatsOutput_New_Rep5_100-1000.csv",#
				"AllStatsOutput_New_Rep6_100-1000.csv"#,#
				#"AllStatsOutput_New_Rep1_100-500.csv",#
				#"AllStatsOutput_New_Rep2_100-500.csv",#
				#"AllStatsOutput_New_Rep3_100-500.csv",#
				#"AllStatsOutput_New_Rep4_100-500.csv",#
				#"AllStatsOutput_New_Rep5_100-500.csv",#
				#"AllStatsOutput_New_Rep6_100-500.csv",#
				"AllStatsOutput_Newest_Rep7_100-1000.csv"#,#
				# "AllStatsOutput_Newest_Rep8_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep9_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep10_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep11_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep12_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep13_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep14_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep15_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep16_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep17_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep18_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep19_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep20_100-1000.csv"#
				)#
infiles.b <- c(#"RF_Eucl_results_New_Rep1_100-1000.txt",#
				"RF_Eucl_results_New_Rep2_100-1000.txt",#
				"RF_Eucl_results_New_Rep3_100-1000.txt",#
				"RF_Eucl_results_New_Rep4_100-1000.txt",#
				"RF_Eucl_results_New_Rep5_100-1000.txt",#
				"RF_Eucl_results_New_Rep6_100-1000.txt",#
				#"RF_Eucl_results_New_Rep1_100-500.txt",#
				#"RF_Eucl_results_New_Rep2_100-500.txt",#
				#"RF_Eucl_results_New_Rep3_100-500.txt",#
				#"RF_Eucl_results_New_Rep4_100-500.txt",#
				#"RF_Eucl_results_New_Rep5_100-500.txt",#
				#"RF_Eucl_results_New_Rep6_100-500.txt",#
				"RF_Eucl_results_New_Rep7_100-1000.txt"#,#
				# "RF_Eucl_results_New_Rep8_100-1000.txt",#
				# "RF_Eucl_results_New_Rep9_100-1000.txt",#
				# "RF_Eucl_results_New_Rep10_100-1000.txt",#
				# "RF_Eucl_results_New_Rep11_100-1000.txt",#
				# "RF_Eucl_results_New_Rep12_100-1000.txt",#
				# "RF_Eucl_results_New_Rep13_100-1000.txt",#
				# "RF_Eucl_results_New_Rep14_100-1000.txt",#
				# "RF_Eucl_results_New_Rep15_100-1000.txt",#
				# "RF_Eucl_results_New_Rep16_100-1000.txt",#
				# "RF_Eucl_results_New_Rep17_100-1000.txt",#
				# "RF_Eucl_results_New_Rep18_100-1000.txt",#
				# "RF_Eucl_results_New_Rep19_100-1000.txt",#
				# "RF_Eucl_results_New_Rep20_100-1000.txt"#
				)#
#
dat <- NULL#
for(i in 1:length(infiles.a)){#
	temp.dat1 <- read.csv(infiles.a[i], header=TRUE, stringsAsFactors=FALSE)#
	temp.dat1$uniqueID <- paste(temp.dat1$species, temp.dat1$samp.size, temp.dat1$search.algo, temp.dat1$part.IC, sep="_")#
	temp.dat2 <- read.table(infiles.b[i], header=TRUE, stringsAsFactors=FALSE)#
	temp.dat2$uniqueID <- make.merge.id(temp.dat2)#
	temp.dat <- merge(temp.dat1, temp.dat2, by="uniqueID")#
	temp.dat$gene.size <- 100#
	temp.dat$mut.rate <- 1000#
	temp.dat$replicate <- i#
	dat <- rbind(dat, temp.dat)#
}#
#
#####################################
samp.size.col <- c("steelblue4", "darkorange2", "green4", "red3")#
samp.sizes <- c(10,20,40)#,80)#
#####################################
pdf("Results_Plots/Boxplots.pdf", width=7, height=7)#
par(mfrow=c(2,2), mar=c(4,4,1.5,0.5))#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=c(-0.02,0.02), xlab="", xaxt="n", ylab="diff in RF dist from true tree for 'no part' - 'part'", main="Lophotrochozoa")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:3){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion="AIC", distance="rf_dist")#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=c(-0.02,0.02), xlab="", xaxt="n", ylab="", main="Myriapoda")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:3){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion="AIC", distance="rf_dist")#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=c(-1,1), xlab="num. genes", xaxt="n", ylab="diff in eucl dist from true tree for 'no part' - 'part'", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:3){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion="AIC", distance="eucl_dist")#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=c(-1,1), xlab="num. genes", xaxt="n", ylab="", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:3){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion="AIC", distance="eucl_dist")#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
dev.off()
library(scales)#
setwd("~/Documents/UNIL/PartitioningMethods_SimulationProject/FunctioningPipeline/AnalysisResults")#
make.merge.id <- function(dat){#
	id.col <- rep(NA, dim(dat)[1])#
	for(i in 1:dim(dat)[1]){#
		if(length(grep("lopho", dat$file[i])) > 0) spp <- "lopho_"#
		if(length(grep("myria", dat$file[i])) > 0) spp <- "myria_"#
		if(length(grep("10", dat$file[i])) > 0) samp <- "10_"#
		if(length(grep("20", dat$file[i])) > 0) samp <- "20_"#
		if(length(grep("40", dat$file[i])) > 0) samp <- "40_"#
		if(length(grep("80", dat$file[i])) > 0) samp <- "80_"#
		if(length(grep("rcluster", dat$file[i])) > 0) algo <- "rcluster_"#
		if(length(grep("greedy", dat$file[i])) > 0) algo <- "greedy_"#
		if(length(grep("noPart", dat$file[i])) > 0) algo <- "noPart_"#
		if(length(grep("AIC", dat$file[i])) > 0) crit <- "AIC"#
		if(length(grep("AICc", dat$file[i])) > 0) crit <- "AICc"#
		if(length(grep("BIC", dat$file[i])) > 0) crit <- "BIC"#
		if(length(grep("noPart", dat$file[i])) > 0) crit <- "noPart"#
		id.col[i] <- paste(c(spp, samp, algo, crit), collapse="")#
	}#
	return(id.col)#
}#
#####################################
#
get.rep.difference <- function(dat, rep, samp.size, spp, partitioning.criterion, distance){#
	temp.dat <- dat[dat$replicate == rep & dat$samp.size == samp.size & dat$species == spp , ]#
	no.part.result <- temp.dat[temp.dat$search.algo == "noPart" ,]#
	rclust.AIC.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "AIC" ,]#
	rclust.BIC.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "BIC" ,]#
	rclust.AICc.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "AICc",]#
	if(partitioning.criterion == "AIC"){#
		difference <- no.part.result[distance] - rclust.AIC.result[distance]#
	}#
	if(partitioning.criterion == "BIC"){#
		difference <- no.part.result[distance] - rclust.BIC.result[distance]#
	}#
	if(partitioning.criterion == "AICc"){#
		difference <- no.part.result[distance] - rclust.AICc.result[distance]#
	}#
	return(as.numeric(difference))			#
}#
#
#####################################
#
get.boxplot.dat <- function(dat, samp.size, spp, partitioning.criterion, distance){	#
	samp.size.dists <- NULL#
	for(j in unique(dat$replicate)){#
		dist <- get.rep.difference(dat, rep=j, samp.size=samp.size, spp=spp, partitioning.criterion=partitioning.criterion, distance=distance)#
		samp.size.dists <- c(samp.size.dists, dist)#
	}#
	return(samp.size.dists)#
}#
#
#####################################
# # # mut rate 500#
# dat1 <- read.csv("AllStatsOutput_New_Rep1_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
# dat1$uniqueID <- paste(dat1$species, dat1$samp.size, dat1$search.algo, dat1$part.IC, sep="_")#
# dat1b <- read.table("RF_Eucl_results_New_Rep1_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
# dat1b$uniqueID <- make.merge.id(dat1b)#
# dat <- merge(dat1, dat1b, by="uniqueID")#
# dat$gene.size <- 100#
# dat$mut.rate <- 500#
# dat1 <- dat#
# mut rate 1000#
#
infiles.a <- c("AllStatsOutput_New_Rep1_100-1000.csv",#
				"AllStatsOutput_New_Rep2_100-1000.csv",#
				"AllStatsOutput_New_Rep3_100-1000.csv",#
				"AllStatsOutput_New_Rep4_100-1000.csv",#
				"AllStatsOutput_New_Rep5_100-1000.csv",#
				"AllStatsOutput_New_Rep6_100-1000.csv"#,#
				#"AllStatsOutput_New_Rep1_100-500.csv",#
				#"AllStatsOutput_New_Rep2_100-500.csv",#
				#"AllStatsOutput_New_Rep3_100-500.csv",#
				#"AllStatsOutput_New_Rep4_100-500.csv",#
				#"AllStatsOutput_New_Rep5_100-500.csv",#
				#"AllStatsOutput_New_Rep6_100-500.csv",#
				"AllStatsOutput_Newest_Rep7_100-1000.csv"#,#
				# "AllStatsOutput_Newest_Rep8_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep9_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep10_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep11_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep12_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep13_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep14_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep15_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep16_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep17_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep18_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep19_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep20_100-1000.csv"#
				)#
infiles.b <- c("RF_Eucl_results_New_Rep1_100-1000.txt",#
				"RF_Eucl_results_New_Rep2_100-1000.txt",#
				"RF_Eucl_results_New_Rep3_100-1000.txt",#
				"RF_Eucl_results_New_Rep4_100-1000.txt",#
				"RF_Eucl_results_New_Rep5_100-1000.txt",#
				"RF_Eucl_results_New_Rep6_100-1000.txt",#
				#"RF_Eucl_results_New_Rep1_100-500.txt",#
				#"RF_Eucl_results_New_Rep2_100-500.txt",#
				#"RF_Eucl_results_New_Rep3_100-500.txt",#
				#"RF_Eucl_results_New_Rep4_100-500.txt",#
				#"RF_Eucl_results_New_Rep5_100-500.txt",#
				#"RF_Eucl_results_New_Rep6_100-500.txt",#
				"RF_Eucl_results_New_Rep7_100-1000.txt"#,#
				# "RF_Eucl_results_New_Rep8_100-1000.txt",#
				# "RF_Eucl_results_New_Rep9_100-1000.txt",#
				# "RF_Eucl_results_New_Rep10_100-1000.txt",#
				# "RF_Eucl_results_New_Rep11_100-1000.txt",#
				# "RF_Eucl_results_New_Rep12_100-1000.txt",#
				# "RF_Eucl_results_New_Rep13_100-1000.txt",#
				# "RF_Eucl_results_New_Rep14_100-1000.txt",#
				# "RF_Eucl_results_New_Rep15_100-1000.txt",#
				# "RF_Eucl_results_New_Rep16_100-1000.txt",#
				# "RF_Eucl_results_New_Rep17_100-1000.txt",#
				# "RF_Eucl_results_New_Rep18_100-1000.txt",#
				# "RF_Eucl_results_New_Rep19_100-1000.txt",#
				# "RF_Eucl_results_New_Rep20_100-1000.txt"#
				)#
#
dat <- NULL#
for(i in 1:length(infiles.a)){#
	temp.dat1 <- read.csv(infiles.a[i], header=TRUE, stringsAsFactors=FALSE)#
	temp.dat1$uniqueID <- paste(temp.dat1$species, temp.dat1$samp.size, temp.dat1$search.algo, temp.dat1$part.IC, sep="_")#
	temp.dat2 <- read.table(infiles.b[i], header=TRUE, stringsAsFactors=FALSE)#
	temp.dat2$uniqueID <- make.merge.id(temp.dat2)#
	temp.dat <- merge(temp.dat1, temp.dat2, by="uniqueID")#
	temp.dat$gene.size <- 100#
	temp.dat$mut.rate <- 1000#
	temp.dat$replicate <- i#
	dat <- rbind(dat, temp.dat)#
}#
#
#####################################
samp.size.col <- c("steelblue4", "darkorange2", "green4", "red3")#
samp.sizes <- c(10,20,40)#,80)#
#####################################
pdf("Results_Plots/Boxplots.pdf", width=7, height=7)#
par(mfrow=c(2,2), mar=c(4,4,1.5,0.5))#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=c(-0.02,0.02), xlab="", xaxt="n", ylab="diff in RF dist from true tree for 'no part' - 'part'", main="Lophotrochozoa")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:3){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion="AIC", distance="rf_dist")#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=c(-0.02,0.02), xlab="", xaxt="n", ylab="", main="Myriapoda")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:3){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion="AIC", distance="rf_dist")#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=c(-1,1), xlab="num. genes", xaxt="n", ylab="diff in eucl dist from true tree for 'no part' - 'part'", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:3){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion="AIC", distance="eucl_dist")#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=c(-1,1), xlab="num. genes", xaxt="n", ylab="", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:3){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion="AIC", distance="eucl_dist")#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
dev.off()
samp.size.dists <- NULL
partitioning.criterion
partitioning.criterion <- "AIC"
dat
samp.size
samp.size <- 80
distance="eucl_dist"
unique(dat$replicate)
j <- 1
rep=j
spp
spp <- "lopho"
partitioning.criterion
distance
temp.dat <- dat[dat$replicate == rep & dat$samp.size == samp.size & dat$species == spp , ]
temp.dat
no.part.result <- temp.dat[temp.dat$search.algo == "noPart" ,]
no.part.result
rclust.AIC.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "AIC" ,]
rclust.AIC.result
rclust.BIC.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "BIC" ,]
rclust.BIC.result
rclust.AICc.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "AICc",]
rclust.AICc.result
partitioning.criterion
difference <- no.part.result[distance] - rclust.AIC.result[distance]
no.part.result[distance]
rclust.AIC.result[distance]
length(no.part.result[distance])
dim(no.part.result[distance])
class(no.part.result[distance])
is.na(no.part.result[distance])
no.part.result[distance]
rclust.AIC.result
rclust.AIC.result[distance]
difference <- no.part.result[distance] - rclust.AIC.result[distance]
no.part.result[distance]
dim(rclust.AIC.result[distance])
length(rclust.AIC.result[distance])
rclust.AIC.result[distance]
is.na(rclust.AIC.result[distance])
if(dim(rclust.AIC.result[distance])[1] == 0) print("yes")
library(scales)#
setwd("~/Documents/UNIL/PartitioningMethods_SimulationProject/FunctioningPipeline/AnalysisResults")#
make.merge.id <- function(dat){#
	id.col <- rep(NA, dim(dat)[1])#
	for(i in 1:dim(dat)[1]){#
		if(length(grep("lopho", dat$file[i])) > 0) spp <- "lopho_"#
		if(length(grep("myria", dat$file[i])) > 0) spp <- "myria_"#
		if(length(grep("10", dat$file[i])) > 0) samp <- "10_"#
		if(length(grep("20", dat$file[i])) > 0) samp <- "20_"#
		if(length(grep("40", dat$file[i])) > 0) samp <- "40_"#
		if(length(grep("80", dat$file[i])) > 0) samp <- "80_"#
		if(length(grep("rcluster", dat$file[i])) > 0) algo <- "rcluster_"#
		if(length(grep("greedy", dat$file[i])) > 0) algo <- "greedy_"#
		if(length(grep("noPart", dat$file[i])) > 0) algo <- "noPart_"#
		if(length(grep("AIC", dat$file[i])) > 0) crit <- "AIC"#
		if(length(grep("AICc", dat$file[i])) > 0) crit <- "AICc"#
		if(length(grep("BIC", dat$file[i])) > 0) crit <- "BIC"#
		if(length(grep("noPart", dat$file[i])) > 0) crit <- "noPart"#
		id.col[i] <- paste(c(spp, samp, algo, crit), collapse="")#
	}#
	return(id.col)#
}#
#####################################
#
get.rep.difference <- function(dat, rep, samp.size, spp, partitioning.criterion, distance){#
	temp.dat <- dat[dat$replicate == rep & dat$samp.size == samp.size & dat$species == spp , ]#
	no.part.result <- temp.dat[temp.dat$search.algo == "noPart" ,]#
	rclust.AIC.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "AIC" ,]#
	rclust.BIC.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "BIC" ,]#
	rclust.AICc.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "AICc",]#
	if(partitioning.criterion == "AIC"){#
		if(dim(rclust.AIC.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.AIC.result[distance] }#
	}#
	if(partitioning.criterion == "BIC"){#
		if(dim(rclust.BIC.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.BIC.result[distance] }#
	}#
	if(partitioning.criterion == "AICc"){#
		if(dim(rclust.AICc.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.AICc.result[distance] }#
	}#
	return(as.numeric(difference))			#
}#
#
#####################################
#
get.boxplot.dat <- function(dat, samp.size, spp, partitioning.criterion, distance){	#
	samp.size.dists <- NULL#
	for(j in unique(dat$replicate)){#
		dist <- get.rep.difference(dat, rep=j, samp.size=samp.size, spp=spp, partitioning.criterion=partitioning.criterion, distance=distance)#
		samp.size.dists <- c(samp.size.dists, dist)#
	}#
	return(samp.size.dists)#
}#
#
#####################################
# # # mut rate 500#
# dat1 <- read.csv("AllStatsOutput_New_Rep1_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
# dat1$uniqueID <- paste(dat1$species, dat1$samp.size, dat1$search.algo, dat1$part.IC, sep="_")#
# dat1b <- read.table("RF_Eucl_results_New_Rep1_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
# dat1b$uniqueID <- make.merge.id(dat1b)#
# dat <- merge(dat1, dat1b, by="uniqueID")#
# dat$gene.size <- 100#
# dat$mut.rate <- 500#
# dat1 <- dat#
# mut rate 1000#
#
infiles.a <- c("AllStatsOutput_New_Rep1_100-1000.csv",#
				"AllStatsOutput_New_Rep2_100-1000.csv",#
				"AllStatsOutput_New_Rep3_100-1000.csv",#
				"AllStatsOutput_New_Rep4_100-1000.csv",#
				"AllStatsOutput_New_Rep5_100-1000.csv",#
				"AllStatsOutput_New_Rep6_100-1000.csv"#,#
				#"AllStatsOutput_New_Rep1_100-500.csv",#
				#"AllStatsOutput_New_Rep2_100-500.csv",#
				#"AllStatsOutput_New_Rep3_100-500.csv",#
				#"AllStatsOutput_New_Rep4_100-500.csv",#
				#"AllStatsOutput_New_Rep5_100-500.csv",#
				#"AllStatsOutput_New_Rep6_100-500.csv",#
				"AllStatsOutput_Newest_Rep7_100-1000.csv"#,#
				# "AllStatsOutput_Newest_Rep8_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep9_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep10_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep11_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep12_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep13_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep14_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep15_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep16_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep17_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep18_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep19_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep20_100-1000.csv"#
				)#
infiles.b <- c("RF_Eucl_results_New_Rep1_100-1000.txt",#
				"RF_Eucl_results_New_Rep2_100-1000.txt",#
				"RF_Eucl_results_New_Rep3_100-1000.txt",#
				"RF_Eucl_results_New_Rep4_100-1000.txt",#
				"RF_Eucl_results_New_Rep5_100-1000.txt",#
				"RF_Eucl_results_New_Rep6_100-1000.txt",#
				#"RF_Eucl_results_New_Rep1_100-500.txt",#
				#"RF_Eucl_results_New_Rep2_100-500.txt",#
				#"RF_Eucl_results_New_Rep3_100-500.txt",#
				#"RF_Eucl_results_New_Rep4_100-500.txt",#
				#"RF_Eucl_results_New_Rep5_100-500.txt",#
				#"RF_Eucl_results_New_Rep6_100-500.txt",#
				"RF_Eucl_results_New_Rep7_100-1000.txt"#,#
				# "RF_Eucl_results_New_Rep8_100-1000.txt",#
				# "RF_Eucl_results_New_Rep9_100-1000.txt",#
				# "RF_Eucl_results_New_Rep10_100-1000.txt",#
				# "RF_Eucl_results_New_Rep11_100-1000.txt",#
				# "RF_Eucl_results_New_Rep12_100-1000.txt",#
				# "RF_Eucl_results_New_Rep13_100-1000.txt",#
				# "RF_Eucl_results_New_Rep14_100-1000.txt",#
				# "RF_Eucl_results_New_Rep15_100-1000.txt",#
				# "RF_Eucl_results_New_Rep16_100-1000.txt",#
				# "RF_Eucl_results_New_Rep17_100-1000.txt",#
				# "RF_Eucl_results_New_Rep18_100-1000.txt",#
				# "RF_Eucl_results_New_Rep19_100-1000.txt",#
				# "RF_Eucl_results_New_Rep20_100-1000.txt"#
				)#
#
dat <- NULL#
for(i in 1:length(infiles.a)){#
	temp.dat1 <- read.csv(infiles.a[i], header=TRUE, stringsAsFactors=FALSE)#
	temp.dat1$uniqueID <- paste(temp.dat1$species, temp.dat1$samp.size, temp.dat1$search.algo, temp.dat1$part.IC, sep="_")#
	temp.dat2 <- read.table(infiles.b[i], header=TRUE, stringsAsFactors=FALSE)#
	temp.dat2$uniqueID <- make.merge.id(temp.dat2)#
	temp.dat <- merge(temp.dat1, temp.dat2, by="uniqueID")#
	temp.dat$gene.size <- 100#
	temp.dat$mut.rate <- 1000#
	temp.dat$replicate <- i#
	dat <- rbind(dat, temp.dat)#
}#
#
#####################################
samp.size.col <- c("steelblue4", "darkorange2", "green4", "red3")#
samp.sizes <- c(10,20,40)#,80)#
#####################################
pdf("Results_Plots/Boxplots.pdf", width=7, height=7)#
par(mfrow=c(2,2), mar=c(4,4,1.5,0.5))#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=c(-0.02,0.02), xlab="", xaxt="n", ylab="diff in RF dist from true tree for 'no part' - 'part'", main="Lophotrochozoa")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:3){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion="AIC", distance="rf_dist")#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=c(-0.02,0.02), xlab="", xaxt="n", ylab="", main="Myriapoda")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:3){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion="AIC", distance="rf_dist")#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=c(-1,1), xlab="num. genes", xaxt="n", ylab="diff in eucl dist from true tree for 'no part' - 'part'", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:3){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion="AIC", distance="eucl_dist")#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=c(-1,1), xlab="num. genes", xaxt="n", ylab="", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:3){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion="AIC", distance="eucl_dist")#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
dev.off()
library(scales)#
setwd("~/Documents/UNIL/PartitioningMethods_SimulationProject/FunctioningPipeline/AnalysisResults")#
make.merge.id <- function(dat){#
	id.col <- rep(NA, dim(dat)[1])#
	for(i in 1:dim(dat)[1]){#
		if(length(grep("lopho", dat$file[i])) > 0) spp <- "lopho_"#
		if(length(grep("myria", dat$file[i])) > 0) spp <- "myria_"#
		if(length(grep("10", dat$file[i])) > 0) samp <- "10_"#
		if(length(grep("20", dat$file[i])) > 0) samp <- "20_"#
		if(length(grep("40", dat$file[i])) > 0) samp <- "40_"#
		if(length(grep("80", dat$file[i])) > 0) samp <- "80_"#
		if(length(grep("rcluster", dat$file[i])) > 0) algo <- "rcluster_"#
		if(length(grep("greedy", dat$file[i])) > 0) algo <- "greedy_"#
		if(length(grep("noPart", dat$file[i])) > 0) algo <- "noPart_"#
		if(length(grep("AIC", dat$file[i])) > 0) crit <- "AIC"#
		if(length(grep("AICc", dat$file[i])) > 0) crit <- "AICc"#
		if(length(grep("BIC", dat$file[i])) > 0) crit <- "BIC"#
		if(length(grep("noPart", dat$file[i])) > 0) crit <- "noPart"#
		id.col[i] <- paste(c(spp, samp, algo, crit), collapse="")#
	}#
	return(id.col)#
}#
#####################################
#
get.rep.difference <- function(dat, rep, samp.size, spp, partitioning.criterion, distance){#
	temp.dat <- dat[dat$replicate == rep & dat$samp.size == samp.size & dat$species == spp , ]#
	no.part.result <- temp.dat[temp.dat$search.algo == "noPart" ,]#
	rclust.AIC.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "AIC" ,]#
	rclust.BIC.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "BIC" ,]#
	rclust.AICc.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "AICc",]#
	if(partitioning.criterion == "AIC"){#
		if(dim(rclust.AIC.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.AIC.result[distance] }#
	}#
	if(partitioning.criterion == "BIC"){#
		if(dim(rclust.BIC.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.BIC.result[distance] }#
	}#
	if(partitioning.criterion == "AICc"){#
		if(dim(rclust.AICc.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.AICc.result[distance] }#
	}#
	return(as.numeric(difference))			#
}#
#
#####################################
#
get.boxplot.dat <- function(dat, samp.size, spp, partitioning.criterion, distance){	#
	samp.size.dists <- NULL#
	for(j in unique(dat$replicate)){#
		dist <- get.rep.difference(dat, rep=j, samp.size=samp.size, spp=spp, partitioning.criterion=partitioning.criterion, distance=distance)#
		samp.size.dists <- c(samp.size.dists, dist)#
	}#
	return(samp.size.dists)#
}#
#
#####################################
# # # mut rate 500#
# dat1 <- read.csv("AllStatsOutput_New_Rep1_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
# dat1$uniqueID <- paste(dat1$species, dat1$samp.size, dat1$search.algo, dat1$part.IC, sep="_")#
# dat1b <- read.table("RF_Eucl_results_New_Rep1_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
# dat1b$uniqueID <- make.merge.id(dat1b)#
# dat <- merge(dat1, dat1b, by="uniqueID")#
# dat$gene.size <- 100#
# dat$mut.rate <- 500#
# dat1 <- dat#
# mut rate 1000#
#
infiles.a <- c("AllStatsOutput_New_Rep1_100-1000.csv",#
				"AllStatsOutput_New_Rep2_100-1000.csv",#
				"AllStatsOutput_New_Rep3_100-1000.csv",#
				"AllStatsOutput_New_Rep4_100-1000.csv",#
				"AllStatsOutput_New_Rep5_100-1000.csv",#
				"AllStatsOutput_New_Rep6_100-1000.csv"#,#
				#"AllStatsOutput_New_Rep1_100-500.csv",#
				#"AllStatsOutput_New_Rep2_100-500.csv",#
				#"AllStatsOutput_New_Rep3_100-500.csv",#
				#"AllStatsOutput_New_Rep4_100-500.csv",#
				#"AllStatsOutput_New_Rep5_100-500.csv",#
				#"AllStatsOutput_New_Rep6_100-500.csv",#
				"AllStatsOutput_Newest_Rep7_100-1000.csv"#,#
				# "AllStatsOutput_Newest_Rep8_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep9_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep10_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep11_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep12_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep13_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep14_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep15_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep16_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep17_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep18_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep19_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep20_100-1000.csv"#
				)#
infiles.b <- c("RF_Eucl_results_New_Rep1_100-1000.txt",#
				"RF_Eucl_results_New_Rep2_100-1000.txt",#
				"RF_Eucl_results_New_Rep3_100-1000.txt",#
				"RF_Eucl_results_New_Rep4_100-1000.txt",#
				"RF_Eucl_results_New_Rep5_100-1000.txt",#
				"RF_Eucl_results_New_Rep6_100-1000.txt",#
				#"RF_Eucl_results_New_Rep1_100-500.txt",#
				#"RF_Eucl_results_New_Rep2_100-500.txt",#
				#"RF_Eucl_results_New_Rep3_100-500.txt",#
				#"RF_Eucl_results_New_Rep4_100-500.txt",#
				#"RF_Eucl_results_New_Rep5_100-500.txt",#
				#"RF_Eucl_results_New_Rep6_100-500.txt",#
				"RF_Eucl_results_New_Rep7_100-1000.txt"#,#
				# "RF_Eucl_results_New_Rep8_100-1000.txt",#
				# "RF_Eucl_results_New_Rep9_100-1000.txt",#
				# "RF_Eucl_results_New_Rep10_100-1000.txt",#
				# "RF_Eucl_results_New_Rep11_100-1000.txt",#
				# "RF_Eucl_results_New_Rep12_100-1000.txt",#
				# "RF_Eucl_results_New_Rep13_100-1000.txt",#
				# "RF_Eucl_results_New_Rep14_100-1000.txt",#
				# "RF_Eucl_results_New_Rep15_100-1000.txt",#
				# "RF_Eucl_results_New_Rep16_100-1000.txt",#
				# "RF_Eucl_results_New_Rep17_100-1000.txt",#
				# "RF_Eucl_results_New_Rep18_100-1000.txt",#
				# "RF_Eucl_results_New_Rep19_100-1000.txt",#
				# "RF_Eucl_results_New_Rep20_100-1000.txt"#
				)#
#
dat <- NULL#
for(i in 1:length(infiles.a)){#
	temp.dat1 <- read.csv(infiles.a[i], header=TRUE, stringsAsFactors=FALSE)#
	temp.dat1$uniqueID <- paste(temp.dat1$species, temp.dat1$samp.size, temp.dat1$search.algo, temp.dat1$part.IC, sep="_")#
	temp.dat2 <- read.table(infiles.b[i], header=TRUE, stringsAsFactors=FALSE)#
	temp.dat2$uniqueID <- make.merge.id(temp.dat2)#
	temp.dat <- merge(temp.dat1, temp.dat2, by="uniqueID")#
	temp.dat$gene.size <- 100#
	temp.dat$mut.rate <- 1000#
	temp.dat$replicate <- i#
	dat <- rbind(dat, temp.dat)#
}#
#
#####################################
samp.size.col <- c("steelblue4", "darkorange2", "green4", "red3")#
samp.sizes <- c(10,20,40)#,80)#
#####################################
pdf("Results_Plots/Boxplots.pdf", width=6.5, height=7.5)#
par(mfrow=c(2,2), mar=c(4,4,1.5,0.5))#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=c(-0.02,0.02), xlab="", xaxt="n", ylab="diff in RF dist from true tree for 'no part' - 'part'", main="Lophotrochozoa")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:3){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion="AIC", distance="rf_dist")#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=c(-0.02,0.02), xlab="", xaxt="n", ylab="", main="Myriapoda")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:3){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion="AIC", distance="rf_dist")#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=c(-1,1), xlab="num. genes", xaxt="n", ylab="diff in eucl dist from true tree for 'no part' - 'part'", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:3){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion="AIC", distance="eucl_dist")#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=c(-1,1), xlab="num. genes", xaxt="n", ylab="", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:3){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion="AIC", distance="eucl_dist")#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
dev.off()
library(scales)#
setwd("~/Documents/UNIL/PartitioningMethods_SimulationProject/FunctioningPipeline/AnalysisResults")#
make.merge.id <- function(dat){#
	id.col <- rep(NA, dim(dat)[1])#
	for(i in 1:dim(dat)[1]){#
		if(length(grep("lopho", dat$file[i])) > 0) spp <- "lopho_"#
		if(length(grep("myria", dat$file[i])) > 0) spp <- "myria_"#
		if(length(grep("10", dat$file[i])) > 0) samp <- "10_"#
		if(length(grep("20", dat$file[i])) > 0) samp <- "20_"#
		if(length(grep("40", dat$file[i])) > 0) samp <- "40_"#
		if(length(grep("80", dat$file[i])) > 0) samp <- "80_"#
		if(length(grep("rcluster", dat$file[i])) > 0) algo <- "rcluster_"#
		if(length(grep("greedy", dat$file[i])) > 0) algo <- "greedy_"#
		if(length(grep("noPart", dat$file[i])) > 0) algo <- "noPart_"#
		if(length(grep("AIC", dat$file[i])) > 0) crit <- "AIC"#
		if(length(grep("AICc", dat$file[i])) > 0) crit <- "AICc"#
		if(length(grep("BIC", dat$file[i])) > 0) crit <- "BIC"#
		if(length(grep("noPart", dat$file[i])) > 0) crit <- "noPart"#
		id.col[i] <- paste(c(spp, samp, algo, crit), collapse="")#
	}#
	return(id.col)#
}#
#####################################
#
get.rep.difference <- function(dat, rep, samp.size, spp, partitioning.criterion, distance){#
	temp.dat <- dat[dat$replicate == rep & dat$samp.size == samp.size & dat$species == spp , ]#
	no.part.result <- temp.dat[temp.dat$search.algo == "noPart" ,]#
	rclust.AIC.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "AIC" ,]#
	rclust.BIC.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "BIC" ,]#
	rclust.AICc.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "AICc",]#
	if(partitioning.criterion == "AIC"){#
		if(dim(rclust.AIC.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.AIC.result[distance] }#
	}#
	if(partitioning.criterion == "BIC"){#
		if(dim(rclust.BIC.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.BIC.result[distance] }#
	}#
	if(partitioning.criterion == "AICc"){#
		if(dim(rclust.AICc.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.AICc.result[distance] }#
	}#
	return(as.numeric(difference))			#
}#
#
#####################################
#
get.boxplot.dat <- function(dat, samp.size, spp, partitioning.criterion, distance){	#
	samp.size.dists <- NULL#
	for(j in unique(dat$replicate)){#
		dist <- get.rep.difference(dat, rep=j, samp.size=samp.size, spp=spp, partitioning.criterion=partitioning.criterion, distance=distance)#
		samp.size.dists <- c(samp.size.dists, dist)#
	}#
	return(samp.size.dists)#
}#
#
#####################################
# # # mut rate 500#
# dat1 <- read.csv("AllStatsOutput_New_Rep1_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
# dat1$uniqueID <- paste(dat1$species, dat1$samp.size, dat1$search.algo, dat1$part.IC, sep="_")#
# dat1b <- read.table("RF_Eucl_results_New_Rep1_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
# dat1b$uniqueID <- make.merge.id(dat1b)#
# dat <- merge(dat1, dat1b, by="uniqueID")#
# dat$gene.size <- 100#
# dat$mut.rate <- 500#
# dat1 <- dat#
# mut rate 1000#
#
infiles.a <- c("AllStatsOutput_New_Rep1_100-1000.csv",#
				"AllStatsOutput_New_Rep2_100-1000.csv",#
				"AllStatsOutput_New_Rep3_100-1000.csv",#
				"AllStatsOutput_New_Rep4_100-1000.csv",#
				"AllStatsOutput_New_Rep5_100-1000.csv",#
				"AllStatsOutput_New_Rep6_100-1000.csv"#,#
				#"AllStatsOutput_New_Rep1_100-500.csv",#
				#"AllStatsOutput_New_Rep2_100-500.csv",#
				#"AllStatsOutput_New_Rep3_100-500.csv",#
				#"AllStatsOutput_New_Rep4_100-500.csv",#
				#"AllStatsOutput_New_Rep5_100-500.csv",#
				#"AllStatsOutput_New_Rep6_100-500.csv",#
				"AllStatsOutput_Newest_Rep7_100-1000.csv"#,#
				# "AllStatsOutput_Newest_Rep8_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep9_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep10_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep11_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep12_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep13_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep14_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep15_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep16_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep17_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep18_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep19_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep20_100-1000.csv"#
				)#
infiles.b <- c("RF_Eucl_results_New_Rep1_100-1000.txt",#
				"RF_Eucl_results_New_Rep2_100-1000.txt",#
				"RF_Eucl_results_New_Rep3_100-1000.txt",#
				"RF_Eucl_results_New_Rep4_100-1000.txt",#
				"RF_Eucl_results_New_Rep5_100-1000.txt",#
				"RF_Eucl_results_New_Rep6_100-1000.txt",#
				#"RF_Eucl_results_New_Rep1_100-500.txt",#
				#"RF_Eucl_results_New_Rep2_100-500.txt",#
				#"RF_Eucl_results_New_Rep3_100-500.txt",#
				#"RF_Eucl_results_New_Rep4_100-500.txt",#
				#"RF_Eucl_results_New_Rep5_100-500.txt",#
				#"RF_Eucl_results_New_Rep6_100-500.txt",#
				"RF_Eucl_results_New_Rep7_100-1000.txt"#,#
				# "RF_Eucl_results_New_Rep8_100-1000.txt",#
				# "RF_Eucl_results_New_Rep9_100-1000.txt",#
				# "RF_Eucl_results_New_Rep10_100-1000.txt",#
				# "RF_Eucl_results_New_Rep11_100-1000.txt",#
				# "RF_Eucl_results_New_Rep12_100-1000.txt",#
				# "RF_Eucl_results_New_Rep13_100-1000.txt",#
				# "RF_Eucl_results_New_Rep14_100-1000.txt",#
				# "RF_Eucl_results_New_Rep15_100-1000.txt",#
				# "RF_Eucl_results_New_Rep16_100-1000.txt",#
				# "RF_Eucl_results_New_Rep17_100-1000.txt",#
				# "RF_Eucl_results_New_Rep18_100-1000.txt",#
				# "RF_Eucl_results_New_Rep19_100-1000.txt",#
				# "RF_Eucl_results_New_Rep20_100-1000.txt"#
				)#
#
dat <- NULL#
for(i in 1:length(infiles.a)){#
	temp.dat1 <- read.csv(infiles.a[i], header=TRUE, stringsAsFactors=FALSE)#
	temp.dat1$uniqueID <- paste(temp.dat1$species, temp.dat1$samp.size, temp.dat1$search.algo, temp.dat1$part.IC, sep="_")#
	temp.dat2 <- read.table(infiles.b[i], header=TRUE, stringsAsFactors=FALSE)#
	temp.dat2$uniqueID <- make.merge.id(temp.dat2)#
	temp.dat <- merge(temp.dat1, temp.dat2, by="uniqueID")#
	temp.dat$gene.size <- 100#
	temp.dat$mut.rate <- 1000#
	temp.dat$replicate <- i#
	dat <- rbind(dat, temp.dat)#
}#
#
#####################################
samp.size.col <- c("steelblue4", "darkorange2", "green4", "red3")#
samp.sizes <- c(10,20,40)#,80)#
#####################################
pdf("Results_Plots/Boxplots.pdf", width=6.5, height=7.5)#
par(mfrow=c(2,2), mar=c(4,4,1.5,0.5))#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=c(-0.03,0.03), xlab="", xaxt="n", ylab="diff in RF dist from true tree for 'no part' - 'part'", main="Lophotrochozoa")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion="AIC", distance="rf_dist")#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=c(-0.03,0.03), xlab="", xaxt="n", ylab="", main="Myriapoda")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion="AIC", distance="rf_dist")#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=c(-1,1), xlab="num. genes", xaxt="n", ylab="diff in eucl dist from true tree for 'no part' - 'part'", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion="AIC", distance="eucl_dist")#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=c(-1,1), xlab="num. genes", xaxt="n", ylab="", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion="AIC", distance="eucl_dist")#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
dev.off()
plot(0, type="n", xlim=c(0.5,4.5), ylim=c(-1,1), xlab="num. genes", xaxt="n", ylab="", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion="AIC", distance="eucl_dist")#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}
plot(0, type="n", xlim=c(0.5,4.5), ylim=c(-1,1), xlab="num. genes", xaxt="n", ylab="", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")
for(i in 1:
3
){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion="AIC", distance="eucl_dist")#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}
i <- 4
get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion="AIC", distance="eucl_dist")
samp.size=samp.sizes[i]
spp="myria"
partitioning.criterion="AIC"
distance="eucl_dist"
samp.size.dists <- NULL
unique(dat$replicate)
for(j in unique(dat$replicate)){#
		dist <- get.rep.difference(dat, rep=j, samp.size=samp.size, spp=spp, partitioning.criterion=partitioning.criterion, distance=distance)#
		samp.size.dists <- c(samp.size.dists, dist)#
	}
j
rep=j
samp.size
i
samp.sizes[i]
library(scales)#
setwd("~/Documents/UNIL/PartitioningMethods_SimulationProject/FunctioningPipeline/AnalysisResults")#
make.merge.id <- function(dat){#
	id.col <- rep(NA, dim(dat)[1])#
	for(i in 1:dim(dat)[1]){#
		if(length(grep("lopho", dat$file[i])) > 0) spp <- "lopho_"#
		if(length(grep("myria", dat$file[i])) > 0) spp <- "myria_"#
		if(length(grep("10", dat$file[i])) > 0) samp <- "10_"#
		if(length(grep("20", dat$file[i])) > 0) samp <- "20_"#
		if(length(grep("40", dat$file[i])) > 0) samp <- "40_"#
		if(length(grep("80", dat$file[i])) > 0) samp <- "80_"#
		if(length(grep("rcluster", dat$file[i])) > 0) algo <- "rcluster_"#
		if(length(grep("greedy", dat$file[i])) > 0) algo <- "greedy_"#
		if(length(grep("noPart", dat$file[i])) > 0) algo <- "noPart_"#
		if(length(grep("AIC", dat$file[i])) > 0) crit <- "AIC"#
		if(length(grep("AICc", dat$file[i])) > 0) crit <- "AICc"#
		if(length(grep("BIC", dat$file[i])) > 0) crit <- "BIC"#
		if(length(grep("noPart", dat$file[i])) > 0) crit <- "noPart"#
		id.col[i] <- paste(c(spp, samp, algo, crit), collapse="")#
	}#
	return(id.col)#
}#
#####################################
#
get.rep.difference <- function(dat, rep, samp.size, spp, partitioning.criterion, distance){#
	temp.dat <- dat[dat$replicate == rep & dat$samp.size == samp.size & dat$species == spp , ]#
	no.part.result <- temp.dat[temp.dat$search.algo == "noPart" ,]#
	rclust.AIC.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "AIC" ,]#
	rclust.BIC.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "BIC" ,]#
	rclust.AICc.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "AICc",]#
	if(partitioning.criterion == "AIC"){#
		if(dim(rclust.AIC.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.AIC.result[distance] }#
	}#
	if(partitioning.criterion == "BIC"){#
		if(dim(rclust.BIC.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.BIC.result[distance] }#
	}#
	if(partitioning.criterion == "AICc"){#
		if(dim(rclust.AICc.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.AICc.result[distance] }#
	}#
	return(as.numeric(difference))			#
}#
#
#####################################
#
get.boxplot.dat <- function(dat, samp.size, spp, partitioning.criterion, distance){	#
	samp.size.dists <- NULL#
	for(j in unique(dat$replicate)){#
		dist <- get.rep.difference(dat, rep=j, samp.size=samp.size, spp=spp, partitioning.criterion=partitioning.criterion, distance=distance)#
		samp.size.dists <- c(samp.size.dists, dist)#
	}#
	return(samp.size.dists)#
}#
#
#####################################
# # # mut rate 500#
# dat1 <- read.csv("AllStatsOutput_New_Rep1_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
# dat1$uniqueID <- paste(dat1$species, dat1$samp.size, dat1$search.algo, dat1$part.IC, sep="_")#
# dat1b <- read.table("RF_Eucl_results_New_Rep1_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
# dat1b$uniqueID <- make.merge.id(dat1b)#
# dat <- merge(dat1, dat1b, by="uniqueID")#
# dat$gene.size <- 100#
# dat$mut.rate <- 500#
# dat1 <- dat#
# mut rate 1000#
#
infiles.a <- c("AllStatsOutput_New_Rep1_100-1000.csv",#
				"AllStatsOutput_New_Rep2_100-1000.csv",#
				"AllStatsOutput_New_Rep3_100-1000.csv",#
				"AllStatsOutput_New_Rep4_100-1000.csv",#
				"AllStatsOutput_New_Rep5_100-1000.csv",#
				"AllStatsOutput_New_Rep6_100-1000.csv"#,#
				#"AllStatsOutput_New_Rep1_100-500.csv",#
				#"AllStatsOutput_New_Rep2_100-500.csv",#
				#"AllStatsOutput_New_Rep3_100-500.csv",#
				#"AllStatsOutput_New_Rep4_100-500.csv",#
				#"AllStatsOutput_New_Rep5_100-500.csv",#
				#"AllStatsOutput_New_Rep6_100-500.csv",#
				"AllStatsOutput_Newest_Rep7_100-1000.csv"#,#
				# "AllStatsOutput_Newest_Rep8_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep9_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep10_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep11_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep12_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep13_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep14_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep15_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep16_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep17_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep18_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep19_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep20_100-1000.csv"#
				)#
infiles.b <- c("RF_Eucl_results_New_Rep1_100-1000.txt",#
				"RF_Eucl_results_New_Rep2_100-1000.txt",#
				"RF_Eucl_results_New_Rep3_100-1000.txt",#
				"RF_Eucl_results_New_Rep4_100-1000.txt",#
				"RF_Eucl_results_New_Rep5_100-1000.txt",#
				"RF_Eucl_results_New_Rep6_100-1000.txt",#
				#"RF_Eucl_results_New_Rep1_100-500.txt",#
				#"RF_Eucl_results_New_Rep2_100-500.txt",#
				#"RF_Eucl_results_New_Rep3_100-500.txt",#
				#"RF_Eucl_results_New_Rep4_100-500.txt",#
				#"RF_Eucl_results_New_Rep5_100-500.txt",#
				#"RF_Eucl_results_New_Rep6_100-500.txt",#
				"RF_Eucl_results_New_Rep7_100-1000.txt"#,#
				# "RF_Eucl_results_New_Rep8_100-1000.txt",#
				# "RF_Eucl_results_New_Rep9_100-1000.txt",#
				# "RF_Eucl_results_New_Rep10_100-1000.txt",#
				# "RF_Eucl_results_New_Rep11_100-1000.txt",#
				# "RF_Eucl_results_New_Rep12_100-1000.txt",#
				# "RF_Eucl_results_New_Rep13_100-1000.txt",#
				# "RF_Eucl_results_New_Rep14_100-1000.txt",#
				# "RF_Eucl_results_New_Rep15_100-1000.txt",#
				# "RF_Eucl_results_New_Rep16_100-1000.txt",#
				# "RF_Eucl_results_New_Rep17_100-1000.txt",#
				# "RF_Eucl_results_New_Rep18_100-1000.txt",#
				# "RF_Eucl_results_New_Rep19_100-1000.txt",#
				# "RF_Eucl_results_New_Rep20_100-1000.txt"#
				)#
#
dat <- NULL#
for(i in 1:length(infiles.a)){#
	temp.dat1 <- read.csv(infiles.a[i], header=TRUE, stringsAsFactors=FALSE)#
	temp.dat1$uniqueID <- paste(temp.dat1$species, temp.dat1$samp.size, temp.dat1$search.algo, temp.dat1$part.IC, sep="_")#
	temp.dat2 <- read.table(infiles.b[i], header=TRUE, stringsAsFactors=FALSE)#
	temp.dat2$uniqueID <- make.merge.id(temp.dat2)#
	temp.dat <- merge(temp.dat1, temp.dat2, by="uniqueID")#
	temp.dat$gene.size <- 100#
	temp.dat$mut.rate <- 1000#
	temp.dat$replicate <- i#
	dat <- rbind(dat, temp.dat)#
}#
#
#####################################
samp.size.col <- c("steelblue4", "darkorange2", "green4", "red3")#
samp.sizes <- c(10,20,40,80)#
#####################################
pdf("Results_Plots/Boxplots.pdf", width=6.5, height=7.5)#
par(mfrow=c(2,2), mar=c(4,4,1.5,0.5))#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=c(-0.03,0.03), xlab="", xaxt="n", ylab="diff in RF dist from true tree for 'no part' - 'part'", main="Lophotrochozoa")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion="AIC", distance="rf_dist")#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=c(-0.03,0.03), xlab="", xaxt="n", ylab="", main="Myriapoda")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion="AIC", distance="rf_dist")#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=c(-1,1), xlab="num. genes", xaxt="n", ylab="diff in eucl dist from true tree for 'no part' - 'part'", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion="AIC", distance="eucl_dist")#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=c(-1,1), xlab="num. genes", xaxt="n", ylab="", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion="AIC", distance="eucl_dist")#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
dev.off()
plot(0, type="n", xlim=c(0.5,4.5), ylim=c(-1,1), xlab="num. genes", xaxt="n", ylab="", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")
for(i in 1:
3
){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion="AIC", distance="eucl_dist")#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}
i <- 4
samp.size
samp.size=samp.sizes[i]
samp.size
spp
partitioning.criterion
distance
samp.size.dists <- NULL
j <- 1
rep=j
temp.dat <- dat[dat$replicate == rep & dat$samp.size == samp.size & dat$species == spp , ]
temp.dat
no.part.result <- temp.dat[temp.dat$search.algo == "noPart" ,]
no.part.result
rclust.AIC.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "AIC" ,]
rclust.AIC.result
partitioning.criterion
partitioning.criterion="AIC"
partitioning.criterion
no.part.result <- temp.dat[temp.dat$search.algo == "noPart" ,]
rclust.AIC.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "AIC" ,]
rclust.AIC.result
dim(rclust.AIC.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0
difference <- no.part.result[distance] - rclust.AIC.result[distance]
difference
j
dist <- get.rep.difference(dat, rep=j, samp.size=samp.size, spp=spp, partitioning.criterion=partitioning.criterion, distance=distance)
dist
j <- 2
dist <- get.rep.difference(dat, rep=j, samp.size=samp.size, spp=spp, partitioning.criterion=partitioning.criterion, distance=distance)
j <- 2
dist
j <- 3
dist <- get.rep.difference(dat, rep=j, samp.size=samp.size, spp=spp, partitioning.criterion=partitioning.criterion, distance=distance)
dist
j <- 4
dist <- get.rep.difference(dat, rep=j, samp.size=samp.size, spp=spp, partitioning.criterion=partitioning.criterion, distance=distance)
dist
j <- 5
dist <- get.rep.difference(dat, rep=j, samp.size=samp.size, spp=spp, partitioning.criterion=partitioning.criterion, distance=distance)
dist
unique(dat$replicate)
i
plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion="AIC", distance="eucl_dist")
plot.dat
boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")
plot(0, type="n", xlim=c(0.5,4.5), ylim=c(-1,1), xlab="num. genes", xaxt="n", ylab="", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion="AIC", distance="eucl_dist")#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}
plot(0, type="n", xlim=c(0.5,4.5), ylim=c(-1,1), xlab="num. genes", xaxt="n", ylab="diff in eucl dist from true tree for 'no part' - 'part'", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion="AIC", distance="eucl_dist")#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}
i
samp.size
spp
spp="lopho"
partitioning.criterion
distance
j
j <- 1
dist <- get.rep.difference(dat, rep=j, samp.size=samp.size, spp=spp, partitioning.criterion=partitioning.criterion, distance=distance)
dist
j <- 2
dist <- get.rep.difference(dat, rep=j, samp.size=samp.size, spp=spp, partitioning.criterion=partitioning.criterion, distance=distance)
dist
j <- 3
dist <- get.rep.difference(dat, rep=j, samp.size=samp.size, spp=spp, partitioning.criterion=partitioning.criterion, distance=distance)
dist
j <- 4
dist
j <- 5
dist <- get.rep.difference(dat, rep=j, samp.size=samp.size, spp=spp, partitioning.criterion=partitioning.criterion, distance=distance)
dist
samp.size.dists <- NULL#
	for(j in unique(dat$replicate)){#
		dist <- get.rep.difference(dat, rep=j, samp.size=samp.size, spp=spp, partitioning.criterion=partitioning.criterion, distance=distance)#
		samp.size.dists <- c(samp.size.dists, dist)#
	}
samp.size.dists
boxplot(samp.size.dists)
is.na(samp.size.dists)
library(scales)#
setwd("~/Documents/UNIL/PartitioningMethods_SimulationProject/FunctioningPipeline/AnalysisResults")#
make.merge.id <- function(dat){#
	id.col <- rep(NA, dim(dat)[1])#
	for(i in 1:dim(dat)[1]){#
		if(length(grep("lopho", dat$file[i])) > 0) spp <- "lopho_"#
		if(length(grep("myria", dat$file[i])) > 0) spp <- "myria_"#
		if(length(grep("10", dat$file[i])) > 0) samp <- "10_"#
		if(length(grep("20", dat$file[i])) > 0) samp <- "20_"#
		if(length(grep("40", dat$file[i])) > 0) samp <- "40_"#
		if(length(grep("80", dat$file[i])) > 0) samp <- "80_"#
		if(length(grep("rcluster", dat$file[i])) > 0) algo <- "rcluster_"#
		if(length(grep("greedy", dat$file[i])) > 0) algo <- "greedy_"#
		if(length(grep("noPart", dat$file[i])) > 0) algo <- "noPart_"#
		if(length(grep("AIC", dat$file[i])) > 0) crit <- "AIC"#
		if(length(grep("AICc", dat$file[i])) > 0) crit <- "AICc"#
		if(length(grep("BIC", dat$file[i])) > 0) crit <- "BIC"#
		if(length(grep("noPart", dat$file[i])) > 0) crit <- "noPart"#
		id.col[i] <- paste(c(spp, samp, algo, crit), collapse="")#
	}#
	return(id.col)#
}#
#####################################
#
get.rep.difference <- function(dat, rep, samp.size, spp, partitioning.criterion, distance){#
	temp.dat <- dat[dat$replicate == rep & dat$samp.size == samp.size & dat$species == spp , ]#
	no.part.result <- temp.dat[temp.dat$search.algo == "noPart" ,]#
	rclust.AIC.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "AIC" ,]#
	rclust.BIC.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "BIC" ,]#
	rclust.AICc.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "AICc",]#
	if(partitioning.criterion == "AIC"){#
		if(dim(rclust.AIC.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.AIC.result[distance] }#
	}#
	if(partitioning.criterion == "BIC"){#
		if(dim(rclust.BIC.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.BIC.result[distance] }#
	}#
	if(partitioning.criterion == "AICc"){#
		if(dim(rclust.AICc.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.AICc.result[distance] }#
	}#
	return(as.numeric(difference))			#
}#
#
#####################################
#
get.boxplot.dat <- function(dat, samp.size, spp, partitioning.criterion, distance){	#
	samp.size.dists <- NULL#
	for(j in unique(dat$replicate)){#
		dist <- get.rep.difference(dat, rep=j, samp.size=samp.size, spp=spp, partitioning.criterion=partitioning.criterion, distance=distance)#
		samp.size.dists <- c(samp.size.dists, dist)#
	}#
	return(samp.size.dists)#
}#
#
#####################################
# # # mut rate 500#
# dat1 <- read.csv("AllStatsOutput_New_Rep1_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
# dat1$uniqueID <- paste(dat1$species, dat1$samp.size, dat1$search.algo, dat1$part.IC, sep="_")#
# dat1b <- read.table("RF_Eucl_results_New_Rep1_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
# dat1b$uniqueID <- make.merge.id(dat1b)#
# dat <- merge(dat1, dat1b, by="uniqueID")#
# dat$gene.size <- 100#
# dat$mut.rate <- 500#
# dat1 <- dat#
# mut rate 1000#
#
infiles.a <- c("AllStatsOutput_New_Rep1_100-1000.csv",#
				"AllStatsOutput_New_Rep2_100-1000.csv",#
				"AllStatsOutput_New_Rep3_100-1000.csv",#
				"AllStatsOutput_New_Rep4_100-1000.csv",#
				"AllStatsOutput_New_Rep5_100-1000.csv",#
				"AllStatsOutput_New_Rep6_100-1000.csv"#,#
				#"AllStatsOutput_New_Rep1_100-500.csv",#
				#"AllStatsOutput_New_Rep2_100-500.csv",#
				#"AllStatsOutput_New_Rep3_100-500.csv",#
				#"AllStatsOutput_New_Rep4_100-500.csv",#
				#"AllStatsOutput_New_Rep5_100-500.csv",#
				#"AllStatsOutput_New_Rep6_100-500.csv",#
				"AllStatsOutput_Newest_Rep7_100-1000.csv"#,#
				# "AllStatsOutput_Newest_Rep8_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep9_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep10_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep11_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep12_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep13_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep14_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep15_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep16_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep17_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep18_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep19_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep20_100-1000.csv"#
				)#
infiles.b <- c("RF_Eucl_results_New_Rep1_100-1000.txt",#
				"RF_Eucl_results_New_Rep2_100-1000.txt",#
				"RF_Eucl_results_New_Rep3_100-1000.txt",#
				"RF_Eucl_results_New_Rep4_100-1000.txt",#
				"RF_Eucl_results_New_Rep5_100-1000.txt",#
				"RF_Eucl_results_New_Rep6_100-1000.txt",#
				#"RF_Eucl_results_New_Rep1_100-500.txt",#
				#"RF_Eucl_results_New_Rep2_100-500.txt",#
				#"RF_Eucl_results_New_Rep3_100-500.txt",#
				#"RF_Eucl_results_New_Rep4_100-500.txt",#
				#"RF_Eucl_results_New_Rep5_100-500.txt",#
				#"RF_Eucl_results_New_Rep6_100-500.txt",#
				"RF_Eucl_results_New_Rep7_100-1000.txt"#,#
				# "RF_Eucl_results_New_Rep8_100-1000.txt",#
				# "RF_Eucl_results_New_Rep9_100-1000.txt",#
				# "RF_Eucl_results_New_Rep10_100-1000.txt",#
				# "RF_Eucl_results_New_Rep11_100-1000.txt",#
				# "RF_Eucl_results_New_Rep12_100-1000.txt",#
				# "RF_Eucl_results_New_Rep13_100-1000.txt",#
				# "RF_Eucl_results_New_Rep14_100-1000.txt",#
				# "RF_Eucl_results_New_Rep15_100-1000.txt",#
				# "RF_Eucl_results_New_Rep16_100-1000.txt",#
				# "RF_Eucl_results_New_Rep17_100-1000.txt",#
				# "RF_Eucl_results_New_Rep18_100-1000.txt",#
				# "RF_Eucl_results_New_Rep19_100-1000.txt",#
				# "RF_Eucl_results_New_Rep20_100-1000.txt"#
				)#
#
dat <- NULL#
for(i in 1:length(infiles.a)){#
	temp.dat1 <- read.csv(infiles.a[i], header=TRUE, stringsAsFactors=FALSE)#
	temp.dat1$uniqueID <- paste(temp.dat1$species, temp.dat1$samp.size, temp.dat1$search.algo, temp.dat1$part.IC, sep="_")#
	temp.dat2 <- read.table(infiles.b[i], header=TRUE, stringsAsFactors=FALSE)#
	temp.dat2$uniqueID <- make.merge.id(temp.dat2)#
	temp.dat <- merge(temp.dat1, temp.dat2, by="uniqueID")#
	temp.dat$gene.size <- 100#
	temp.dat$mut.rate <- 1000#
	temp.dat$replicate <- i#
	dat <- rbind(dat, temp.dat)#
}#
#
#####################################
samp.size.col <- c("steelblue4", "darkorange2", "green4", "red3")#
samp.sizes <- c(10,20,40,80)#
#####################################
pdf("Results_Plots/Boxplots.pdf", width=6.5, height=7.5)#
par(mfrow=c(2,2), mar=c(4,4,1.5,0.5))#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=c(-0.03,0.03), xlab="", xaxt="n", ylab="diff in RF dist from true tree for 'no part' - 'part'", main="Lophotrochozoa")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion="AIC", distance="rf_dist")#
	if(is.na(plot.dat)) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=c(-0.03,0.03), xlab="", xaxt="n", ylab="", main="Myriapoda")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion="AIC", distance="rf_dist")#
	if(is.na(plot.dat)) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=c(-1,1), xlab="num. genes", xaxt="n", ylab="diff in eucl dist from true tree for 'no part' - 'part'", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion="AIC", distance="eucl_dist")#
	if(is.na(plot.dat)) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=c(-1,1), xlab="num. genes", xaxt="n", ylab="", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion="AIC", distance="eucl_dist")#
	if(is.na(plot.dat)) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
dev.off()
is.na(is.na(plot.dat))
is.na(plot.dat)
unique(is.na(plot.dat))
test <- c(FALSE, FALSE, TRUE)
plot.dat
plot.dat[3] <- NA
is.na(plot.dat)
unique(is.na(plot.dat))
test <- rep(NA, 5)
is.na(test)
is.na(unique(test))
is.na(unique(plot.dat))
library(scales)#
setwd("~/Documents/UNIL/PartitioningMethods_SimulationProject/FunctioningPipeline/AnalysisResults")#
make.merge.id <- function(dat){#
	id.col <- rep(NA, dim(dat)[1])#
	for(i in 1:dim(dat)[1]){#
		if(length(grep("lopho", dat$file[i])) > 0) spp <- "lopho_"#
		if(length(grep("myria", dat$file[i])) > 0) spp <- "myria_"#
		if(length(grep("10", dat$file[i])) > 0) samp <- "10_"#
		if(length(grep("20", dat$file[i])) > 0) samp <- "20_"#
		if(length(grep("40", dat$file[i])) > 0) samp <- "40_"#
		if(length(grep("80", dat$file[i])) > 0) samp <- "80_"#
		if(length(grep("rcluster", dat$file[i])) > 0) algo <- "rcluster_"#
		if(length(grep("greedy", dat$file[i])) > 0) algo <- "greedy_"#
		if(length(grep("noPart", dat$file[i])) > 0) algo <- "noPart_"#
		if(length(grep("AIC", dat$file[i])) > 0) crit <- "AIC"#
		if(length(grep("AICc", dat$file[i])) > 0) crit <- "AICc"#
		if(length(grep("BIC", dat$file[i])) > 0) crit <- "BIC"#
		if(length(grep("noPart", dat$file[i])) > 0) crit <- "noPart"#
		id.col[i] <- paste(c(spp, samp, algo, crit), collapse="")#
	}#
	return(id.col)#
}#
#####################################
#
get.rep.difference <- function(dat, rep, samp.size, spp, partitioning.criterion, distance){#
	temp.dat <- dat[dat$replicate == rep & dat$samp.size == samp.size & dat$species == spp , ]#
	no.part.result <- temp.dat[temp.dat$search.algo == "noPart" ,]#
	rclust.AIC.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "AIC" ,]#
	rclust.BIC.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "BIC" ,]#
	rclust.AICc.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "AICc",]#
	if(partitioning.criterion == "AIC"){#
		if(dim(rclust.AIC.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.AIC.result[distance] }#
	}#
	if(partitioning.criterion == "BIC"){#
		if(dim(rclust.BIC.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.BIC.result[distance] }#
	}#
	if(partitioning.criterion == "AICc"){#
		if(dim(rclust.AICc.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.AICc.result[distance] }#
	}#
	return(as.numeric(difference))			#
}#
#
#####################################
#
get.boxplot.dat <- function(dat, samp.size, spp, partitioning.criterion, distance){	#
	samp.size.dists <- NULL#
	for(j in unique(dat$replicate)){#
		dist <- get.rep.difference(dat, rep=j, samp.size=samp.size, spp=spp, partitioning.criterion=partitioning.criterion, distance=distance)#
		samp.size.dists <- c(samp.size.dists, dist)#
	}#
	return(samp.size.dists)#
}#
#
#####################################
# # # mut rate 500#
# dat1 <- read.csv("AllStatsOutput_New_Rep1_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
# dat1$uniqueID <- paste(dat1$species, dat1$samp.size, dat1$search.algo, dat1$part.IC, sep="_")#
# dat1b <- read.table("RF_Eucl_results_New_Rep1_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
# dat1b$uniqueID <- make.merge.id(dat1b)#
# dat <- merge(dat1, dat1b, by="uniqueID")#
# dat$gene.size <- 100#
# dat$mut.rate <- 500#
# dat1 <- dat#
# mut rate 1000#
#
infiles.a <- c("AllStatsOutput_New_Rep1_100-1000.csv",#
				"AllStatsOutput_New_Rep2_100-1000.csv",#
				"AllStatsOutput_New_Rep3_100-1000.csv",#
				"AllStatsOutput_New_Rep4_100-1000.csv",#
				"AllStatsOutput_New_Rep5_100-1000.csv",#
				"AllStatsOutput_New_Rep6_100-1000.csv"#,#
				#"AllStatsOutput_New_Rep1_100-500.csv",#
				#"AllStatsOutput_New_Rep2_100-500.csv",#
				#"AllStatsOutput_New_Rep3_100-500.csv",#
				#"AllStatsOutput_New_Rep4_100-500.csv",#
				#"AllStatsOutput_New_Rep5_100-500.csv",#
				#"AllStatsOutput_New_Rep6_100-500.csv",#
				"AllStatsOutput_Newest_Rep7_100-1000.csv"#,#
				# "AllStatsOutput_Newest_Rep8_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep9_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep10_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep11_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep12_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep13_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep14_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep15_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep16_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep17_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep18_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep19_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep20_100-1000.csv"#
				)#
infiles.b <- c("RF_Eucl_results_New_Rep1_100-1000.txt",#
				"RF_Eucl_results_New_Rep2_100-1000.txt",#
				"RF_Eucl_results_New_Rep3_100-1000.txt",#
				"RF_Eucl_results_New_Rep4_100-1000.txt",#
				"RF_Eucl_results_New_Rep5_100-1000.txt",#
				"RF_Eucl_results_New_Rep6_100-1000.txt",#
				#"RF_Eucl_results_New_Rep1_100-500.txt",#
				#"RF_Eucl_results_New_Rep2_100-500.txt",#
				#"RF_Eucl_results_New_Rep3_100-500.txt",#
				#"RF_Eucl_results_New_Rep4_100-500.txt",#
				#"RF_Eucl_results_New_Rep5_100-500.txt",#
				#"RF_Eucl_results_New_Rep6_100-500.txt",#
				"RF_Eucl_results_New_Rep7_100-1000.txt"#,#
				# "RF_Eucl_results_New_Rep8_100-1000.txt",#
				# "RF_Eucl_results_New_Rep9_100-1000.txt",#
				# "RF_Eucl_results_New_Rep10_100-1000.txt",#
				# "RF_Eucl_results_New_Rep11_100-1000.txt",#
				# "RF_Eucl_results_New_Rep12_100-1000.txt",#
				# "RF_Eucl_results_New_Rep13_100-1000.txt",#
				# "RF_Eucl_results_New_Rep14_100-1000.txt",#
				# "RF_Eucl_results_New_Rep15_100-1000.txt",#
				# "RF_Eucl_results_New_Rep16_100-1000.txt",#
				# "RF_Eucl_results_New_Rep17_100-1000.txt",#
				# "RF_Eucl_results_New_Rep18_100-1000.txt",#
				# "RF_Eucl_results_New_Rep19_100-1000.txt",#
				# "RF_Eucl_results_New_Rep20_100-1000.txt"#
				)#
#
dat <- NULL#
for(i in 1:length(infiles.a)){#
	temp.dat1 <- read.csv(infiles.a[i], header=TRUE, stringsAsFactors=FALSE)#
	temp.dat1$uniqueID <- paste(temp.dat1$species, temp.dat1$samp.size, temp.dat1$search.algo, temp.dat1$part.IC, sep="_")#
	temp.dat2 <- read.table(infiles.b[i], header=TRUE, stringsAsFactors=FALSE)#
	temp.dat2$uniqueID <- make.merge.id(temp.dat2)#
	temp.dat <- merge(temp.dat1, temp.dat2, by="uniqueID")#
	temp.dat$gene.size <- 100#
	temp.dat$mut.rate <- 1000#
	temp.dat$replicate <- i#
	dat <- rbind(dat, temp.dat)#
}#
#
#####################################
samp.size.col <- c("steelblue4", "darkorange2", "green4", "red3")#
samp.sizes <- c(10,20,40,80)#
#####################################
pdf("Results_Plots/Boxplots.pdf", width=6.5, height=7.5)#
par(mfrow=c(2,2), mar=c(4,4,1.5,0.5))#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=c(-0.03,0.03), xlab="", xaxt="n", ylab="diff in RF dist from true tree for 'no part' - 'part'", main="Lophotrochozoa")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion="AIC", distance="rf_dist")#
	if(is.na(unique(plot.dat))) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=c(-0.03,0.03), xlab="", xaxt="n", ylab="", main="Myriapoda")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion="AIC", distance="rf_dist")#
	if(is.na(unique(plot.dat))) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=c(-1,1), xlab="num. genes", xaxt="n", ylab="diff in eucl dist from true tree for 'no part' - 'part'", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion="AIC", distance="eucl_dist")#
	if(is.na(unique(plot.dat))) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=c(-1,1), xlab="num. genes", xaxt="n", ylab="", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion="AIC", distance="eucl_dist")#
	if(is.na(unique(plot.dat))) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
dev.off()
test
length(unique(test))
length(unique(plot.dat))
plot.dat
library(scales)#
setwd("~/Documents/UNIL/PartitioningMethods_SimulationProject/FunctioningPipeline/AnalysisResults")#
make.merge.id <- function(dat){#
	id.col <- rep(NA, dim(dat)[1])#
	for(i in 1:dim(dat)[1]){#
		if(length(grep("lopho", dat$file[i])) > 0) spp <- "lopho_"#
		if(length(grep("myria", dat$file[i])) > 0) spp <- "myria_"#
		if(length(grep("10", dat$file[i])) > 0) samp <- "10_"#
		if(length(grep("20", dat$file[i])) > 0) samp <- "20_"#
		if(length(grep("40", dat$file[i])) > 0) samp <- "40_"#
		if(length(grep("80", dat$file[i])) > 0) samp <- "80_"#
		if(length(grep("rcluster", dat$file[i])) > 0) algo <- "rcluster_"#
		if(length(grep("greedy", dat$file[i])) > 0) algo <- "greedy_"#
		if(length(grep("noPart", dat$file[i])) > 0) algo <- "noPart_"#
		if(length(grep("AIC", dat$file[i])) > 0) crit <- "AIC"#
		if(length(grep("AICc", dat$file[i])) > 0) crit <- "AICc"#
		if(length(grep("BIC", dat$file[i])) > 0) crit <- "BIC"#
		if(length(grep("noPart", dat$file[i])) > 0) crit <- "noPart"#
		id.col[i] <- paste(c(spp, samp, algo, crit), collapse="")#
	}#
	return(id.col)#
}#
#####################################
#
get.rep.difference <- function(dat, rep, samp.size, spp, partitioning.criterion, distance){#
	temp.dat <- dat[dat$replicate == rep & dat$samp.size == samp.size & dat$species == spp , ]#
	no.part.result <- temp.dat[temp.dat$search.algo == "noPart" ,]#
	rclust.AIC.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "AIC" ,]#
	rclust.BIC.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "BIC" ,]#
	rclust.AICc.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "AICc",]#
	if(partitioning.criterion == "AIC"){#
		if(dim(rclust.AIC.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.AIC.result[distance] }#
	}#
	if(partitioning.criterion == "BIC"){#
		if(dim(rclust.BIC.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.BIC.result[distance] }#
	}#
	if(partitioning.criterion == "AICc"){#
		if(dim(rclust.AICc.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.AICc.result[distance] }#
	}#
	return(as.numeric(difference))			#
}#
#
#####################################
#
get.boxplot.dat <- function(dat, samp.size, spp, partitioning.criterion, distance){	#
	samp.size.dists <- NULL#
	for(j in unique(dat$replicate)){#
		dist <- get.rep.difference(dat, rep=j, samp.size=samp.size, spp=spp, partitioning.criterion=partitioning.criterion, distance=distance)#
		samp.size.dists <- c(samp.size.dists, dist)#
	}#
	return(samp.size.dists)#
}#
#
#####################################
# # # mut rate 500#
# dat1 <- read.csv("AllStatsOutput_New_Rep1_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
# dat1$uniqueID <- paste(dat1$species, dat1$samp.size, dat1$search.algo, dat1$part.IC, sep="_")#
# dat1b <- read.table("RF_Eucl_results_New_Rep1_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
# dat1b$uniqueID <- make.merge.id(dat1b)#
# dat <- merge(dat1, dat1b, by="uniqueID")#
# dat$gene.size <- 100#
# dat$mut.rate <- 500#
# dat1 <- dat#
# mut rate 1000#
#
infiles.a <- c("AllStatsOutput_New_Rep1_100-1000.csv",#
				"AllStatsOutput_New_Rep2_100-1000.csv",#
				"AllStatsOutput_New_Rep3_100-1000.csv",#
				"AllStatsOutput_New_Rep4_100-1000.csv",#
				"AllStatsOutput_New_Rep5_100-1000.csv",#
				"AllStatsOutput_New_Rep6_100-1000.csv"#,#
				#"AllStatsOutput_New_Rep1_100-500.csv",#
				#"AllStatsOutput_New_Rep2_100-500.csv",#
				#"AllStatsOutput_New_Rep3_100-500.csv",#
				#"AllStatsOutput_New_Rep4_100-500.csv",#
				#"AllStatsOutput_New_Rep5_100-500.csv",#
				#"AllStatsOutput_New_Rep6_100-500.csv",#
				"AllStatsOutput_Newest_Rep7_100-1000.csv"#,#
				# "AllStatsOutput_Newest_Rep8_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep9_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep10_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep11_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep12_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep13_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep14_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep15_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep16_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep17_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep18_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep19_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep20_100-1000.csv"#
				)#
infiles.b <- c("RF_Eucl_results_New_Rep1_100-1000.txt",#
				"RF_Eucl_results_New_Rep2_100-1000.txt",#
				"RF_Eucl_results_New_Rep3_100-1000.txt",#
				"RF_Eucl_results_New_Rep4_100-1000.txt",#
				"RF_Eucl_results_New_Rep5_100-1000.txt",#
				"RF_Eucl_results_New_Rep6_100-1000.txt",#
				#"RF_Eucl_results_New_Rep1_100-500.txt",#
				#"RF_Eucl_results_New_Rep2_100-500.txt",#
				#"RF_Eucl_results_New_Rep3_100-500.txt",#
				#"RF_Eucl_results_New_Rep4_100-500.txt",#
				#"RF_Eucl_results_New_Rep5_100-500.txt",#
				#"RF_Eucl_results_New_Rep6_100-500.txt",#
				"RF_Eucl_results_New_Rep7_100-1000.txt"#,#
				# "RF_Eucl_results_New_Rep8_100-1000.txt",#
				# "RF_Eucl_results_New_Rep9_100-1000.txt",#
				# "RF_Eucl_results_New_Rep10_100-1000.txt",#
				# "RF_Eucl_results_New_Rep11_100-1000.txt",#
				# "RF_Eucl_results_New_Rep12_100-1000.txt",#
				# "RF_Eucl_results_New_Rep13_100-1000.txt",#
				# "RF_Eucl_results_New_Rep14_100-1000.txt",#
				# "RF_Eucl_results_New_Rep15_100-1000.txt",#
				# "RF_Eucl_results_New_Rep16_100-1000.txt",#
				# "RF_Eucl_results_New_Rep17_100-1000.txt",#
				# "RF_Eucl_results_New_Rep18_100-1000.txt",#
				# "RF_Eucl_results_New_Rep19_100-1000.txt",#
				# "RF_Eucl_results_New_Rep20_100-1000.txt"#
				)#
#
dat <- NULL#
for(i in 1:length(infiles.a)){#
	temp.dat1 <- read.csv(infiles.a[i], header=TRUE, stringsAsFactors=FALSE)#
	temp.dat1$uniqueID <- paste(temp.dat1$species, temp.dat1$samp.size, temp.dat1$search.algo, temp.dat1$part.IC, sep="_")#
	temp.dat2 <- read.table(infiles.b[i], header=TRUE, stringsAsFactors=FALSE)#
	temp.dat2$uniqueID <- make.merge.id(temp.dat2)#
	temp.dat <- merge(temp.dat1, temp.dat2, by="uniqueID")#
	temp.dat$gene.size <- 100#
	temp.dat$mut.rate <- 1000#
	temp.dat$replicate <- i#
	dat <- rbind(dat, temp.dat)#
}#
#
#####################################
samp.size.col <- c("steelblue4", "darkorange2", "green4", "red3")#
samp.sizes <- c(10,20,40,80)#
#####################################
pdf("Results_Plots/Boxplots.pdf", width=6.5, height=7.5)#
par(mfrow=c(2,2), mar=c(4,4,1.5,0.5))#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=c(-0.03,0.03), xlab="", xaxt="n", ylab="diff in RF dist from true tree for 'no part' - 'part'", main="Lophotrochozoa")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion="AIC", distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=c(-0.03,0.03), xlab="", xaxt="n", ylab="", main="Myriapoda")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion="AIC", distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=c(-1,1), xlab="num. genes", xaxt="n", ylab="diff in eucl dist from true tree for 'no part' - 'part'", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion="AIC", distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=c(-1,1), xlab="num. genes", xaxt="n", ylab="", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion="AIC", distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
dev.off()
library(scales)#
setwd("~/Documents/UNIL/PartitioningMethods_SimulationProject/FunctioningPipeline/AnalysisResults")#
make.merge.id <- function(dat){#
	id.col <- rep(NA, dim(dat)[1])#
	for(i in 1:dim(dat)[1]){#
		if(length(grep("lopho", dat$file[i])) > 0) spp <- "lopho_"#
		if(length(grep("myria", dat$file[i])) > 0) spp <- "myria_"#
		if(length(grep("10", dat$file[i])) > 0) samp <- "10_"#
		if(length(grep("20", dat$file[i])) > 0) samp <- "20_"#
		if(length(grep("40", dat$file[i])) > 0) samp <- "40_"#
		if(length(grep("80", dat$file[i])) > 0) samp <- "80_"#
		if(length(grep("rcluster", dat$file[i])) > 0) algo <- "rcluster_"#
		if(length(grep("greedy", dat$file[i])) > 0) algo <- "greedy_"#
		if(length(grep("noPart", dat$file[i])) > 0) algo <- "noPart_"#
		if(length(grep("AIC", dat$file[i])) > 0) crit <- "AIC"#
		if(length(grep("AICc", dat$file[i])) > 0) crit <- "AICc"#
		if(length(grep("BIC", dat$file[i])) > 0) crit <- "BIC"#
		if(length(grep("noPart", dat$file[i])) > 0) crit <- "noPart"#
		id.col[i] <- paste(c(spp, samp, algo, crit), collapse="")#
	}#
	return(id.col)#
}#
#####################################
#
get.rep.difference <- function(dat, rep, samp.size, spp, partitioning.criterion, distance){#
	temp.dat <- dat[dat$replicate == rep & dat$samp.size == samp.size & dat$species == spp , ]#
	no.part.result <- temp.dat[temp.dat$search.algo == "noPart" ,]#
	rclust.AIC.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "AIC" ,]#
	rclust.BIC.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "BIC" ,]#
	rclust.AICc.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "AICc",]#
	if(partitioning.criterion == "AIC"){#
		if(dim(rclust.AIC.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.AIC.result[distance] }#
	}#
	if(partitioning.criterion == "BIC"){#
		if(dim(rclust.BIC.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.BIC.result[distance] }#
	}#
	if(partitioning.criterion == "AICc"){#
		if(dim(rclust.AICc.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.AICc.result[distance] }#
	}#
	return(as.numeric(difference))			#
}#
#
#####################################
#
get.boxplot.dat <- function(dat, samp.size, spp, partitioning.criterion, distance){	#
	samp.size.dists <- NULL#
	for(j in unique(dat$replicate)){#
		dist <- get.rep.difference(dat, rep=j, samp.size=samp.size, spp=spp, partitioning.criterion=partitioning.criterion, distance=distance)#
		samp.size.dists <- c(samp.size.dists, dist)#
	}#
	return(samp.size.dists)#
}#
#
#####################################
# # # mut rate 500#
# dat1 <- read.csv("AllStatsOutput_New_Rep1_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
# dat1$uniqueID <- paste(dat1$species, dat1$samp.size, dat1$search.algo, dat1$part.IC, sep="_")#
# dat1b <- read.table("RF_Eucl_results_New_Rep1_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
# dat1b$uniqueID <- make.merge.id(dat1b)#
# dat <- merge(dat1, dat1b, by="uniqueID")#
# dat$gene.size <- 100#
# dat$mut.rate <- 500#
# dat1 <- dat#
# mut rate 1000#
#
infiles.a <- c("AllStatsOutput_New_Rep1_100-1000.csv",#
				"AllStatsOutput_New_Rep2_100-1000.csv",#
				"AllStatsOutput_New_Rep3_100-1000.csv",#
				"AllStatsOutput_New_Rep4_100-1000.csv",#
				"AllStatsOutput_New_Rep5_100-1000.csv",#
				"AllStatsOutput_New_Rep6_100-1000.csv"#,#
				#"AllStatsOutput_New_Rep1_100-500.csv",#
				#"AllStatsOutput_New_Rep2_100-500.csv",#
				#"AllStatsOutput_New_Rep3_100-500.csv",#
				#"AllStatsOutput_New_Rep4_100-500.csv",#
				#"AllStatsOutput_New_Rep5_100-500.csv",#
				#"AllStatsOutput_New_Rep6_100-500.csv",#
				"AllStatsOutput_Newest_Rep7_100-1000.csv"#,#
				# "AllStatsOutput_Newest_Rep8_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep9_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep10_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep11_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep12_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep13_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep14_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep15_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep16_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep17_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep18_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep19_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep20_100-1000.csv"#
				)#
infiles.b <- c("RF_Eucl_results_New_Rep1_100-1000.txt",#
				"RF_Eucl_results_New_Rep2_100-1000.txt",#
				"RF_Eucl_results_New_Rep3_100-1000.txt",#
				"RF_Eucl_results_New_Rep4_100-1000.txt",#
				"RF_Eucl_results_New_Rep5_100-1000.txt",#
				"RF_Eucl_results_New_Rep6_100-1000.txt",#
				#"RF_Eucl_results_New_Rep1_100-500.txt",#
				#"RF_Eucl_results_New_Rep2_100-500.txt",#
				#"RF_Eucl_results_New_Rep3_100-500.txt",#
				#"RF_Eucl_results_New_Rep4_100-500.txt",#
				#"RF_Eucl_results_New_Rep5_100-500.txt",#
				#"RF_Eucl_results_New_Rep6_100-500.txt",#
				"RF_Eucl_results_New_Rep7_100-1000.txt"#,#
				# "RF_Eucl_results_New_Rep8_100-1000.txt",#
				# "RF_Eucl_results_New_Rep9_100-1000.txt",#
				# "RF_Eucl_results_New_Rep10_100-1000.txt",#
				# "RF_Eucl_results_New_Rep11_100-1000.txt",#
				# "RF_Eucl_results_New_Rep12_100-1000.txt",#
				# "RF_Eucl_results_New_Rep13_100-1000.txt",#
				# "RF_Eucl_results_New_Rep14_100-1000.txt",#
				# "RF_Eucl_results_New_Rep15_100-1000.txt",#
				# "RF_Eucl_results_New_Rep16_100-1000.txt",#
				# "RF_Eucl_results_New_Rep17_100-1000.txt",#
				# "RF_Eucl_results_New_Rep18_100-1000.txt",#
				# "RF_Eucl_results_New_Rep19_100-1000.txt",#
				# "RF_Eucl_results_New_Rep20_100-1000.txt"#
				)#
#
dat <- NULL#
for(i in 1:length(infiles.a)){#
	temp.dat1 <- read.csv(infiles.a[i], header=TRUE, stringsAsFactors=FALSE)#
	temp.dat1$uniqueID <- paste(temp.dat1$species, temp.dat1$samp.size, temp.dat1$search.algo, temp.dat1$part.IC, sep="_")#
	temp.dat2 <- read.table(infiles.b[i], header=TRUE, stringsAsFactors=FALSE)#
	temp.dat2$uniqueID <- make.merge.id(temp.dat2)#
	temp.dat <- merge(temp.dat1, temp.dat2, by="uniqueID")#
	temp.dat$gene.size <- 100#
	temp.dat$mut.rate <- 1000#
	temp.dat$replicate <- i#
	dat <- rbind(dat, temp.dat)#
}#
#
#####################################
samp.size.col <- c("steelblue4", "darkorange2", "green4", "red3")#
samp.sizes <- c(10,20,40,80)#
#####################################
ylim1 <- c(-0.05, 0.05)#
ylim2 <- c(-0.9, 0.9)#
pdf("Results_Plots/Boxplots.pdf", width=6.5, height=7.5)#
par(mfrow=c(2,2), mar=c(4,4,1.5,0.5))#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="diff in RF dist from true tree for 'no part' - 'part'", main="Lophotrochozoa")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion="AIC", distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="", main="Myriapoda")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion="AIC", distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="diff in eucl dist from true tree for 'no part' - 'part'", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion="AIC", distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion="AIC", distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
dev.off()
library(scales)#
setwd("~/Documents/UNIL/PartitioningMethods_SimulationProject/FunctioningPipeline/AnalysisResults")#
make.merge.id <- function(dat){#
	id.col <- rep(NA, dim(dat)[1])#
	for(i in 1:dim(dat)[1]){#
		if(length(grep("lopho", dat$file[i])) > 0) spp <- "lopho_"#
		if(length(grep("myria", dat$file[i])) > 0) spp <- "myria_"#
		if(length(grep("10", dat$file[i])) > 0) samp <- "10_"#
		if(length(grep("20", dat$file[i])) > 0) samp <- "20_"#
		if(length(grep("40", dat$file[i])) > 0) samp <- "40_"#
		if(length(grep("80", dat$file[i])) > 0) samp <- "80_"#
		if(length(grep("rcluster", dat$file[i])) > 0) algo <- "rcluster_"#
		if(length(grep("greedy", dat$file[i])) > 0) algo <- "greedy_"#
		if(length(grep("noPart", dat$file[i])) > 0) algo <- "noPart_"#
		if(length(grep("AIC", dat$file[i])) > 0) crit <- "AIC"#
		if(length(grep("AICc", dat$file[i])) > 0) crit <- "AICc"#
		if(length(grep("BIC", dat$file[i])) > 0) crit <- "BIC"#
		if(length(grep("noPart", dat$file[i])) > 0) crit <- "noPart"#
		id.col[i] <- paste(c(spp, samp, algo, crit), collapse="")#
	}#
	return(id.col)#
}#
#####################################
#
get.rep.difference <- function(dat, rep, samp.size, spp, partitioning.criterion, distance){#
	temp.dat <- dat[dat$replicate == rep & dat$samp.size == samp.size & dat$species == spp , ]#
	no.part.result <- temp.dat[temp.dat$search.algo == "noPart" ,]#
	rclust.AIC.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "AIC" ,]#
	rclust.BIC.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "BIC" ,]#
	rclust.AICc.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "AICc",]#
	if(partitioning.criterion == "AIC"){#
		if(dim(rclust.AIC.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.AIC.result[distance] }#
	}#
	if(partitioning.criterion == "BIC"){#
		if(dim(rclust.BIC.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.BIC.result[distance] }#
	}#
	if(partitioning.criterion == "AICc"){#
		if(dim(rclust.AICc.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.AICc.result[distance] }#
	}#
	return(as.numeric(difference))			#
}#
#
#####################################
#
get.boxplot.dat <- function(dat, samp.size, spp, partitioning.criterion, distance){	#
	samp.size.dists <- NULL#
	for(j in unique(dat$replicate)){#
		dist <- get.rep.difference(dat, rep=j, samp.size=samp.size, spp=spp, partitioning.criterion=partitioning.criterion, distance=distance)#
		samp.size.dists <- c(samp.size.dists, dist)#
	}#
	return(samp.size.dists)#
}#
#
#####################################
# # # mut rate 500#
# dat1 <- read.csv("AllStatsOutput_New_Rep1_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
# dat1$uniqueID <- paste(dat1$species, dat1$samp.size, dat1$search.algo, dat1$part.IC, sep="_")#
# dat1b <- read.table("RF_Eucl_results_New_Rep1_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
# dat1b$uniqueID <- make.merge.id(dat1b)#
# dat <- merge(dat1, dat1b, by="uniqueID")#
# dat$gene.size <- 100#
# dat$mut.rate <- 500#
# dat1 <- dat#
# mut rate 1000#
#
infiles.a <- c("AllStatsOutput_New_Rep1_100-1000.csv",#
				"AllStatsOutput_New_Rep2_100-1000.csv",#
				"AllStatsOutput_New_Rep3_100-1000.csv",#
				"AllStatsOutput_New_Rep4_100-1000.csv",#
				"AllStatsOutput_New_Rep5_100-1000.csv",#
				"AllStatsOutput_New_Rep6_100-1000.csv"#,#
				#"AllStatsOutput_New_Rep1_100-500.csv",#
				#"AllStatsOutput_New_Rep2_100-500.csv",#
				#"AllStatsOutput_New_Rep3_100-500.csv",#
				#"AllStatsOutput_New_Rep4_100-500.csv",#
				#"AllStatsOutput_New_Rep5_100-500.csv",#
				#"AllStatsOutput_New_Rep6_100-500.csv",#
				"AllStatsOutput_Newest_Rep7_100-1000.csv"#,#
				# "AllStatsOutput_Newest_Rep8_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep9_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep10_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep11_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep12_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep13_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep14_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep15_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep16_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep17_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep18_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep19_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep20_100-1000.csv"#
				)#
infiles.b <- c("RF_Eucl_results_New_Rep1_100-1000.txt",#
				"RF_Eucl_results_New_Rep2_100-1000.txt",#
				"RF_Eucl_results_New_Rep3_100-1000.txt",#
				"RF_Eucl_results_New_Rep4_100-1000.txt",#
				"RF_Eucl_results_New_Rep5_100-1000.txt",#
				"RF_Eucl_results_New_Rep6_100-1000.txt",#
				#"RF_Eucl_results_New_Rep1_100-500.txt",#
				#"RF_Eucl_results_New_Rep2_100-500.txt",#
				#"RF_Eucl_results_New_Rep3_100-500.txt",#
				#"RF_Eucl_results_New_Rep4_100-500.txt",#
				#"RF_Eucl_results_New_Rep5_100-500.txt",#
				#"RF_Eucl_results_New_Rep6_100-500.txt",#
				"RF_Eucl_results_New_Rep7_100-1000.txt"#,#
				# "RF_Eucl_results_New_Rep8_100-1000.txt",#
				# "RF_Eucl_results_New_Rep9_100-1000.txt",#
				# "RF_Eucl_results_New_Rep10_100-1000.txt",#
				# "RF_Eucl_results_New_Rep11_100-1000.txt",#
				# "RF_Eucl_results_New_Rep12_100-1000.txt",#
				# "RF_Eucl_results_New_Rep13_100-1000.txt",#
				# "RF_Eucl_results_New_Rep14_100-1000.txt",#
				# "RF_Eucl_results_New_Rep15_100-1000.txt",#
				# "RF_Eucl_results_New_Rep16_100-1000.txt",#
				# "RF_Eucl_results_New_Rep17_100-1000.txt",#
				# "RF_Eucl_results_New_Rep18_100-1000.txt",#
				# "RF_Eucl_results_New_Rep19_100-1000.txt",#
				# "RF_Eucl_results_New_Rep20_100-1000.txt"#
				)#
#
dat <- NULL#
for(i in 1:length(infiles.a)){#
	temp.dat1 <- read.csv(infiles.a[i], header=TRUE, stringsAsFactors=FALSE)#
	temp.dat1$uniqueID <- paste(temp.dat1$species, temp.dat1$samp.size, temp.dat1$search.algo, temp.dat1$part.IC, sep="_")#
	temp.dat2 <- read.table(infiles.b[i], header=TRUE, stringsAsFactors=FALSE)#
	temp.dat2$uniqueID <- make.merge.id(temp.dat2)#
	temp.dat <- merge(temp.dat1, temp.dat2, by="uniqueID")#
	temp.dat$gene.size <- 100#
	temp.dat$mut.rate <- 1000#
	temp.dat$replicate <- i#
	dat <- rbind(dat, temp.dat)#
}#
#
#####################################
samp.size.col <- c("steelblue4", "darkorange2", "green4", "red3")#
samp.sizes <- c(10,20,40,80)#
#####################################
ylim1 <- c(-0.05, 0.05)#
ylim2 <- c(-0.75, 0.75)#
pdf("Results_Plots/Boxplots.pdf", width=6.5, height=7.5)#
par(mfrow=c(2,2), mar=c(4,4,1.5,0.5))#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="diff in RF dist from true tree for 'no part' - 'part'", main="Lophotrochozoa")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion="AIC", distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="", main="Myriapoda")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion="AIC", distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="diff in eucl dist from true tree for 'no part' - 'part'", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion="AIC", distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion="AIC", distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
dev.off()
library(scales)#
setwd("~/Documents/UNIL/PartitioningMethods_SimulationProject/FunctioningPipeline/AnalysisResults")#
make.merge.id <- function(dat){#
	id.col <- rep(NA, dim(dat)[1])#
	for(i in 1:dim(dat)[1]){#
		if(length(grep("lopho", dat$file[i])) > 0) spp <- "lopho_"#
		if(length(grep("myria", dat$file[i])) > 0) spp <- "myria_"#
		if(length(grep("10", dat$file[i])) > 0) samp <- "10_"#
		if(length(grep("20", dat$file[i])) > 0) samp <- "20_"#
		if(length(grep("40", dat$file[i])) > 0) samp <- "40_"#
		if(length(grep("80", dat$file[i])) > 0) samp <- "80_"#
		if(length(grep("rcluster", dat$file[i])) > 0) algo <- "rcluster_"#
		if(length(grep("greedy", dat$file[i])) > 0) algo <- "greedy_"#
		if(length(grep("noPart", dat$file[i])) > 0) algo <- "noPart_"#
		if(length(grep("AIC", dat$file[i])) > 0) crit <- "AIC"#
		if(length(grep("AICc", dat$file[i])) > 0) crit <- "AICc"#
		if(length(grep("BIC", dat$file[i])) > 0) crit <- "BIC"#
		if(length(grep("noPart", dat$file[i])) > 0) crit <- "noPart"#
		id.col[i] <- paste(c(spp, samp, algo, crit), collapse="")#
	}#
	return(id.col)#
}#
#####################################
#
get.rep.difference <- function(dat, rep, samp.size, spp, partitioning.criterion, distance){#
	temp.dat <- dat[dat$replicate == rep & dat$samp.size == samp.size & dat$species == spp , ]#
	no.part.result <- temp.dat[temp.dat$search.algo == "noPart" ,]#
	rclust.AIC.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "AIC" ,]#
	rclust.BIC.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "BIC" ,]#
	rclust.AICc.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "AICc",]#
	if(partitioning.criterion == "AIC"){#
		if(dim(rclust.AIC.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.AIC.result[distance] }#
	}#
	if(partitioning.criterion == "BIC"){#
		if(dim(rclust.BIC.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.BIC.result[distance] }#
	}#
	if(partitioning.criterion == "AICc"){#
		if(dim(rclust.AICc.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.AICc.result[distance] }#
	}#
	return(as.numeric(difference))			#
}#
#
#####################################
#
get.boxplot.dat <- function(dat, samp.size, spp, partitioning.criterion, distance){	#
	samp.size.dists <- NULL#
	for(j in unique(dat$replicate)){#
		dist <- get.rep.difference(dat, rep=j, samp.size=samp.size, spp=spp, partitioning.criterion=partitioning.criterion, distance=distance)#
		samp.size.dists <- c(samp.size.dists, dist)#
	}#
	return(samp.size.dists)#
}#
#
#####################################
# # # mut rate 500#
# dat1 <- read.csv("AllStatsOutput_New_Rep1_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
# dat1$uniqueID <- paste(dat1$species, dat1$samp.size, dat1$search.algo, dat1$part.IC, sep="_")#
# dat1b <- read.table("RF_Eucl_results_New_Rep1_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
# dat1b$uniqueID <- make.merge.id(dat1b)#
# dat <- merge(dat1, dat1b, by="uniqueID")#
# dat$gene.size <- 100#
# dat$mut.rate <- 500#
# dat1 <- dat#
# mut rate 1000#
#
infiles.a <- c("AllStatsOutput_New_Rep1_100-1000.csv",#
				"AllStatsOutput_New_Rep2_100-1000.csv",#
				"AllStatsOutput_New_Rep3_100-1000.csv",#
				"AllStatsOutput_New_Rep4_100-1000.csv",#
				"AllStatsOutput_New_Rep5_100-1000.csv",#
				"AllStatsOutput_New_Rep6_100-1000.csv"#,#
				#"AllStatsOutput_New_Rep1_100-500.csv",#
				#"AllStatsOutput_New_Rep2_100-500.csv",#
				#"AllStatsOutput_New_Rep3_100-500.csv",#
				#"AllStatsOutput_New_Rep4_100-500.csv",#
				#"AllStatsOutput_New_Rep5_100-500.csv",#
				#"AllStatsOutput_New_Rep6_100-500.csv",#
				"AllStatsOutput_Newest_Rep7_100-1000.csv"#,#
				# "AllStatsOutput_Newest_Rep8_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep9_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep10_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep11_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep12_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep13_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep14_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep15_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep16_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep17_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep18_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep19_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep20_100-1000.csv"#
				)#
infiles.b <- c("RF_Eucl_results_New_Rep1_100-1000.txt",#
				"RF_Eucl_results_New_Rep2_100-1000.txt",#
				"RF_Eucl_results_New_Rep3_100-1000.txt",#
				"RF_Eucl_results_New_Rep4_100-1000.txt",#
				"RF_Eucl_results_New_Rep5_100-1000.txt",#
				"RF_Eucl_results_New_Rep6_100-1000.txt",#
				#"RF_Eucl_results_New_Rep1_100-500.txt",#
				#"RF_Eucl_results_New_Rep2_100-500.txt",#
				#"RF_Eucl_results_New_Rep3_100-500.txt",#
				#"RF_Eucl_results_New_Rep4_100-500.txt",#
				#"RF_Eucl_results_New_Rep5_100-500.txt",#
				#"RF_Eucl_results_New_Rep6_100-500.txt",#
				"RF_Eucl_results_New_Rep7_100-1000.txt"#,#
				# "RF_Eucl_results_New_Rep8_100-1000.txt",#
				# "RF_Eucl_results_New_Rep9_100-1000.txt",#
				# "RF_Eucl_results_New_Rep10_100-1000.txt",#
				# "RF_Eucl_results_New_Rep11_100-1000.txt",#
				# "RF_Eucl_results_New_Rep12_100-1000.txt",#
				# "RF_Eucl_results_New_Rep13_100-1000.txt",#
				# "RF_Eucl_results_New_Rep14_100-1000.txt",#
				# "RF_Eucl_results_New_Rep15_100-1000.txt",#
				# "RF_Eucl_results_New_Rep16_100-1000.txt",#
				# "RF_Eucl_results_New_Rep17_100-1000.txt",#
				# "RF_Eucl_results_New_Rep18_100-1000.txt",#
				# "RF_Eucl_results_New_Rep19_100-1000.txt",#
				# "RF_Eucl_results_New_Rep20_100-1000.txt"#
				)#
#
dat <- NULL#
for(i in 1:length(infiles.a)){#
	temp.dat1 <- read.csv(infiles.a[i], header=TRUE, stringsAsFactors=FALSE)#
	temp.dat1$uniqueID <- paste(temp.dat1$species, temp.dat1$samp.size, temp.dat1$search.algo, temp.dat1$part.IC, sep="_")#
	temp.dat2 <- read.table(infiles.b[i], header=TRUE, stringsAsFactors=FALSE)#
	temp.dat2$uniqueID <- make.merge.id(temp.dat2)#
	temp.dat <- merge(temp.dat1, temp.dat2, by="uniqueID")#
	temp.dat$gene.size <- 100#
	temp.dat$mut.rate <- 1000#
	temp.dat$replicate <- i#
	dat <- rbind(dat, temp.dat)#
}#
#
#####################################
samp.size.col <- c("steelblue4", "darkorange2", "green4", "red3")#
samp.sizes <- c(10,20,40,80)#
#####################################
ylim1 <- c(-0.05, 0.05)#
ylim2 <- c(-0.75, 0.75)#
pdf("Results_Plots/Boxplots.pdf", width=6.5, height=7.5)#
par(mfrow=c(2,2), mar=c(4,4,1.5,0.5))#
part.crit <- "AIC"#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="diff in RF dist from true tree for 'no part' - 'part'", main="Lophotrochozoa")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="", main="Myriapoda")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="diff in eucl dist from true tree for 'no part' - 'part'", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
part.crit <- "BIC"#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="diff in RF dist from true tree for 'no part' - 'part'", main="Lophotrochozoa")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="", main="Myriapoda")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="diff in eucl dist from true tree for 'no part' - 'part'", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
part.crit <- "AICc"#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="diff in RF dist from true tree for 'no part' - 'part'", main="Lophotrochozoa")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="", main="Myriapoda")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="diff in eucl dist from true tree for 'no part' - 'part'", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
dev.off()
library(scales)#
setwd("~/Documents/UNIL/PartitioningMethods_SimulationProject/FunctioningPipeline/AnalysisResults")#
make.merge.id <- function(dat){#
	id.col <- rep(NA, dim(dat)[1])#
	for(i in 1:dim(dat)[1]){#
		if(length(grep("lopho", dat$file[i])) > 0) spp <- "lopho_"#
		if(length(grep("myria", dat$file[i])) > 0) spp <- "myria_"#
		if(length(grep("10", dat$file[i])) > 0) samp <- "10_"#
		if(length(grep("20", dat$file[i])) > 0) samp <- "20_"#
		if(length(grep("40", dat$file[i])) > 0) samp <- "40_"#
		if(length(grep("80", dat$file[i])) > 0) samp <- "80_"#
		if(length(grep("rcluster", dat$file[i])) > 0) algo <- "rcluster_"#
		if(length(grep("greedy", dat$file[i])) > 0) algo <- "greedy_"#
		if(length(grep("noPart", dat$file[i])) > 0) algo <- "noPart_"#
		if(length(grep("AIC", dat$file[i])) > 0) crit <- "AIC"#
		if(length(grep("AICc", dat$file[i])) > 0) crit <- "AICc"#
		if(length(grep("BIC", dat$file[i])) > 0) crit <- "BIC"#
		if(length(grep("noPart", dat$file[i])) > 0) crit <- "noPart"#
		id.col[i] <- paste(c(spp, samp, algo, crit), collapse="")#
	}#
	return(id.col)#
}#
#####################################
#
get.rep.difference <- function(dat, rep, samp.size, spp, partitioning.criterion, distance){#
	temp.dat <- dat[dat$replicate == rep & dat$samp.size == samp.size & dat$species == spp , ]#
	no.part.result <- temp.dat[temp.dat$search.algo == "noPart" ,]#
	rclust.AIC.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "AIC" ,]#
	rclust.BIC.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "BIC" ,]#
	rclust.AICc.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "AICc",]#
	if(partitioning.criterion == "AIC"){#
		if(dim(rclust.AIC.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.AIC.result[distance] }#
	}#
	if(partitioning.criterion == "BIC"){#
		if(dim(rclust.BIC.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.BIC.result[distance] }#
	}#
	if(partitioning.criterion == "AICc"){#
		if(dim(rclust.AICc.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.AICc.result[distance] }#
	}#
	return(as.numeric(difference))			#
}#
#
#####################################
#
get.boxplot.dat <- function(dat, samp.size, spp, partitioning.criterion, distance){	#
	samp.size.dists <- NULL#
	for(j in unique(dat$replicate)){#
		dist <- get.rep.difference(dat, rep=j, samp.size=samp.size, spp=spp, partitioning.criterion=partitioning.criterion, distance=distance)#
		samp.size.dists <- c(samp.size.dists, dist)#
	}#
	return(samp.size.dists)#
}#
#
#####################################
# # # mut rate 500#
# dat1 <- read.csv("AllStatsOutput_New_Rep1_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
# dat1$uniqueID <- paste(dat1$species, dat1$samp.size, dat1$search.algo, dat1$part.IC, sep="_")#
# dat1b <- read.table("RF_Eucl_results_New_Rep1_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
# dat1b$uniqueID <- make.merge.id(dat1b)#
# dat <- merge(dat1, dat1b, by="uniqueID")#
# dat$gene.size <- 100#
# dat$mut.rate <- 500#
# dat1 <- dat#
# mut rate 1000#
#
infiles.a <- c("AllStatsOutput_New_Rep1_100-1000.csv",#
				"AllStatsOutput_New_Rep2_100-1000.csv",#
				"AllStatsOutput_New_Rep3_100-1000.csv",#
				"AllStatsOutput_New_Rep4_100-1000.csv",#
				"AllStatsOutput_New_Rep5_100-1000.csv",#
				"AllStatsOutput_New_Rep6_100-1000.csv"#,#
				#"AllStatsOutput_New_Rep1_100-500.csv",#
				#"AllStatsOutput_New_Rep2_100-500.csv",#
				#"AllStatsOutput_New_Rep3_100-500.csv",#
				#"AllStatsOutput_New_Rep4_100-500.csv",#
				#"AllStatsOutput_New_Rep5_100-500.csv",#
				#"AllStatsOutput_New_Rep6_100-500.csv",#
				"AllStatsOutput_Newest_Rep7_100-1000.csv"#,#
				# "AllStatsOutput_Newest_Rep8_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep9_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep10_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep11_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep12_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep13_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep14_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep15_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep16_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep17_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep18_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep19_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep20_100-1000.csv"#
				)#
infiles.b <- c("RF_Eucl_results_New_Rep1_100-1000.txt",#
				"RF_Eucl_results_New_Rep2_100-1000.txt",#
				"RF_Eucl_results_New_Rep3_100-1000.txt",#
				"RF_Eucl_results_New_Rep4_100-1000.txt",#
				"RF_Eucl_results_New_Rep5_100-1000.txt",#
				"RF_Eucl_results_New_Rep6_100-1000.txt",#
				#"RF_Eucl_results_New_Rep1_100-500.txt",#
				#"RF_Eucl_results_New_Rep2_100-500.txt",#
				#"RF_Eucl_results_New_Rep3_100-500.txt",#
				#"RF_Eucl_results_New_Rep4_100-500.txt",#
				#"RF_Eucl_results_New_Rep5_100-500.txt",#
				#"RF_Eucl_results_New_Rep6_100-500.txt",#
				"RF_Eucl_results_New_Rep7_100-1000.txt"#,#
				# "RF_Eucl_results_New_Rep8_100-1000.txt",#
				# "RF_Eucl_results_New_Rep9_100-1000.txt",#
				# "RF_Eucl_results_New_Rep10_100-1000.txt",#
				# "RF_Eucl_results_New_Rep11_100-1000.txt",#
				# "RF_Eucl_results_New_Rep12_100-1000.txt",#
				# "RF_Eucl_results_New_Rep13_100-1000.txt",#
				# "RF_Eucl_results_New_Rep14_100-1000.txt",#
				# "RF_Eucl_results_New_Rep15_100-1000.txt",#
				# "RF_Eucl_results_New_Rep16_100-1000.txt",#
				# "RF_Eucl_results_New_Rep17_100-1000.txt",#
				# "RF_Eucl_results_New_Rep18_100-1000.txt",#
				# "RF_Eucl_results_New_Rep19_100-1000.txt",#
				# "RF_Eucl_results_New_Rep20_100-1000.txt"#
				)#
#
dat <- NULL#
for(i in 1:length(infiles.a)){#
	temp.dat1 <- read.csv(infiles.a[i], header=TRUE, stringsAsFactors=FALSE)#
	temp.dat1$uniqueID <- paste(temp.dat1$species, temp.dat1$samp.size, temp.dat1$search.algo, temp.dat1$part.IC, sep="_")#
	temp.dat2 <- read.table(infiles.b[i], header=TRUE, stringsAsFactors=FALSE)#
	temp.dat2$uniqueID <- make.merge.id(temp.dat2)#
	temp.dat <- merge(temp.dat1, temp.dat2, by="uniqueID")#
	temp.dat$gene.size <- 100#
	temp.dat$mut.rate <- 1000#
	temp.dat$replicate <- i#
	dat <- rbind(dat, temp.dat)#
}#
#
#####################################
samp.size.col <- c("steelblue4", "darkorange2", "green4", "red3")#
samp.sizes <- c(10,20,40,80)#
#####################################
ylim1 <- c(-0.05, 0.05)#
ylim2 <- c(-0.75, 0.75)#
pdf("Results_Plots/Boxplots.pdf", width=6, height=8)#
par(mfrow=c(2,2), mar=c(4,4,1.5,0.5))#
part.crit <- "AIC"#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="diff in RF dist from true tree for 'no part' - 'part'", main="Lophotrochozoa")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="", main="Myriapoda")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="diff in eucl dist from true tree for 'no part' - 'part'", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
part.crit <- "BIC"#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="diff in RF dist from true tree for 'no part' - 'part'", main="Lophotrochozoa")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="", main="Myriapoda")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="diff in eucl dist from true tree for 'no part' - 'part'", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
part.crit <- "AICc"#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="diff in RF dist from true tree for 'no part' - 'part'", main="Lophotrochozoa")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="", main="Myriapoda")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="diff in eucl dist from true tree for 'no part' - 'part'", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border="gray25")#
}#
dev.off()
?boxplot
box.width <- 1
library(scales)#
setwd("~/Documents/UNIL/PartitioningMethods_SimulationProject/FunctioningPipeline/AnalysisResults")#
make.merge.id <- function(dat){#
	id.col <- rep(NA, dim(dat)[1])#
	for(i in 1:dim(dat)[1]){#
		if(length(grep("lopho", dat$file[i])) > 0) spp <- "lopho_"#
		if(length(grep("myria", dat$file[i])) > 0) spp <- "myria_"#
		if(length(grep("10", dat$file[i])) > 0) samp <- "10_"#
		if(length(grep("20", dat$file[i])) > 0) samp <- "20_"#
		if(length(grep("40", dat$file[i])) > 0) samp <- "40_"#
		if(length(grep("80", dat$file[i])) > 0) samp <- "80_"#
		if(length(grep("rcluster", dat$file[i])) > 0) algo <- "rcluster_"#
		if(length(grep("greedy", dat$file[i])) > 0) algo <- "greedy_"#
		if(length(grep("noPart", dat$file[i])) > 0) algo <- "noPart_"#
		if(length(grep("AIC", dat$file[i])) > 0) crit <- "AIC"#
		if(length(grep("AICc", dat$file[i])) > 0) crit <- "AICc"#
		if(length(grep("BIC", dat$file[i])) > 0) crit <- "BIC"#
		if(length(grep("noPart", dat$file[i])) > 0) crit <- "noPart"#
		id.col[i] <- paste(c(spp, samp, algo, crit), collapse="")#
	}#
	return(id.col)#
}#
#####################################
#
get.rep.difference <- function(dat, rep, samp.size, spp, partitioning.criterion, distance){#
	temp.dat <- dat[dat$replicate == rep & dat$samp.size == samp.size & dat$species == spp , ]#
	no.part.result <- temp.dat[temp.dat$search.algo == "noPart" ,]#
	rclust.AIC.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "AIC" ,]#
	rclust.BIC.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "BIC" ,]#
	rclust.AICc.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "AICc",]#
	if(partitioning.criterion == "AIC"){#
		if(dim(rclust.AIC.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.AIC.result[distance] }#
	}#
	if(partitioning.criterion == "BIC"){#
		if(dim(rclust.BIC.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.BIC.result[distance] }#
	}#
	if(partitioning.criterion == "AICc"){#
		if(dim(rclust.AICc.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.AICc.result[distance] }#
	}#
	return(as.numeric(difference))			#
}#
#
#####################################
#
get.boxplot.dat <- function(dat, samp.size, spp, partitioning.criterion, distance){	#
	samp.size.dists <- NULL#
	for(j in unique(dat$replicate)){#
		dist <- get.rep.difference(dat, rep=j, samp.size=samp.size, spp=spp, partitioning.criterion=partitioning.criterion, distance=distance)#
		samp.size.dists <- c(samp.size.dists, dist)#
	}#
	return(samp.size.dists)#
}#
#
#####################################
# # # mut rate 500#
# dat1 <- read.csv("AllStatsOutput_New_Rep1_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
# dat1$uniqueID <- paste(dat1$species, dat1$samp.size, dat1$search.algo, dat1$part.IC, sep="_")#
# dat1b <- read.table("RF_Eucl_results_New_Rep1_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
# dat1b$uniqueID <- make.merge.id(dat1b)#
# dat <- merge(dat1, dat1b, by="uniqueID")#
# dat$gene.size <- 100#
# dat$mut.rate <- 500#
# dat1 <- dat#
# mut rate 1000#
#
infiles.a <- c("AllStatsOutput_New_Rep1_100-1000.csv",#
				"AllStatsOutput_New_Rep2_100-1000.csv",#
				"AllStatsOutput_New_Rep3_100-1000.csv",#
				"AllStatsOutput_New_Rep4_100-1000.csv",#
				"AllStatsOutput_New_Rep5_100-1000.csv",#
				"AllStatsOutput_New_Rep6_100-1000.csv"#,#
				#"AllStatsOutput_New_Rep1_100-500.csv",#
				#"AllStatsOutput_New_Rep2_100-500.csv",#
				#"AllStatsOutput_New_Rep3_100-500.csv",#
				#"AllStatsOutput_New_Rep4_100-500.csv",#
				#"AllStatsOutput_New_Rep5_100-500.csv",#
				#"AllStatsOutput_New_Rep6_100-500.csv",#
				"AllStatsOutput_Newest_Rep7_100-1000.csv"#,#
				# "AllStatsOutput_Newest_Rep8_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep9_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep10_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep11_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep12_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep13_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep14_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep15_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep16_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep17_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep18_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep19_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep20_100-1000.csv"#
				)#
infiles.b <- c("RF_Eucl_results_New_Rep1_100-1000.txt",#
				"RF_Eucl_results_New_Rep2_100-1000.txt",#
				"RF_Eucl_results_New_Rep3_100-1000.txt",#
				"RF_Eucl_results_New_Rep4_100-1000.txt",#
				"RF_Eucl_results_New_Rep5_100-1000.txt",#
				"RF_Eucl_results_New_Rep6_100-1000.txt",#
				#"RF_Eucl_results_New_Rep1_100-500.txt",#
				#"RF_Eucl_results_New_Rep2_100-500.txt",#
				#"RF_Eucl_results_New_Rep3_100-500.txt",#
				#"RF_Eucl_results_New_Rep4_100-500.txt",#
				#"RF_Eucl_results_New_Rep5_100-500.txt",#
				#"RF_Eucl_results_New_Rep6_100-500.txt",#
				"RF_Eucl_results_New_Rep7_100-1000.txt"#,#
				# "RF_Eucl_results_New_Rep8_100-1000.txt",#
				# "RF_Eucl_results_New_Rep9_100-1000.txt",#
				# "RF_Eucl_results_New_Rep10_100-1000.txt",#
				# "RF_Eucl_results_New_Rep11_100-1000.txt",#
				# "RF_Eucl_results_New_Rep12_100-1000.txt",#
				# "RF_Eucl_results_New_Rep13_100-1000.txt",#
				# "RF_Eucl_results_New_Rep14_100-1000.txt",#
				# "RF_Eucl_results_New_Rep15_100-1000.txt",#
				# "RF_Eucl_results_New_Rep16_100-1000.txt",#
				# "RF_Eucl_results_New_Rep17_100-1000.txt",#
				# "RF_Eucl_results_New_Rep18_100-1000.txt",#
				# "RF_Eucl_results_New_Rep19_100-1000.txt",#
				# "RF_Eucl_results_New_Rep20_100-1000.txt"#
				)#
#
dat <- NULL#
for(i in 1:length(infiles.a)){#
	temp.dat1 <- read.csv(infiles.a[i], header=TRUE, stringsAsFactors=FALSE)#
	temp.dat1$uniqueID <- paste(temp.dat1$species, temp.dat1$samp.size, temp.dat1$search.algo, temp.dat1$part.IC, sep="_")#
	temp.dat2 <- read.table(infiles.b[i], header=TRUE, stringsAsFactors=FALSE)#
	temp.dat2$uniqueID <- make.merge.id(temp.dat2)#
	temp.dat <- merge(temp.dat1, temp.dat2, by="uniqueID")#
	temp.dat$gene.size <- 100#
	temp.dat$mut.rate <- 1000#
	temp.dat$replicate <- i#
	dat <- rbind(dat, temp.dat)#
}#
#
#####################################
samp.size.col <- c("steelblue4", "darkorange2", "green4", "red3")#
outline.col <- "gray50"#
samp.sizes <- c(10,20,40,80)#
#####################################
ylim1 <- c(-0.05, 0.05)#
ylim2 <- c(-0.75, 0.75)#
box.width <- 1#
pdf("Results_Plots/Boxplots.pdf", width=6, height=8)#
par(mfrow=c(2,2), mar=c(4,4,1.5,0.5))#
part.crit <- "AIC"#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="diff in RF dist from true tree for 'no part' - 'part'", main="Lophotrochozoa")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="", main="Myriapoda")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="diff in eucl dist from true tree for 'no part' - 'part'", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
part.crit <- "BIC"#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="diff in RF dist from true tree for 'no part' - 'part'", main="Lophotrochozoa")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="", main="Myriapoda")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="diff in eucl dist from true tree for 'no part' - 'part'", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
part.crit <- "AICc"#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="diff in RF dist from true tree for 'no part' - 'part'", main="Lophotrochozoa")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="", main="Myriapoda")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="diff in eucl dist from true tree for 'no part' - 'part'", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
dev.off()
library(scales)#
setwd("~/Documents/UNIL/PartitioningMethods_SimulationProject/FunctioningPipeline/AnalysisResults")#
make.merge.id <- function(dat){#
	id.col <- rep(NA, dim(dat)[1])#
	for(i in 1:dim(dat)[1]){#
		if(length(grep("lopho", dat$file[i])) > 0) spp <- "lopho_"#
		if(length(grep("myria", dat$file[i])) > 0) spp <- "myria_"#
		if(length(grep("10", dat$file[i])) > 0) samp <- "10_"#
		if(length(grep("20", dat$file[i])) > 0) samp <- "20_"#
		if(length(grep("40", dat$file[i])) > 0) samp <- "40_"#
		if(length(grep("80", dat$file[i])) > 0) samp <- "80_"#
		if(length(grep("rcluster", dat$file[i])) > 0) algo <- "rcluster_"#
		if(length(grep("greedy", dat$file[i])) > 0) algo <- "greedy_"#
		if(length(grep("noPart", dat$file[i])) > 0) algo <- "noPart_"#
		if(length(grep("AIC", dat$file[i])) > 0) crit <- "AIC"#
		if(length(grep("AICc", dat$file[i])) > 0) crit <- "AICc"#
		if(length(grep("BIC", dat$file[i])) > 0) crit <- "BIC"#
		if(length(grep("noPart", dat$file[i])) > 0) crit <- "noPart"#
		id.col[i] <- paste(c(spp, samp, algo, crit), collapse="")#
	}#
	return(id.col)#
}#
#####################################
#
get.rep.difference <- function(dat, rep, samp.size, spp, partitioning.criterion, distance){#
	temp.dat <- dat[dat$replicate == rep & dat$samp.size == samp.size & dat$species == spp , ]#
	no.part.result <- temp.dat[temp.dat$search.algo == "noPart" ,]#
	rclust.AIC.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "AIC" ,]#
	rclust.BIC.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "BIC" ,]#
	rclust.AICc.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "AICc",]#
	if(partitioning.criterion == "AIC"){#
		if(dim(rclust.AIC.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.AIC.result[distance] }#
	}#
	if(partitioning.criterion == "BIC"){#
		if(dim(rclust.BIC.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.BIC.result[distance] }#
	}#
	if(partitioning.criterion == "AICc"){#
		if(dim(rclust.AICc.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.AICc.result[distance] }#
	}#
	return(as.numeric(difference))			#
}#
#
#####################################
#
get.boxplot.dat <- function(dat, samp.size, spp, partitioning.criterion, distance){	#
	samp.size.dists <- NULL#
	for(j in unique(dat$replicate)){#
		dist <- get.rep.difference(dat, rep=j, samp.size=samp.size, spp=spp, partitioning.criterion=partitioning.criterion, distance=distance)#
		samp.size.dists <- c(samp.size.dists, dist)#
	}#
	return(samp.size.dists)#
}#
#
#####################################
# # # mut rate 500#
# dat1 <- read.csv("AllStatsOutput_New_Rep1_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
# dat1$uniqueID <- paste(dat1$species, dat1$samp.size, dat1$search.algo, dat1$part.IC, sep="_")#
# dat1b <- read.table("RF_Eucl_results_New_Rep1_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
# dat1b$uniqueID <- make.merge.id(dat1b)#
# dat <- merge(dat1, dat1b, by="uniqueID")#
# dat$gene.size <- 100#
# dat$mut.rate <- 500#
# dat1 <- dat#
# mut rate 1000#
#
infiles.a <- c("AllStatsOutput_New_Rep1_100-1000.csv",#
				"AllStatsOutput_New_Rep2_100-1000.csv",#
				"AllStatsOutput_New_Rep3_100-1000.csv",#
				"AllStatsOutput_New_Rep4_100-1000.csv",#
				"AllStatsOutput_New_Rep5_100-1000.csv",#
				"AllStatsOutput_New_Rep6_100-1000.csv"#,#
				#"AllStatsOutput_New_Rep1_100-500.csv",#
				#"AllStatsOutput_New_Rep2_100-500.csv",#
				#"AllStatsOutput_New_Rep3_100-500.csv",#
				#"AllStatsOutput_New_Rep4_100-500.csv",#
				#"AllStatsOutput_New_Rep5_100-500.csv",#
				#"AllStatsOutput_New_Rep6_100-500.csv",#
				"AllStatsOutput_Newest_Rep7_100-1000.csv"#,#
				# "AllStatsOutput_Newest_Rep8_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep9_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep10_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep11_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep12_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep13_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep14_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep15_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep16_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep17_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep18_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep19_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep20_100-1000.csv"#
				)#
infiles.b <- c("RF_Eucl_results_New_Rep1_100-1000.txt",#
				"RF_Eucl_results_New_Rep2_100-1000.txt",#
				"RF_Eucl_results_New_Rep3_100-1000.txt",#
				"RF_Eucl_results_New_Rep4_100-1000.txt",#
				"RF_Eucl_results_New_Rep5_100-1000.txt",#
				"RF_Eucl_results_New_Rep6_100-1000.txt",#
				#"RF_Eucl_results_New_Rep1_100-500.txt",#
				#"RF_Eucl_results_New_Rep2_100-500.txt",#
				#"RF_Eucl_results_New_Rep3_100-500.txt",#
				#"RF_Eucl_results_New_Rep4_100-500.txt",#
				#"RF_Eucl_results_New_Rep5_100-500.txt",#
				#"RF_Eucl_results_New_Rep6_100-500.txt",#
				"RF_Eucl_results_New_Rep7_100-1000.txt"#,#
				# "RF_Eucl_results_New_Rep8_100-1000.txt",#
				# "RF_Eucl_results_New_Rep9_100-1000.txt",#
				# "RF_Eucl_results_New_Rep10_100-1000.txt",#
				# "RF_Eucl_results_New_Rep11_100-1000.txt",#
				# "RF_Eucl_results_New_Rep12_100-1000.txt",#
				# "RF_Eucl_results_New_Rep13_100-1000.txt",#
				# "RF_Eucl_results_New_Rep14_100-1000.txt",#
				# "RF_Eucl_results_New_Rep15_100-1000.txt",#
				# "RF_Eucl_results_New_Rep16_100-1000.txt",#
				# "RF_Eucl_results_New_Rep17_100-1000.txt",#
				# "RF_Eucl_results_New_Rep18_100-1000.txt",#
				# "RF_Eucl_results_New_Rep19_100-1000.txt",#
				# "RF_Eucl_results_New_Rep20_100-1000.txt"#
				)#
#
dat <- NULL#
for(i in 1:length(infiles.a)){#
	temp.dat1 <- read.csv(infiles.a[i], header=TRUE, stringsAsFactors=FALSE)#
	temp.dat1$uniqueID <- paste(temp.dat1$species, temp.dat1$samp.size, temp.dat1$search.algo, temp.dat1$part.IC, sep="_")#
	temp.dat2 <- read.table(infiles.b[i], header=TRUE, stringsAsFactors=FALSE)#
	temp.dat2$uniqueID <- make.merge.id(temp.dat2)#
	temp.dat <- merge(temp.dat1, temp.dat2, by="uniqueID")#
	temp.dat$gene.size <- 100#
	temp.dat$mut.rate <- 1000#
	temp.dat$replicate <- i#
	dat <- rbind(dat, temp.dat)#
}#
#
#####################################
samp.size.col <- c("steelblue4", "darkorange2", "green4", "red3")#
outline.col <- "gray50"#
samp.sizes <- c(10,20,40,80)#
#####################################
ylim1 <- c(-0.05, 0.05)#
ylim2 <- c(-0.75, 0.75)#
box.width <- 1#
pdf("Results_Plots/Boxplots.pdf", width=6, height=8)#
par(mfrow=c(2,2), mar=c(4,4,1.5,0.5))#
part.crit <- "AIC"#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="diff in RF dist from true tree for 'no part' - 'part'", main="Lophotrochozoa")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width, lwd=1)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="", main="Myriapoda")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="diff in eucl dist from true tree for 'no part' - 'part'", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
part.crit <- "BIC"#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="diff in RF dist from true tree for 'no part' - 'part'", main="Lophotrochozoa")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="", main="Myriapoda")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="diff in eucl dist from true tree for 'no part' - 'part'", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
part.crit <- "AICc"#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="diff in RF dist from true tree for 'no part' - 'part'", main="Lophotrochozoa")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="", main="Myriapoda")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="diff in eucl dist from true tree for 'no part' - 'part'", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
dev.off()
library(scales)#
setwd("~/Documents/UNIL/PartitioningMethods_SimulationProject/FunctioningPipeline/AnalysisResults")#
make.merge.id <- function(dat){#
	id.col <- rep(NA, dim(dat)[1])#
	for(i in 1:dim(dat)[1]){#
		if(length(grep("lopho", dat$file[i])) > 0) spp <- "lopho_"#
		if(length(grep("myria", dat$file[i])) > 0) spp <- "myria_"#
		if(length(grep("10", dat$file[i])) > 0) samp <- "10_"#
		if(length(grep("20", dat$file[i])) > 0) samp <- "20_"#
		if(length(grep("40", dat$file[i])) > 0) samp <- "40_"#
		if(length(grep("80", dat$file[i])) > 0) samp <- "80_"#
		if(length(grep("rcluster", dat$file[i])) > 0) algo <- "rcluster_"#
		if(length(grep("greedy", dat$file[i])) > 0) algo <- "greedy_"#
		if(length(grep("noPart", dat$file[i])) > 0) algo <- "noPart_"#
		if(length(grep("AIC", dat$file[i])) > 0) crit <- "AIC"#
		if(length(grep("AICc", dat$file[i])) > 0) crit <- "AICc"#
		if(length(grep("BIC", dat$file[i])) > 0) crit <- "BIC"#
		if(length(grep("noPart", dat$file[i])) > 0) crit <- "noPart"#
		id.col[i] <- paste(c(spp, samp, algo, crit), collapse="")#
	}#
	return(id.col)#
}#
#####################################
#
get.rep.difference <- function(dat, rep, samp.size, spp, partitioning.criterion, distance){#
	temp.dat <- dat[dat$replicate == rep & dat$samp.size == samp.size & dat$species == spp , ]#
	no.part.result <- temp.dat[temp.dat$search.algo == "noPart" ,]#
	rclust.AIC.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "AIC" ,]#
	rclust.BIC.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "BIC" ,]#
	rclust.AICc.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "AICc",]#
	if(partitioning.criterion == "AIC"){#
		if(dim(rclust.AIC.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.AIC.result[distance] }#
	}#
	if(partitioning.criterion == "BIC"){#
		if(dim(rclust.BIC.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.BIC.result[distance] }#
	}#
	if(partitioning.criterion == "AICc"){#
		if(dim(rclust.AICc.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.AICc.result[distance] }#
	}#
	return(as.numeric(difference))			#
}#
#
#####################################
#
get.boxplot.dat <- function(dat, samp.size, spp, partitioning.criterion, distance){	#
	samp.size.dists <- NULL#
	for(j in unique(dat$replicate)){#
		dist <- get.rep.difference(dat, rep=j, samp.size=samp.size, spp=spp, partitioning.criterion=partitioning.criterion, distance=distance)#
		samp.size.dists <- c(samp.size.dists, dist)#
	}#
	return(samp.size.dists)#
}#
#
#####################################
# # # mut rate 500#
# dat1 <- read.csv("AllStatsOutput_New_Rep1_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
# dat1$uniqueID <- paste(dat1$species, dat1$samp.size, dat1$search.algo, dat1$part.IC, sep="_")#
# dat1b <- read.table("RF_Eucl_results_New_Rep1_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
# dat1b$uniqueID <- make.merge.id(dat1b)#
# dat <- merge(dat1, dat1b, by="uniqueID")#
# dat$gene.size <- 100#
# dat$mut.rate <- 500#
# dat1 <- dat#
# mut rate 1000#
#
infiles.a <- c("AllStatsOutput_New_Rep1_100-1000.csv",#
				"AllStatsOutput_New_Rep2_100-1000.csv",#
				"AllStatsOutput_New_Rep3_100-1000.csv",#
				"AllStatsOutput_New_Rep4_100-1000.csv",#
				"AllStatsOutput_New_Rep5_100-1000.csv",#
				"AllStatsOutput_New_Rep6_100-1000.csv"#,#
				#"AllStatsOutput_New_Rep1_100-500.csv",#
				#"AllStatsOutput_New_Rep2_100-500.csv",#
				#"AllStatsOutput_New_Rep3_100-500.csv",#
				#"AllStatsOutput_New_Rep4_100-500.csv",#
				#"AllStatsOutput_New_Rep5_100-500.csv",#
				#"AllStatsOutput_New_Rep6_100-500.csv",#
				"AllStatsOutput_Newest_Rep7_100-1000.csv"#,#
				# "AllStatsOutput_Newest_Rep8_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep9_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep10_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep11_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep12_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep13_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep14_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep15_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep16_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep17_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep18_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep19_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep20_100-1000.csv"#
				)#
infiles.b <- c("RF_Eucl_results_New_Rep1_100-1000.txt",#
				"RF_Eucl_results_New_Rep2_100-1000.txt",#
				"RF_Eucl_results_New_Rep3_100-1000.txt",#
				"RF_Eucl_results_New_Rep4_100-1000.txt",#
				"RF_Eucl_results_New_Rep5_100-1000.txt",#
				"RF_Eucl_results_New_Rep6_100-1000.txt",#
				#"RF_Eucl_results_New_Rep1_100-500.txt",#
				#"RF_Eucl_results_New_Rep2_100-500.txt",#
				#"RF_Eucl_results_New_Rep3_100-500.txt",#
				#"RF_Eucl_results_New_Rep4_100-500.txt",#
				#"RF_Eucl_results_New_Rep5_100-500.txt",#
				#"RF_Eucl_results_New_Rep6_100-500.txt",#
				"RF_Eucl_results_New_Rep7_100-1000.txt"#,#
				# "RF_Eucl_results_New_Rep8_100-1000.txt",#
				# "RF_Eucl_results_New_Rep9_100-1000.txt",#
				# "RF_Eucl_results_New_Rep10_100-1000.txt",#
				# "RF_Eucl_results_New_Rep11_100-1000.txt",#
				# "RF_Eucl_results_New_Rep12_100-1000.txt",#
				# "RF_Eucl_results_New_Rep13_100-1000.txt",#
				# "RF_Eucl_results_New_Rep14_100-1000.txt",#
				# "RF_Eucl_results_New_Rep15_100-1000.txt",#
				# "RF_Eucl_results_New_Rep16_100-1000.txt",#
				# "RF_Eucl_results_New_Rep17_100-1000.txt",#
				# "RF_Eucl_results_New_Rep18_100-1000.txt",#
				# "RF_Eucl_results_New_Rep19_100-1000.txt",#
				# "RF_Eucl_results_New_Rep20_100-1000.txt"#
				)#
#
dat <- NULL#
for(i in 1:length(infiles.a)){#
	temp.dat1 <- read.csv(infiles.a[i], header=TRUE, stringsAsFactors=FALSE)#
	temp.dat1$uniqueID <- paste(temp.dat1$species, temp.dat1$samp.size, temp.dat1$search.algo, temp.dat1$part.IC, sep="_")#
	temp.dat2 <- read.table(infiles.b[i], header=TRUE, stringsAsFactors=FALSE)#
	temp.dat2$uniqueID <- make.merge.id(temp.dat2)#
	temp.dat <- merge(temp.dat1, temp.dat2, by="uniqueID")#
	temp.dat$gene.size <- 100#
	temp.dat$mut.rate <- 1000#
	temp.dat$replicate <- i#
	dat <- rbind(dat, temp.dat)#
}#
#
#####################################
samp.size.col <- c("steelblue4", "darkorange2", "green4", "red3")#
outline.col <- "gray40"#
samp.sizes <- c(10,20,40,80)#
#####################################
ylim1 <- c(-0.05, 0.05)#
ylim2 <- c(-0.75, 0.75)#
box.width <- 1#
pdf("Results_Plots/Boxplots.pdf", width=6, height=8)#
par(mfrow=c(2,2), mar=c(4,4,1.5,0.5))#
part.crit <- "AIC"#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="diff in RF dist from true tree for 'no part' - 'part'", main="Lophotrochozoa")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width, lty=1)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="", main="Myriapoda")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="diff in eucl dist from true tree for 'no part' - 'part'", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
part.crit <- "BIC"#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="diff in RF dist from true tree for 'no part' - 'part'", main="Lophotrochozoa")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="", main="Myriapoda")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="diff in eucl dist from true tree for 'no part' - 'part'", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
part.crit <- "AICc"#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="diff in RF dist from true tree for 'no part' - 'part'", main="Lophotrochozoa")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="", main="Myriapoda")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="diff in eucl dist from true tree for 'no part' - 'part'", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
dev.off()
library(scales)#
setwd("~/Documents/UNIL/PartitioningMethods_SimulationProject/FunctioningPipeline/AnalysisResults")#
make.merge.id <- function(dat){#
	id.col <- rep(NA, dim(dat)[1])#
	for(i in 1:dim(dat)[1]){#
		if(length(grep("lopho", dat$file[i])) > 0) spp <- "lopho_"#
		if(length(grep("myria", dat$file[i])) > 0) spp <- "myria_"#
		if(length(grep("10", dat$file[i])) > 0) samp <- "10_"#
		if(length(grep("20", dat$file[i])) > 0) samp <- "20_"#
		if(length(grep("40", dat$file[i])) > 0) samp <- "40_"#
		if(length(grep("80", dat$file[i])) > 0) samp <- "80_"#
		if(length(grep("rcluster", dat$file[i])) > 0) algo <- "rcluster_"#
		if(length(grep("greedy", dat$file[i])) > 0) algo <- "greedy_"#
		if(length(grep("noPart", dat$file[i])) > 0) algo <- "noPart_"#
		if(length(grep("AIC", dat$file[i])) > 0) crit <- "AIC"#
		if(length(grep("AICc", dat$file[i])) > 0) crit <- "AICc"#
		if(length(grep("BIC", dat$file[i])) > 0) crit <- "BIC"#
		if(length(grep("noPart", dat$file[i])) > 0) crit <- "noPart"#
		id.col[i] <- paste(c(spp, samp, algo, crit), collapse="")#
	}#
	return(id.col)#
}#
#####################################
#
get.rep.difference <- function(dat, rep, samp.size, spp, partitioning.criterion, distance){#
	temp.dat <- dat[dat$replicate == rep & dat$samp.size == samp.size & dat$species == spp , ]#
	no.part.result <- temp.dat[temp.dat$search.algo == "noPart" ,]#
	rclust.AIC.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "AIC" ,]#
	rclust.BIC.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "BIC" ,]#
	rclust.AICc.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "AICc",]#
	if(partitioning.criterion == "AIC"){#
		if(dim(rclust.AIC.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.AIC.result[distance] }#
	}#
	if(partitioning.criterion == "BIC"){#
		if(dim(rclust.BIC.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.BIC.result[distance] }#
	}#
	if(partitioning.criterion == "AICc"){#
		if(dim(rclust.AICc.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.AICc.result[distance] }#
	}#
	return(as.numeric(difference))			#
}#
#
#####################################
#
get.boxplot.dat <- function(dat, samp.size, spp, partitioning.criterion, distance){	#
	samp.size.dists <- NULL#
	for(j in unique(dat$replicate)){#
		dist <- get.rep.difference(dat, rep=j, samp.size=samp.size, spp=spp, partitioning.criterion=partitioning.criterion, distance=distance)#
		samp.size.dists <- c(samp.size.dists, dist)#
	}#
	return(samp.size.dists)#
}#
#
#####################################
# # # mut rate 500#
# dat1 <- read.csv("AllStatsOutput_New_Rep1_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
# dat1$uniqueID <- paste(dat1$species, dat1$samp.size, dat1$search.algo, dat1$part.IC, sep="_")#
# dat1b <- read.table("RF_Eucl_results_New_Rep1_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
# dat1b$uniqueID <- make.merge.id(dat1b)#
# dat <- merge(dat1, dat1b, by="uniqueID")#
# dat$gene.size <- 100#
# dat$mut.rate <- 500#
# dat1 <- dat#
# mut rate 1000#
#
infiles.a <- c("AllStatsOutput_New_Rep1_100-1000.csv",#
				"AllStatsOutput_New_Rep2_100-1000.csv",#
				"AllStatsOutput_New_Rep3_100-1000.csv",#
				"AllStatsOutput_New_Rep4_100-1000.csv",#
				"AllStatsOutput_New_Rep5_100-1000.csv",#
				"AllStatsOutput_New_Rep6_100-1000.csv"#,#
				#"AllStatsOutput_New_Rep1_100-500.csv",#
				#"AllStatsOutput_New_Rep2_100-500.csv",#
				#"AllStatsOutput_New_Rep3_100-500.csv",#
				#"AllStatsOutput_New_Rep4_100-500.csv",#
				#"AllStatsOutput_New_Rep5_100-500.csv",#
				#"AllStatsOutput_New_Rep6_100-500.csv",#
				"AllStatsOutput_Newest_Rep7_100-1000.csv"#,#
				# "AllStatsOutput_Newest_Rep8_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep9_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep10_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep11_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep12_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep13_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep14_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep15_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep16_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep17_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep18_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep19_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep20_100-1000.csv"#
				)#
infiles.b <- c("RF_Eucl_results_New_Rep1_100-1000.txt",#
				"RF_Eucl_results_New_Rep2_100-1000.txt",#
				"RF_Eucl_results_New_Rep3_100-1000.txt",#
				"RF_Eucl_results_New_Rep4_100-1000.txt",#
				"RF_Eucl_results_New_Rep5_100-1000.txt",#
				"RF_Eucl_results_New_Rep6_100-1000.txt",#
				#"RF_Eucl_results_New_Rep1_100-500.txt",#
				#"RF_Eucl_results_New_Rep2_100-500.txt",#
				#"RF_Eucl_results_New_Rep3_100-500.txt",#
				#"RF_Eucl_results_New_Rep4_100-500.txt",#
				#"RF_Eucl_results_New_Rep5_100-500.txt",#
				#"RF_Eucl_results_New_Rep6_100-500.txt",#
				"RF_Eucl_results_New_Rep7_100-1000.txt"#,#
				# "RF_Eucl_results_New_Rep8_100-1000.txt",#
				# "RF_Eucl_results_New_Rep9_100-1000.txt",#
				# "RF_Eucl_results_New_Rep10_100-1000.txt",#
				# "RF_Eucl_results_New_Rep11_100-1000.txt",#
				# "RF_Eucl_results_New_Rep12_100-1000.txt",#
				# "RF_Eucl_results_New_Rep13_100-1000.txt",#
				# "RF_Eucl_results_New_Rep14_100-1000.txt",#
				# "RF_Eucl_results_New_Rep15_100-1000.txt",#
				# "RF_Eucl_results_New_Rep16_100-1000.txt",#
				# "RF_Eucl_results_New_Rep17_100-1000.txt",#
				# "RF_Eucl_results_New_Rep18_100-1000.txt",#
				# "RF_Eucl_results_New_Rep19_100-1000.txt",#
				# "RF_Eucl_results_New_Rep20_100-1000.txt"#
				)#
#
dat <- NULL#
for(i in 1:length(infiles.a)){#
	temp.dat1 <- read.csv(infiles.a[i], header=TRUE, stringsAsFactors=FALSE)#
	temp.dat1$uniqueID <- paste(temp.dat1$species, temp.dat1$samp.size, temp.dat1$search.algo, temp.dat1$part.IC, sep="_")#
	temp.dat2 <- read.table(infiles.b[i], header=TRUE, stringsAsFactors=FALSE)#
	temp.dat2$uniqueID <- make.merge.id(temp.dat2)#
	temp.dat <- merge(temp.dat1, temp.dat2, by="uniqueID")#
	temp.dat$gene.size <- 100#
	temp.dat$mut.rate <- 1000#
	temp.dat$replicate <- i#
	dat <- rbind(dat, temp.dat)#
}#
#
#####################################
samp.size.col <- c("steelblue4", "darkorange2", "green4", "red3")#
outline.col <- "gray40"#
samp.sizes <- c(10,20,40,80)#
#####################################
ylim1 <- c(-0.05, 0.05)#
ylim2 <- c(-0.75, 0.75)#
box.width <- 1#
pdf("Results_Plots/Boxplots.pdf", width=6, height=8)#
par(mfrow=c(2,2), mar=c(4,4,1.5,0.5))#
part.crit <- "AIC"#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="diff in RF dist from true tree for 'no part' - 'part'", main="Lophotrochozoa")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width, lty=1, staplewex=0.5)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="", main="Myriapoda")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="diff in eucl dist from true tree for 'no part' - 'part'", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
part.crit <- "BIC"#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="diff in RF dist from true tree for 'no part' - 'part'", main="Lophotrochozoa")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="", main="Myriapoda")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="diff in eucl dist from true tree for 'no part' - 'part'", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
part.crit <- "AICc"#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="diff in RF dist from true tree for 'no part' - 'part'", main="Lophotrochozoa")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="", main="Myriapoda")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="diff in eucl dist from true tree for 'no part' - 'part'", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
dev.off()
library(scales)#
setwd("~/Documents/UNIL/PartitioningMethods_SimulationProject/FunctioningPipeline/AnalysisResults")#
make.merge.id <- function(dat){#
	id.col <- rep(NA, dim(dat)[1])#
	for(i in 1:dim(dat)[1]){#
		if(length(grep("lopho", dat$file[i])) > 0) spp <- "lopho_"#
		if(length(grep("myria", dat$file[i])) > 0) spp <- "myria_"#
		if(length(grep("10", dat$file[i])) > 0) samp <- "10_"#
		if(length(grep("20", dat$file[i])) > 0) samp <- "20_"#
		if(length(grep("40", dat$file[i])) > 0) samp <- "40_"#
		if(length(grep("80", dat$file[i])) > 0) samp <- "80_"#
		if(length(grep("rcluster", dat$file[i])) > 0) algo <- "rcluster_"#
		if(length(grep("greedy", dat$file[i])) > 0) algo <- "greedy_"#
		if(length(grep("noPart", dat$file[i])) > 0) algo <- "noPart_"#
		if(length(grep("AIC", dat$file[i])) > 0) crit <- "AIC"#
		if(length(grep("AICc", dat$file[i])) > 0) crit <- "AICc"#
		if(length(grep("BIC", dat$file[i])) > 0) crit <- "BIC"#
		if(length(grep("noPart", dat$file[i])) > 0) crit <- "noPart"#
		id.col[i] <- paste(c(spp, samp, algo, crit), collapse="")#
	}#
	return(id.col)#
}#
#####################################
#
get.rep.difference <- function(dat, rep, samp.size, spp, partitioning.criterion, distance){#
	temp.dat <- dat[dat$replicate == rep & dat$samp.size == samp.size & dat$species == spp , ]#
	no.part.result <- temp.dat[temp.dat$search.algo == "noPart" ,]#
	rclust.AIC.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "AIC" ,]#
	rclust.BIC.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "BIC" ,]#
	rclust.AICc.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "AICc",]#
	if(partitioning.criterion == "AIC"){#
		if(dim(rclust.AIC.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.AIC.result[distance] }#
	}#
	if(partitioning.criterion == "BIC"){#
		if(dim(rclust.BIC.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.BIC.result[distance] }#
	}#
	if(partitioning.criterion == "AICc"){#
		if(dim(rclust.AICc.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.AICc.result[distance] }#
	}#
	return(as.numeric(difference))			#
}#
#
#####################################
#
get.boxplot.dat <- function(dat, samp.size, spp, partitioning.criterion, distance){	#
	samp.size.dists <- NULL#
	for(j in unique(dat$replicate)){#
		dist <- get.rep.difference(dat, rep=j, samp.size=samp.size, spp=spp, partitioning.criterion=partitioning.criterion, distance=distance)#
		samp.size.dists <- c(samp.size.dists, dist)#
	}#
	return(samp.size.dists)#
}#
#
#####################################
# # # mut rate 500#
# dat1 <- read.csv("AllStatsOutput_New_Rep1_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
# dat1$uniqueID <- paste(dat1$species, dat1$samp.size, dat1$search.algo, dat1$part.IC, sep="_")#
# dat1b <- read.table("RF_Eucl_results_New_Rep1_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
# dat1b$uniqueID <- make.merge.id(dat1b)#
# dat <- merge(dat1, dat1b, by="uniqueID")#
# dat$gene.size <- 100#
# dat$mut.rate <- 500#
# dat1 <- dat#
# mut rate 1000#
#
infiles.a <- c("AllStatsOutput_New_Rep1_100-1000.csv",#
				"AllStatsOutput_New_Rep2_100-1000.csv",#
				"AllStatsOutput_New_Rep3_100-1000.csv",#
				"AllStatsOutput_New_Rep4_100-1000.csv",#
				"AllStatsOutput_New_Rep5_100-1000.csv",#
				"AllStatsOutput_New_Rep6_100-1000.csv"#,#
				#"AllStatsOutput_New_Rep1_100-500.csv",#
				#"AllStatsOutput_New_Rep2_100-500.csv",#
				#"AllStatsOutput_New_Rep3_100-500.csv",#
				#"AllStatsOutput_New_Rep4_100-500.csv",#
				#"AllStatsOutput_New_Rep5_100-500.csv",#
				#"AllStatsOutput_New_Rep6_100-500.csv",#
				"AllStatsOutput_Newest_Rep7_100-1000.csv"#,#
				# "AllStatsOutput_Newest_Rep8_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep9_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep10_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep11_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep12_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep13_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep14_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep15_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep16_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep17_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep18_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep19_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep20_100-1000.csv"#
				)#
infiles.b <- c("RF_Eucl_results_New_Rep1_100-1000.txt",#
				"RF_Eucl_results_New_Rep2_100-1000.txt",#
				"RF_Eucl_results_New_Rep3_100-1000.txt",#
				"RF_Eucl_results_New_Rep4_100-1000.txt",#
				"RF_Eucl_results_New_Rep5_100-1000.txt",#
				"RF_Eucl_results_New_Rep6_100-1000.txt",#
				#"RF_Eucl_results_New_Rep1_100-500.txt",#
				#"RF_Eucl_results_New_Rep2_100-500.txt",#
				#"RF_Eucl_results_New_Rep3_100-500.txt",#
				#"RF_Eucl_results_New_Rep4_100-500.txt",#
				#"RF_Eucl_results_New_Rep5_100-500.txt",#
				#"RF_Eucl_results_New_Rep6_100-500.txt",#
				"RF_Eucl_results_New_Rep7_100-1000.txt"#,#
				# "RF_Eucl_results_New_Rep8_100-1000.txt",#
				# "RF_Eucl_results_New_Rep9_100-1000.txt",#
				# "RF_Eucl_results_New_Rep10_100-1000.txt",#
				# "RF_Eucl_results_New_Rep11_100-1000.txt",#
				# "RF_Eucl_results_New_Rep12_100-1000.txt",#
				# "RF_Eucl_results_New_Rep13_100-1000.txt",#
				# "RF_Eucl_results_New_Rep14_100-1000.txt",#
				# "RF_Eucl_results_New_Rep15_100-1000.txt",#
				# "RF_Eucl_results_New_Rep16_100-1000.txt",#
				# "RF_Eucl_results_New_Rep17_100-1000.txt",#
				# "RF_Eucl_results_New_Rep18_100-1000.txt",#
				# "RF_Eucl_results_New_Rep19_100-1000.txt",#
				# "RF_Eucl_results_New_Rep20_100-1000.txt"#
				)#
#
dat <- NULL#
for(i in 1:length(infiles.a)){#
	temp.dat1 <- read.csv(infiles.a[i], header=TRUE, stringsAsFactors=FALSE)#
	temp.dat1$uniqueID <- paste(temp.dat1$species, temp.dat1$samp.size, temp.dat1$search.algo, temp.dat1$part.IC, sep="_")#
	temp.dat2 <- read.table(infiles.b[i], header=TRUE, stringsAsFactors=FALSE)#
	temp.dat2$uniqueID <- make.merge.id(temp.dat2)#
	temp.dat <- merge(temp.dat1, temp.dat2, by="uniqueID")#
	temp.dat$gene.size <- 100#
	temp.dat$mut.rate <- 1000#
	temp.dat$replicate <- i#
	dat <- rbind(dat, temp.dat)#
}#
#
#####################################
samp.size.col <- c("steelblue4", "darkorange2", "green4", "red3")#
outline.col <- "gray40"#
samp.sizes <- c(10,20,40,80)#
#####################################
ylim1 <- c(-0.05, 0.05)#
ylim2 <- c(-0.75, 0.75)#
box.width <- 1#
pdf("Results_Plots/Boxplots.pdf", width=6, height=8)#
par(mfrow=c(2,2), mar=c(4,4,1.5,0.5))#
part.crit <- "AIC"#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="diff in RF dist from true tree for 'no part' - 'part'", main="Lophotrochozoa")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width, lty=1, staplewex=3.5)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="", main="Myriapoda")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="diff in eucl dist from true tree for 'no part' - 'part'", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
part.crit <- "BIC"#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="diff in RF dist from true tree for 'no part' - 'part'", main="Lophotrochozoa")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="", main="Myriapoda")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="diff in eucl dist from true tree for 'no part' - 'part'", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
part.crit <- "AICc"#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="diff in RF dist from true tree for 'no part' - 'part'", main="Lophotrochozoa")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="", main="Myriapoda")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="diff in eucl dist from true tree for 'no part' - 'part'", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
dev.off()
library(scales)#
setwd("~/Documents/UNIL/PartitioningMethods_SimulationProject/FunctioningPipeline/AnalysisResults")#
make.merge.id <- function(dat){#
	id.col <- rep(NA, dim(dat)[1])#
	for(i in 1:dim(dat)[1]){#
		if(length(grep("lopho", dat$file[i])) > 0) spp <- "lopho_"#
		if(length(grep("myria", dat$file[i])) > 0) spp <- "myria_"#
		if(length(grep("10", dat$file[i])) > 0) samp <- "10_"#
		if(length(grep("20", dat$file[i])) > 0) samp <- "20_"#
		if(length(grep("40", dat$file[i])) > 0) samp <- "40_"#
		if(length(grep("80", dat$file[i])) > 0) samp <- "80_"#
		if(length(grep("rcluster", dat$file[i])) > 0) algo <- "rcluster_"#
		if(length(grep("greedy", dat$file[i])) > 0) algo <- "greedy_"#
		if(length(grep("noPart", dat$file[i])) > 0) algo <- "noPart_"#
		if(length(grep("AIC", dat$file[i])) > 0) crit <- "AIC"#
		if(length(grep("AICc", dat$file[i])) > 0) crit <- "AICc"#
		if(length(grep("BIC", dat$file[i])) > 0) crit <- "BIC"#
		if(length(grep("noPart", dat$file[i])) > 0) crit <- "noPart"#
		id.col[i] <- paste(c(spp, samp, algo, crit), collapse="")#
	}#
	return(id.col)#
}#
#####################################
#
get.rep.difference <- function(dat, rep, samp.size, spp, partitioning.criterion, distance){#
	temp.dat <- dat[dat$replicate == rep & dat$samp.size == samp.size & dat$species == spp , ]#
	no.part.result <- temp.dat[temp.dat$search.algo == "noPart" ,]#
	rclust.AIC.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "AIC" ,]#
	rclust.BIC.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "BIC" ,]#
	rclust.AICc.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "AICc",]#
	if(partitioning.criterion == "AIC"){#
		if(dim(rclust.AIC.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.AIC.result[distance] }#
	}#
	if(partitioning.criterion == "BIC"){#
		if(dim(rclust.BIC.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.BIC.result[distance] }#
	}#
	if(partitioning.criterion == "AICc"){#
		if(dim(rclust.AICc.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.AICc.result[distance] }#
	}#
	return(as.numeric(difference))			#
}#
#
#####################################
#
get.boxplot.dat <- function(dat, samp.size, spp, partitioning.criterion, distance){	#
	samp.size.dists <- NULL#
	for(j in unique(dat$replicate)){#
		dist <- get.rep.difference(dat, rep=j, samp.size=samp.size, spp=spp, partitioning.criterion=partitioning.criterion, distance=distance)#
		samp.size.dists <- c(samp.size.dists, dist)#
	}#
	return(samp.size.dists)#
}#
#
#####################################
# # # mut rate 500#
# dat1 <- read.csv("AllStatsOutput_New_Rep1_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
# dat1$uniqueID <- paste(dat1$species, dat1$samp.size, dat1$search.algo, dat1$part.IC, sep="_")#
# dat1b <- read.table("RF_Eucl_results_New_Rep1_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
# dat1b$uniqueID <- make.merge.id(dat1b)#
# dat <- merge(dat1, dat1b, by="uniqueID")#
# dat$gene.size <- 100#
# dat$mut.rate <- 500#
# dat1 <- dat#
# mut rate 1000#
#
infiles.a <- c("AllStatsOutput_New_Rep1_100-1000.csv",#
				"AllStatsOutput_New_Rep2_100-1000.csv",#
				"AllStatsOutput_New_Rep3_100-1000.csv",#
				"AllStatsOutput_New_Rep4_100-1000.csv",#
				"AllStatsOutput_New_Rep5_100-1000.csv",#
				"AllStatsOutput_New_Rep6_100-1000.csv"#,#
				#"AllStatsOutput_New_Rep1_100-500.csv",#
				#"AllStatsOutput_New_Rep2_100-500.csv",#
				#"AllStatsOutput_New_Rep3_100-500.csv",#
				#"AllStatsOutput_New_Rep4_100-500.csv",#
				#"AllStatsOutput_New_Rep5_100-500.csv",#
				#"AllStatsOutput_New_Rep6_100-500.csv",#
				"AllStatsOutput_Newest_Rep7_100-1000.csv"#,#
				# "AllStatsOutput_Newest_Rep8_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep9_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep10_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep11_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep12_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep13_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep14_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep15_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep16_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep17_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep18_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep19_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep20_100-1000.csv"#
				)#
infiles.b <- c("RF_Eucl_results_New_Rep1_100-1000.txt",#
				"RF_Eucl_results_New_Rep2_100-1000.txt",#
				"RF_Eucl_results_New_Rep3_100-1000.txt",#
				"RF_Eucl_results_New_Rep4_100-1000.txt",#
				"RF_Eucl_results_New_Rep5_100-1000.txt",#
				"RF_Eucl_results_New_Rep6_100-1000.txt",#
				#"RF_Eucl_results_New_Rep1_100-500.txt",#
				#"RF_Eucl_results_New_Rep2_100-500.txt",#
				#"RF_Eucl_results_New_Rep3_100-500.txt",#
				#"RF_Eucl_results_New_Rep4_100-500.txt",#
				#"RF_Eucl_results_New_Rep5_100-500.txt",#
				#"RF_Eucl_results_New_Rep6_100-500.txt",#
				"RF_Eucl_results_New_Rep7_100-1000.txt"#,#
				# "RF_Eucl_results_New_Rep8_100-1000.txt",#
				# "RF_Eucl_results_New_Rep9_100-1000.txt",#
				# "RF_Eucl_results_New_Rep10_100-1000.txt",#
				# "RF_Eucl_results_New_Rep11_100-1000.txt",#
				# "RF_Eucl_results_New_Rep12_100-1000.txt",#
				# "RF_Eucl_results_New_Rep13_100-1000.txt",#
				# "RF_Eucl_results_New_Rep14_100-1000.txt",#
				# "RF_Eucl_results_New_Rep15_100-1000.txt",#
				# "RF_Eucl_results_New_Rep16_100-1000.txt",#
				# "RF_Eucl_results_New_Rep17_100-1000.txt",#
				# "RF_Eucl_results_New_Rep18_100-1000.txt",#
				# "RF_Eucl_results_New_Rep19_100-1000.txt",#
				# "RF_Eucl_results_New_Rep20_100-1000.txt"#
				)#
#
dat <- NULL#
for(i in 1:length(infiles.a)){#
	temp.dat1 <- read.csv(infiles.a[i], header=TRUE, stringsAsFactors=FALSE)#
	temp.dat1$uniqueID <- paste(temp.dat1$species, temp.dat1$samp.size, temp.dat1$search.algo, temp.dat1$part.IC, sep="_")#
	temp.dat2 <- read.table(infiles.b[i], header=TRUE, stringsAsFactors=FALSE)#
	temp.dat2$uniqueID <- make.merge.id(temp.dat2)#
	temp.dat <- merge(temp.dat1, temp.dat2, by="uniqueID")#
	temp.dat$gene.size <- 100#
	temp.dat$mut.rate <- 1000#
	temp.dat$replicate <- i#
	dat <- rbind(dat, temp.dat)#
}#
#
#####################################
samp.size.col <- c("steelblue4", "darkorange2", "green4", "red3")#
outline.col <- "gray40"#
samp.sizes <- c(10,20,40,80)#
#####################################
ylim1 <- c(-0.05, 0.05)#
ylim2 <- c(-0.75, 0.75)#
box.width <- 1#
pdf("Results_Plots/Boxplots.pdf", width=6, height=8)#
par(mfrow=c(2,2), mar=c(4,4,1.5,0.5))#
part.crit <- "AIC"#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="diff in RF dist from true tree for 'no part' - 'part'", main="Lophotrochozoa")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width, lty=1, outwex=3.5)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="", main="Myriapoda")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="diff in eucl dist from true tree for 'no part' - 'part'", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
part.crit <- "BIC"#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="diff in RF dist from true tree for 'no part' - 'part'", main="Lophotrochozoa")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="", main="Myriapoda")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="diff in eucl dist from true tree for 'no part' - 'part'", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
part.crit <- "AICc"#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="diff in RF dist from true tree for 'no part' - 'part'", main="Lophotrochozoa")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="", main="Myriapoda")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="diff in eucl dist from true tree for 'no part' - 'part'", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
dev.off()
library(scales)#
setwd("~/Documents/UNIL/PartitioningMethods_SimulationProject/FunctioningPipeline/AnalysisResults")#
make.merge.id <- function(dat){#
	id.col <- rep(NA, dim(dat)[1])#
	for(i in 1:dim(dat)[1]){#
		if(length(grep("lopho", dat$file[i])) > 0) spp <- "lopho_"#
		if(length(grep("myria", dat$file[i])) > 0) spp <- "myria_"#
		if(length(grep("10", dat$file[i])) > 0) samp <- "10_"#
		if(length(grep("20", dat$file[i])) > 0) samp <- "20_"#
		if(length(grep("40", dat$file[i])) > 0) samp <- "40_"#
		if(length(grep("80", dat$file[i])) > 0) samp <- "80_"#
		if(length(grep("rcluster", dat$file[i])) > 0) algo <- "rcluster_"#
		if(length(grep("greedy", dat$file[i])) > 0) algo <- "greedy_"#
		if(length(grep("noPart", dat$file[i])) > 0) algo <- "noPart_"#
		if(length(grep("AIC", dat$file[i])) > 0) crit <- "AIC"#
		if(length(grep("AICc", dat$file[i])) > 0) crit <- "AICc"#
		if(length(grep("BIC", dat$file[i])) > 0) crit <- "BIC"#
		if(length(grep("noPart", dat$file[i])) > 0) crit <- "noPart"#
		id.col[i] <- paste(c(spp, samp, algo, crit), collapse="")#
	}#
	return(id.col)#
}#
#####################################
#
get.rep.difference <- function(dat, rep, samp.size, spp, partitioning.criterion, distance){#
	temp.dat <- dat[dat$replicate == rep & dat$samp.size == samp.size & dat$species == spp , ]#
	no.part.result <- temp.dat[temp.dat$search.algo == "noPart" ,]#
	rclust.AIC.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "AIC" ,]#
	rclust.BIC.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "BIC" ,]#
	rclust.AICc.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "AICc",]#
	if(partitioning.criterion == "AIC"){#
		if(dim(rclust.AIC.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.AIC.result[distance] }#
	}#
	if(partitioning.criterion == "BIC"){#
		if(dim(rclust.BIC.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.BIC.result[distance] }#
	}#
	if(partitioning.criterion == "AICc"){#
		if(dim(rclust.AICc.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.AICc.result[distance] }#
	}#
	return(as.numeric(difference))			#
}#
#
#####################################
#
get.boxplot.dat <- function(dat, samp.size, spp, partitioning.criterion, distance){	#
	samp.size.dists <- NULL#
	for(j in unique(dat$replicate)){#
		dist <- get.rep.difference(dat, rep=j, samp.size=samp.size, spp=spp, partitioning.criterion=partitioning.criterion, distance=distance)#
		samp.size.dists <- c(samp.size.dists, dist)#
	}#
	return(samp.size.dists)#
}#
#
#####################################
# # # mut rate 500#
# dat1 <- read.csv("AllStatsOutput_New_Rep1_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
# dat1$uniqueID <- paste(dat1$species, dat1$samp.size, dat1$search.algo, dat1$part.IC, sep="_")#
# dat1b <- read.table("RF_Eucl_results_New_Rep1_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
# dat1b$uniqueID <- make.merge.id(dat1b)#
# dat <- merge(dat1, dat1b, by="uniqueID")#
# dat$gene.size <- 100#
# dat$mut.rate <- 500#
# dat1 <- dat#
# mut rate 1000#
#
infiles.a <- c("AllStatsOutput_New_Rep1_100-1000.csv",#
				"AllStatsOutput_New_Rep2_100-1000.csv",#
				"AllStatsOutput_New_Rep3_100-1000.csv",#
				"AllStatsOutput_New_Rep4_100-1000.csv",#
				"AllStatsOutput_New_Rep5_100-1000.csv",#
				"AllStatsOutput_New_Rep6_100-1000.csv"#,#
				#"AllStatsOutput_New_Rep1_100-500.csv",#
				#"AllStatsOutput_New_Rep2_100-500.csv",#
				#"AllStatsOutput_New_Rep3_100-500.csv",#
				#"AllStatsOutput_New_Rep4_100-500.csv",#
				#"AllStatsOutput_New_Rep5_100-500.csv",#
				#"AllStatsOutput_New_Rep6_100-500.csv",#
				"AllStatsOutput_Newest_Rep7_100-1000.csv"#,#
				# "AllStatsOutput_Newest_Rep8_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep9_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep10_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep11_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep12_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep13_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep14_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep15_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep16_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep17_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep18_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep19_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep20_100-1000.csv"#
				)#
infiles.b <- c("RF_Eucl_results_New_Rep1_100-1000.txt",#
				"RF_Eucl_results_New_Rep2_100-1000.txt",#
				"RF_Eucl_results_New_Rep3_100-1000.txt",#
				"RF_Eucl_results_New_Rep4_100-1000.txt",#
				"RF_Eucl_results_New_Rep5_100-1000.txt",#
				"RF_Eucl_results_New_Rep6_100-1000.txt",#
				#"RF_Eucl_results_New_Rep1_100-500.txt",#
				#"RF_Eucl_results_New_Rep2_100-500.txt",#
				#"RF_Eucl_results_New_Rep3_100-500.txt",#
				#"RF_Eucl_results_New_Rep4_100-500.txt",#
				#"RF_Eucl_results_New_Rep5_100-500.txt",#
				#"RF_Eucl_results_New_Rep6_100-500.txt",#
				"RF_Eucl_results_New_Rep7_100-1000.txt"#,#
				# "RF_Eucl_results_New_Rep8_100-1000.txt",#
				# "RF_Eucl_results_New_Rep9_100-1000.txt",#
				# "RF_Eucl_results_New_Rep10_100-1000.txt",#
				# "RF_Eucl_results_New_Rep11_100-1000.txt",#
				# "RF_Eucl_results_New_Rep12_100-1000.txt",#
				# "RF_Eucl_results_New_Rep13_100-1000.txt",#
				# "RF_Eucl_results_New_Rep14_100-1000.txt",#
				# "RF_Eucl_results_New_Rep15_100-1000.txt",#
				# "RF_Eucl_results_New_Rep16_100-1000.txt",#
				# "RF_Eucl_results_New_Rep17_100-1000.txt",#
				# "RF_Eucl_results_New_Rep18_100-1000.txt",#
				# "RF_Eucl_results_New_Rep19_100-1000.txt",#
				# "RF_Eucl_results_New_Rep20_100-1000.txt"#
				)#
#
dat <- NULL#
for(i in 1:length(infiles.a)){#
	temp.dat1 <- read.csv(infiles.a[i], header=TRUE, stringsAsFactors=FALSE)#
	temp.dat1$uniqueID <- paste(temp.dat1$species, temp.dat1$samp.size, temp.dat1$search.algo, temp.dat1$part.IC, sep="_")#
	temp.dat2 <- read.table(infiles.b[i], header=TRUE, stringsAsFactors=FALSE)#
	temp.dat2$uniqueID <- make.merge.id(temp.dat2)#
	temp.dat <- merge(temp.dat1, temp.dat2, by="uniqueID")#
	temp.dat$gene.size <- 100#
	temp.dat$mut.rate <- 1000#
	temp.dat$replicate <- i#
	dat <- rbind(dat, temp.dat)#
}#
#
#####################################
samp.size.col <- c("steelblue4", "darkorange2", "green4", "red3")#
outline.col <- "gray40"#
samp.sizes <- c(10,20,40,80)#
#####################################
ylim1 <- c(-0.05, 0.05)#
ylim2 <- c(-0.75, 0.75)#
box.width <- 1#
pdf("Results_Plots/Boxplots.pdf", width=6, height=8)#
par(mfrow=c(2,2), mar=c(4,4,1.5,0.5))#
part.crit <- "AIC"#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="diff in RF dist from true tree for 'no part' - 'part'", main="Lophotrochozoa")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width, lty=1, outwex=13.5)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="", main="Myriapoda")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="diff in eucl dist from true tree for 'no part' - 'part'", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
part.crit <- "BIC"#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="diff in RF dist from true tree for 'no part' - 'part'", main="Lophotrochozoa")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="", main="Myriapoda")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="diff in eucl dist from true tree for 'no part' - 'part'", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
part.crit <- "AICc"#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="diff in RF dist from true tree for 'no part' - 'part'", main="Lophotrochozoa")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="", main="Myriapoda")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="diff in eucl dist from true tree for 'no part' - 'part'", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
dev.off()
library(scales)#
setwd("~/Documents/UNIL/PartitioningMethods_SimulationProject/FunctioningPipeline/AnalysisResults")#
make.merge.id <- function(dat){#
	id.col <- rep(NA, dim(dat)[1])#
	for(i in 1:dim(dat)[1]){#
		if(length(grep("lopho", dat$file[i])) > 0) spp <- "lopho_"#
		if(length(grep("myria", dat$file[i])) > 0) spp <- "myria_"#
		if(length(grep("10", dat$file[i])) > 0) samp <- "10_"#
		if(length(grep("20", dat$file[i])) > 0) samp <- "20_"#
		if(length(grep("40", dat$file[i])) > 0) samp <- "40_"#
		if(length(grep("80", dat$file[i])) > 0) samp <- "80_"#
		if(length(grep("rcluster", dat$file[i])) > 0) algo <- "rcluster_"#
		if(length(grep("greedy", dat$file[i])) > 0) algo <- "greedy_"#
		if(length(grep("noPart", dat$file[i])) > 0) algo <- "noPart_"#
		if(length(grep("AIC", dat$file[i])) > 0) crit <- "AIC"#
		if(length(grep("AICc", dat$file[i])) > 0) crit <- "AICc"#
		if(length(grep("BIC", dat$file[i])) > 0) crit <- "BIC"#
		if(length(grep("noPart", dat$file[i])) > 0) crit <- "noPart"#
		id.col[i] <- paste(c(spp, samp, algo, crit), collapse="")#
	}#
	return(id.col)#
}#
#####################################
#
get.rep.difference <- function(dat, rep, samp.size, spp, partitioning.criterion, distance){#
	temp.dat <- dat[dat$replicate == rep & dat$samp.size == samp.size & dat$species == spp , ]#
	no.part.result <- temp.dat[temp.dat$search.algo == "noPart" ,]#
	rclust.AIC.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "AIC" ,]#
	rclust.BIC.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "BIC" ,]#
	rclust.AICc.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "AICc",]#
	if(partitioning.criterion == "AIC"){#
		if(dim(rclust.AIC.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.AIC.result[distance] }#
	}#
	if(partitioning.criterion == "BIC"){#
		if(dim(rclust.BIC.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.BIC.result[distance] }#
	}#
	if(partitioning.criterion == "AICc"){#
		if(dim(rclust.AICc.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.AICc.result[distance] }#
	}#
	return(as.numeric(difference))			#
}#
#
#####################################
#
get.boxplot.dat <- function(dat, samp.size, spp, partitioning.criterion, distance){	#
	samp.size.dists <- NULL#
	for(j in unique(dat$replicate)){#
		dist <- get.rep.difference(dat, rep=j, samp.size=samp.size, spp=spp, partitioning.criterion=partitioning.criterion, distance=distance)#
		samp.size.dists <- c(samp.size.dists, dist)#
	}#
	return(samp.size.dists)#
}#
#
#####################################
# # # mut rate 500#
# dat1 <- read.csv("AllStatsOutput_New_Rep1_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
# dat1$uniqueID <- paste(dat1$species, dat1$samp.size, dat1$search.algo, dat1$part.IC, sep="_")#
# dat1b <- read.table("RF_Eucl_results_New_Rep1_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
# dat1b$uniqueID <- make.merge.id(dat1b)#
# dat <- merge(dat1, dat1b, by="uniqueID")#
# dat$gene.size <- 100#
# dat$mut.rate <- 500#
# dat1 <- dat#
# mut rate 1000#
#
infiles.a <- c("AllStatsOutput_New_Rep1_100-1000.csv",#
				"AllStatsOutput_New_Rep2_100-1000.csv",#
				"AllStatsOutput_New_Rep3_100-1000.csv",#
				"AllStatsOutput_New_Rep4_100-1000.csv",#
				"AllStatsOutput_New_Rep5_100-1000.csv",#
				"AllStatsOutput_New_Rep6_100-1000.csv"#,#
				#"AllStatsOutput_New_Rep1_100-500.csv",#
				#"AllStatsOutput_New_Rep2_100-500.csv",#
				#"AllStatsOutput_New_Rep3_100-500.csv",#
				#"AllStatsOutput_New_Rep4_100-500.csv",#
				#"AllStatsOutput_New_Rep5_100-500.csv",#
				#"AllStatsOutput_New_Rep6_100-500.csv",#
				"AllStatsOutput_Newest_Rep7_100-1000.csv"#,#
				# "AllStatsOutput_Newest_Rep8_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep9_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep10_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep11_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep12_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep13_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep14_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep15_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep16_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep17_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep18_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep19_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep20_100-1000.csv"#
				)#
infiles.b <- c("RF_Eucl_results_New_Rep1_100-1000.txt",#
				"RF_Eucl_results_New_Rep2_100-1000.txt",#
				"RF_Eucl_results_New_Rep3_100-1000.txt",#
				"RF_Eucl_results_New_Rep4_100-1000.txt",#
				"RF_Eucl_results_New_Rep5_100-1000.txt",#
				"RF_Eucl_results_New_Rep6_100-1000.txt",#
				#"RF_Eucl_results_New_Rep1_100-500.txt",#
				#"RF_Eucl_results_New_Rep2_100-500.txt",#
				#"RF_Eucl_results_New_Rep3_100-500.txt",#
				#"RF_Eucl_results_New_Rep4_100-500.txt",#
				#"RF_Eucl_results_New_Rep5_100-500.txt",#
				#"RF_Eucl_results_New_Rep6_100-500.txt",#
				"RF_Eucl_results_New_Rep7_100-1000.txt"#,#
				# "RF_Eucl_results_New_Rep8_100-1000.txt",#
				# "RF_Eucl_results_New_Rep9_100-1000.txt",#
				# "RF_Eucl_results_New_Rep10_100-1000.txt",#
				# "RF_Eucl_results_New_Rep11_100-1000.txt",#
				# "RF_Eucl_results_New_Rep12_100-1000.txt",#
				# "RF_Eucl_results_New_Rep13_100-1000.txt",#
				# "RF_Eucl_results_New_Rep14_100-1000.txt",#
				# "RF_Eucl_results_New_Rep15_100-1000.txt",#
				# "RF_Eucl_results_New_Rep16_100-1000.txt",#
				# "RF_Eucl_results_New_Rep17_100-1000.txt",#
				# "RF_Eucl_results_New_Rep18_100-1000.txt",#
				# "RF_Eucl_results_New_Rep19_100-1000.txt",#
				# "RF_Eucl_results_New_Rep20_100-1000.txt"#
				)#
#
dat <- NULL#
for(i in 1:length(infiles.a)){#
	temp.dat1 <- read.csv(infiles.a[i], header=TRUE, stringsAsFactors=FALSE)#
	temp.dat1$uniqueID <- paste(temp.dat1$species, temp.dat1$samp.size, temp.dat1$search.algo, temp.dat1$part.IC, sep="_")#
	temp.dat2 <- read.table(infiles.b[i], header=TRUE, stringsAsFactors=FALSE)#
	temp.dat2$uniqueID <- make.merge.id(temp.dat2)#
	temp.dat <- merge(temp.dat1, temp.dat2, by="uniqueID")#
	temp.dat$gene.size <- 100#
	temp.dat$mut.rate <- 1000#
	temp.dat$replicate <- i#
	dat <- rbind(dat, temp.dat)#
}#
#
#####################################
samp.size.col <- c("steelblue4", "darkorange2", "green4", "red3")#
outline.col <- "gray40"#
samp.sizes <- c(10,20,40,80)#
#####################################
ylim1 <- c(-0.05, 0.05)#
ylim2 <- c(-0.75, 0.75)#
box.width <- 1#
pdf("Results_Plots/Boxplots.pdf", width=6, height=8)#
par(mfrow=c(2,2), mar=c(4,4,1.5,0.5))#
part.crit <- "AIC"#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="diff in RF dist from true tree for 'no part' - 'part'", main="Lophotrochozoa")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width, lty=1, outwex=13.5, lwd=5)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="", main="Myriapoda")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="diff in eucl dist from true tree for 'no part' - 'part'", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
part.crit <- "BIC"#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="diff in RF dist from true tree for 'no part' - 'part'", main="Lophotrochozoa")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="", main="Myriapoda")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="diff in eucl dist from true tree for 'no part' - 'part'", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
part.crit <- "AICc"#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="diff in RF dist from true tree for 'no part' - 'part'", main="Lophotrochozoa")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="", main="Myriapoda")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="diff in eucl dist from true tree for 'no part' - 'part'", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
dev.off()
library(scales)#
setwd("~/Documents/UNIL/PartitioningMethods_SimulationProject/FunctioningPipeline/AnalysisResults")#
make.merge.id <- function(dat){#
	id.col <- rep(NA, dim(dat)[1])#
	for(i in 1:dim(dat)[1]){#
		if(length(grep("lopho", dat$file[i])) > 0) spp <- "lopho_"#
		if(length(grep("myria", dat$file[i])) > 0) spp <- "myria_"#
		if(length(grep("10", dat$file[i])) > 0) samp <- "10_"#
		if(length(grep("20", dat$file[i])) > 0) samp <- "20_"#
		if(length(grep("40", dat$file[i])) > 0) samp <- "40_"#
		if(length(grep("80", dat$file[i])) > 0) samp <- "80_"#
		if(length(grep("rcluster", dat$file[i])) > 0) algo <- "rcluster_"#
		if(length(grep("greedy", dat$file[i])) > 0) algo <- "greedy_"#
		if(length(grep("noPart", dat$file[i])) > 0) algo <- "noPart_"#
		if(length(grep("AIC", dat$file[i])) > 0) crit <- "AIC"#
		if(length(grep("AICc", dat$file[i])) > 0) crit <- "AICc"#
		if(length(grep("BIC", dat$file[i])) > 0) crit <- "BIC"#
		if(length(grep("noPart", dat$file[i])) > 0) crit <- "noPart"#
		id.col[i] <- paste(c(spp, samp, algo, crit), collapse="")#
	}#
	return(id.col)#
}#
#####################################
#
get.rep.difference <- function(dat, rep, samp.size, spp, partitioning.criterion, distance){#
	temp.dat <- dat[dat$replicate == rep & dat$samp.size == samp.size & dat$species == spp , ]#
	no.part.result <- temp.dat[temp.dat$search.algo == "noPart" ,]#
	rclust.AIC.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "AIC" ,]#
	rclust.BIC.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "BIC" ,]#
	rclust.AICc.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "AICc",]#
	if(partitioning.criterion == "AIC"){#
		if(dim(rclust.AIC.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.AIC.result[distance] }#
	}#
	if(partitioning.criterion == "BIC"){#
		if(dim(rclust.BIC.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.BIC.result[distance] }#
	}#
	if(partitioning.criterion == "AICc"){#
		if(dim(rclust.AICc.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.AICc.result[distance] }#
	}#
	return(as.numeric(difference))			#
}#
#
#####################################
#
get.boxplot.dat <- function(dat, samp.size, spp, partitioning.criterion, distance){	#
	samp.size.dists <- NULL#
	for(j in unique(dat$replicate)){#
		dist <- get.rep.difference(dat, rep=j, samp.size=samp.size, spp=spp, partitioning.criterion=partitioning.criterion, distance=distance)#
		samp.size.dists <- c(samp.size.dists, dist)#
	}#
	return(samp.size.dists)#
}#
#
#####################################
# # # mut rate 500#
# dat1 <- read.csv("AllStatsOutput_New_Rep1_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
# dat1$uniqueID <- paste(dat1$species, dat1$samp.size, dat1$search.algo, dat1$part.IC, sep="_")#
# dat1b <- read.table("RF_Eucl_results_New_Rep1_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
# dat1b$uniqueID <- make.merge.id(dat1b)#
# dat <- merge(dat1, dat1b, by="uniqueID")#
# dat$gene.size <- 100#
# dat$mut.rate <- 500#
# dat1 <- dat#
# mut rate 1000#
#
infiles.a <- c("AllStatsOutput_New_Rep1_100-1000.csv",#
				"AllStatsOutput_New_Rep2_100-1000.csv",#
				"AllStatsOutput_New_Rep3_100-1000.csv",#
				"AllStatsOutput_New_Rep4_100-1000.csv",#
				"AllStatsOutput_New_Rep5_100-1000.csv",#
				"AllStatsOutput_New_Rep6_100-1000.csv"#,#
				#"AllStatsOutput_New_Rep1_100-500.csv",#
				#"AllStatsOutput_New_Rep2_100-500.csv",#
				#"AllStatsOutput_New_Rep3_100-500.csv",#
				#"AllStatsOutput_New_Rep4_100-500.csv",#
				#"AllStatsOutput_New_Rep5_100-500.csv",#
				#"AllStatsOutput_New_Rep6_100-500.csv",#
				"AllStatsOutput_Newest_Rep7_100-1000.csv"#,#
				# "AllStatsOutput_Newest_Rep8_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep9_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep10_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep11_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep12_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep13_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep14_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep15_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep16_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep17_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep18_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep19_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep20_100-1000.csv"#
				)#
infiles.b <- c("RF_Eucl_results_New_Rep1_100-1000.txt",#
				"RF_Eucl_results_New_Rep2_100-1000.txt",#
				"RF_Eucl_results_New_Rep3_100-1000.txt",#
				"RF_Eucl_results_New_Rep4_100-1000.txt",#
				"RF_Eucl_results_New_Rep5_100-1000.txt",#
				"RF_Eucl_results_New_Rep6_100-1000.txt",#
				#"RF_Eucl_results_New_Rep1_100-500.txt",#
				#"RF_Eucl_results_New_Rep2_100-500.txt",#
				#"RF_Eucl_results_New_Rep3_100-500.txt",#
				#"RF_Eucl_results_New_Rep4_100-500.txt",#
				#"RF_Eucl_results_New_Rep5_100-500.txt",#
				#"RF_Eucl_results_New_Rep6_100-500.txt",#
				"RF_Eucl_results_New_Rep7_100-1000.txt"#,#
				# "RF_Eucl_results_New_Rep8_100-1000.txt",#
				# "RF_Eucl_results_New_Rep9_100-1000.txt",#
				# "RF_Eucl_results_New_Rep10_100-1000.txt",#
				# "RF_Eucl_results_New_Rep11_100-1000.txt",#
				# "RF_Eucl_results_New_Rep12_100-1000.txt",#
				# "RF_Eucl_results_New_Rep13_100-1000.txt",#
				# "RF_Eucl_results_New_Rep14_100-1000.txt",#
				# "RF_Eucl_results_New_Rep15_100-1000.txt",#
				# "RF_Eucl_results_New_Rep16_100-1000.txt",#
				# "RF_Eucl_results_New_Rep17_100-1000.txt",#
				# "RF_Eucl_results_New_Rep18_100-1000.txt",#
				# "RF_Eucl_results_New_Rep19_100-1000.txt",#
				# "RF_Eucl_results_New_Rep20_100-1000.txt"#
				)#
#
dat <- NULL#
for(i in 1:length(infiles.a)){#
	temp.dat1 <- read.csv(infiles.a[i], header=TRUE, stringsAsFactors=FALSE)#
	temp.dat1$uniqueID <- paste(temp.dat1$species, temp.dat1$samp.size, temp.dat1$search.algo, temp.dat1$part.IC, sep="_")#
	temp.dat2 <- read.table(infiles.b[i], header=TRUE, stringsAsFactors=FALSE)#
	temp.dat2$uniqueID <- make.merge.id(temp.dat2)#
	temp.dat <- merge(temp.dat1, temp.dat2, by="uniqueID")#
	temp.dat$gene.size <- 100#
	temp.dat$mut.rate <- 1000#
	temp.dat$replicate <- i#
	dat <- rbind(dat, temp.dat)#
}#
#
#####################################
samp.size.col <- c("steelblue4", "darkorange2", "green4", "red3")#
outline.col <- "gray40"#
samp.sizes <- c(10,20,40,80)#
#####################################
ylim1 <- c(-0.05, 0.05)#
ylim2 <- c(-0.75, 0.75)#
box.width <- 1#
pdf("Results_Plots/Boxplots.pdf", width=6, height=8)#
par(mfrow=c(2,2), mar=c(4,4,1.5,0.5))#
part.crit <- "AIC"#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="diff in RF dist from true tree for 'no part' - 'part'", main="Lophotrochozoa")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width, lty=1, lwd=1.5)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="", main="Myriapoda")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="diff in eucl dist from true tree for 'no part' - 'part'", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
part.crit <- "BIC"#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="diff in RF dist from true tree for 'no part' - 'part'", main="Lophotrochozoa")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="", main="Myriapoda")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="diff in eucl dist from true tree for 'no part' - 'part'", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
part.crit <- "AICc"#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="diff in RF dist from true tree for 'no part' - 'part'", main="Lophotrochozoa")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="", main="Myriapoda")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="diff in eucl dist from true tree for 'no part' - 'part'", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
dev.off()
library(scales)#
setwd("~/Documents/UNIL/PartitioningMethods_SimulationProject/FunctioningPipeline/AnalysisResults")#
make.merge.id <- function(dat){#
	id.col <- rep(NA, dim(dat)[1])#
	for(i in 1:dim(dat)[1]){#
		if(length(grep("lopho", dat$file[i])) > 0) spp <- "lopho_"#
		if(length(grep("myria", dat$file[i])) > 0) spp <- "myria_"#
		if(length(grep("10", dat$file[i])) > 0) samp <- "10_"#
		if(length(grep("20", dat$file[i])) > 0) samp <- "20_"#
		if(length(grep("40", dat$file[i])) > 0) samp <- "40_"#
		if(length(grep("80", dat$file[i])) > 0) samp <- "80_"#
		if(length(grep("rcluster", dat$file[i])) > 0) algo <- "rcluster_"#
		if(length(grep("greedy", dat$file[i])) > 0) algo <- "greedy_"#
		if(length(grep("noPart", dat$file[i])) > 0) algo <- "noPart_"#
		if(length(grep("AIC", dat$file[i])) > 0) crit <- "AIC"#
		if(length(grep("AICc", dat$file[i])) > 0) crit <- "AICc"#
		if(length(grep("BIC", dat$file[i])) > 0) crit <- "BIC"#
		if(length(grep("noPart", dat$file[i])) > 0) crit <- "noPart"#
		id.col[i] <- paste(c(spp, samp, algo, crit), collapse="")#
	}#
	return(id.col)#
}#
#####################################
#
get.rep.difference <- function(dat, rep, samp.size, spp, partitioning.criterion, distance){#
	temp.dat <- dat[dat$replicate == rep & dat$samp.size == samp.size & dat$species == spp , ]#
	no.part.result <- temp.dat[temp.dat$search.algo == "noPart" ,]#
	rclust.AIC.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "AIC" ,]#
	rclust.BIC.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "BIC" ,]#
	rclust.AICc.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "AICc",]#
	if(partitioning.criterion == "AIC"){#
		if(dim(rclust.AIC.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.AIC.result[distance] }#
	}#
	if(partitioning.criterion == "BIC"){#
		if(dim(rclust.BIC.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.BIC.result[distance] }#
	}#
	if(partitioning.criterion == "AICc"){#
		if(dim(rclust.AICc.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.AICc.result[distance] }#
	}#
	return(as.numeric(difference))			#
}#
#
#####################################
#
get.boxplot.dat <- function(dat, samp.size, spp, partitioning.criterion, distance){	#
	samp.size.dists <- NULL#
	for(j in unique(dat$replicate)){#
		dist <- get.rep.difference(dat, rep=j, samp.size=samp.size, spp=spp, partitioning.criterion=partitioning.criterion, distance=distance)#
		samp.size.dists <- c(samp.size.dists, dist)#
	}#
	return(samp.size.dists)#
}#
#
#####################################
# # # mut rate 500#
# dat1 <- read.csv("AllStatsOutput_New_Rep1_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
# dat1$uniqueID <- paste(dat1$species, dat1$samp.size, dat1$search.algo, dat1$part.IC, sep="_")#
# dat1b <- read.table("RF_Eucl_results_New_Rep1_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
# dat1b$uniqueID <- make.merge.id(dat1b)#
# dat <- merge(dat1, dat1b, by="uniqueID")#
# dat$gene.size <- 100#
# dat$mut.rate <- 500#
# dat1 <- dat#
# mut rate 1000#
#
infiles.a <- c("AllStatsOutput_New_Rep1_100-1000.csv",#
				"AllStatsOutput_New_Rep2_100-1000.csv",#
				"AllStatsOutput_New_Rep3_100-1000.csv",#
				"AllStatsOutput_New_Rep4_100-1000.csv",#
				"AllStatsOutput_New_Rep5_100-1000.csv",#
				"AllStatsOutput_New_Rep6_100-1000.csv"#,#
				#"AllStatsOutput_New_Rep1_100-500.csv",#
				#"AllStatsOutput_New_Rep2_100-500.csv",#
				#"AllStatsOutput_New_Rep3_100-500.csv",#
				#"AllStatsOutput_New_Rep4_100-500.csv",#
				#"AllStatsOutput_New_Rep5_100-500.csv",#
				#"AllStatsOutput_New_Rep6_100-500.csv",#
				"AllStatsOutput_Newest_Rep7_100-1000.csv"#,#
				# "AllStatsOutput_Newest_Rep8_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep9_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep10_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep11_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep12_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep13_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep14_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep15_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep16_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep17_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep18_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep19_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep20_100-1000.csv"#
				)#
infiles.b <- c("RF_Eucl_results_New_Rep1_100-1000.txt",#
				"RF_Eucl_results_New_Rep2_100-1000.txt",#
				"RF_Eucl_results_New_Rep3_100-1000.txt",#
				"RF_Eucl_results_New_Rep4_100-1000.txt",#
				"RF_Eucl_results_New_Rep5_100-1000.txt",#
				"RF_Eucl_results_New_Rep6_100-1000.txt",#
				#"RF_Eucl_results_New_Rep1_100-500.txt",#
				#"RF_Eucl_results_New_Rep2_100-500.txt",#
				#"RF_Eucl_results_New_Rep3_100-500.txt",#
				#"RF_Eucl_results_New_Rep4_100-500.txt",#
				#"RF_Eucl_results_New_Rep5_100-500.txt",#
				#"RF_Eucl_results_New_Rep6_100-500.txt",#
				"RF_Eucl_results_New_Rep7_100-1000.txt"#,#
				# "RF_Eucl_results_New_Rep8_100-1000.txt",#
				# "RF_Eucl_results_New_Rep9_100-1000.txt",#
				# "RF_Eucl_results_New_Rep10_100-1000.txt",#
				# "RF_Eucl_results_New_Rep11_100-1000.txt",#
				# "RF_Eucl_results_New_Rep12_100-1000.txt",#
				# "RF_Eucl_results_New_Rep13_100-1000.txt",#
				# "RF_Eucl_results_New_Rep14_100-1000.txt",#
				# "RF_Eucl_results_New_Rep15_100-1000.txt",#
				# "RF_Eucl_results_New_Rep16_100-1000.txt",#
				# "RF_Eucl_results_New_Rep17_100-1000.txt",#
				# "RF_Eucl_results_New_Rep18_100-1000.txt",#
				# "RF_Eucl_results_New_Rep19_100-1000.txt",#
				# "RF_Eucl_results_New_Rep20_100-1000.txt"#
				)#
#
dat <- NULL#
for(i in 1:length(infiles.a)){#
	temp.dat1 <- read.csv(infiles.a[i], header=TRUE, stringsAsFactors=FALSE)#
	temp.dat1$uniqueID <- paste(temp.dat1$species, temp.dat1$samp.size, temp.dat1$search.algo, temp.dat1$part.IC, sep="_")#
	temp.dat2 <- read.table(infiles.b[i], header=TRUE, stringsAsFactors=FALSE)#
	temp.dat2$uniqueID <- make.merge.id(temp.dat2)#
	temp.dat <- merge(temp.dat1, temp.dat2, by="uniqueID")#
	temp.dat$gene.size <- 100#
	temp.dat$mut.rate <- 1000#
	temp.dat$replicate <- i#
	dat <- rbind(dat, temp.dat)#
}#
#
#####################################
samp.size.col <- c("steelblue4", "darkorange2", "green4", "red3")#
outline.col <- "gray40"#
samp.sizes <- c(10,20,40,80)#
#####################################
ylim1 <- c(-0.05, 0.05)#
ylim2 <- c(-0.75, 0.75)#
box.width <- 1#
pdf("Results_Plots/Boxplots.pdf", width=6, height=8)#
par(mfrow=c(2,2), mar=c(4,4,1.5,0.5))#
part.crit <- "AIC"#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="diff in RF dist from true tree for 'no part' - 'part'", main="Lophotrochozoa")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width, lty=1, lwd=2.5)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="", main="Myriapoda")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="diff in eucl dist from true tree for 'no part' - 'part'", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
part.crit <- "BIC"#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="diff in RF dist from true tree for 'no part' - 'part'", main="Lophotrochozoa")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="", main="Myriapoda")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="diff in eucl dist from true tree for 'no part' - 'part'", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
part.crit <- "AICc"#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="diff in RF dist from true tree for 'no part' - 'part'", main="Lophotrochozoa")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="", main="Myriapoda")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="diff in eucl dist from true tree for 'no part' - 'part'", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col)#
}#
dev.off()
library(scales)#
setwd("~/Documents/UNIL/PartitioningMethods_SimulationProject/FunctioningPipeline/AnalysisResults")#
make.merge.id <- function(dat){#
	id.col <- rep(NA, dim(dat)[1])#
	for(i in 1:dim(dat)[1]){#
		if(length(grep("lopho", dat$file[i])) > 0) spp <- "lopho_"#
		if(length(grep("myria", dat$file[i])) > 0) spp <- "myria_"#
		if(length(grep("10", dat$file[i])) > 0) samp <- "10_"#
		if(length(grep("20", dat$file[i])) > 0) samp <- "20_"#
		if(length(grep("40", dat$file[i])) > 0) samp <- "40_"#
		if(length(grep("80", dat$file[i])) > 0) samp <- "80_"#
		if(length(grep("rcluster", dat$file[i])) > 0) algo <- "rcluster_"#
		if(length(grep("greedy", dat$file[i])) > 0) algo <- "greedy_"#
		if(length(grep("noPart", dat$file[i])) > 0) algo <- "noPart_"#
		if(length(grep("AIC", dat$file[i])) > 0) crit <- "AIC"#
		if(length(grep("AICc", dat$file[i])) > 0) crit <- "AICc"#
		if(length(grep("BIC", dat$file[i])) > 0) crit <- "BIC"#
		if(length(grep("noPart", dat$file[i])) > 0) crit <- "noPart"#
		id.col[i] <- paste(c(spp, samp, algo, crit), collapse="")#
	}#
	return(id.col)#
}#
#####################################
#
get.rep.difference <- function(dat, rep, samp.size, spp, partitioning.criterion, distance){#
	temp.dat <- dat[dat$replicate == rep & dat$samp.size == samp.size & dat$species == spp , ]#
	no.part.result <- temp.dat[temp.dat$search.algo == "noPart" ,]#
	rclust.AIC.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "AIC" ,]#
	rclust.BIC.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "BIC" ,]#
	rclust.AICc.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "AICc",]#
	if(partitioning.criterion == "AIC"){#
		if(dim(rclust.AIC.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.AIC.result[distance] }#
	}#
	if(partitioning.criterion == "BIC"){#
		if(dim(rclust.BIC.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.BIC.result[distance] }#
	}#
	if(partitioning.criterion == "AICc"){#
		if(dim(rclust.AICc.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.AICc.result[distance] }#
	}#
	return(as.numeric(difference))			#
}#
#
#####################################
#
get.boxplot.dat <- function(dat, samp.size, spp, partitioning.criterion, distance){	#
	samp.size.dists <- NULL#
	for(j in unique(dat$replicate)){#
		dist <- get.rep.difference(dat, rep=j, samp.size=samp.size, spp=spp, partitioning.criterion=partitioning.criterion, distance=distance)#
		samp.size.dists <- c(samp.size.dists, dist)#
	}#
	return(samp.size.dists)#
}#
#
#####################################
# # # mut rate 500#
# dat1 <- read.csv("AllStatsOutput_New_Rep1_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
# dat1$uniqueID <- paste(dat1$species, dat1$samp.size, dat1$search.algo, dat1$part.IC, sep="_")#
# dat1b <- read.table("RF_Eucl_results_New_Rep1_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
# dat1b$uniqueID <- make.merge.id(dat1b)#
# dat <- merge(dat1, dat1b, by="uniqueID")#
# dat$gene.size <- 100#
# dat$mut.rate <- 500#
# dat1 <- dat#
# mut rate 1000#
#
infiles.a <- c("AllStatsOutput_New_Rep1_100-1000.csv",#
				"AllStatsOutput_New_Rep2_100-1000.csv",#
				"AllStatsOutput_New_Rep3_100-1000.csv",#
				"AllStatsOutput_New_Rep4_100-1000.csv",#
				"AllStatsOutput_New_Rep5_100-1000.csv",#
				"AllStatsOutput_New_Rep6_100-1000.csv"#,#
				#"AllStatsOutput_New_Rep1_100-500.csv",#
				#"AllStatsOutput_New_Rep2_100-500.csv",#
				#"AllStatsOutput_New_Rep3_100-500.csv",#
				#"AllStatsOutput_New_Rep4_100-500.csv",#
				#"AllStatsOutput_New_Rep5_100-500.csv",#
				#"AllStatsOutput_New_Rep6_100-500.csv",#
				"AllStatsOutput_Newest_Rep7_100-1000.csv"#,#
				# "AllStatsOutput_Newest_Rep8_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep9_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep10_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep11_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep12_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep13_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep14_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep15_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep16_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep17_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep18_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep19_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep20_100-1000.csv"#
				)#
infiles.b <- c("RF_Eucl_results_New_Rep1_100-1000.txt",#
				"RF_Eucl_results_New_Rep2_100-1000.txt",#
				"RF_Eucl_results_New_Rep3_100-1000.txt",#
				"RF_Eucl_results_New_Rep4_100-1000.txt",#
				"RF_Eucl_results_New_Rep5_100-1000.txt",#
				"RF_Eucl_results_New_Rep6_100-1000.txt",#
				#"RF_Eucl_results_New_Rep1_100-500.txt",#
				#"RF_Eucl_results_New_Rep2_100-500.txt",#
				#"RF_Eucl_results_New_Rep3_100-500.txt",#
				#"RF_Eucl_results_New_Rep4_100-500.txt",#
				#"RF_Eucl_results_New_Rep5_100-500.txt",#
				#"RF_Eucl_results_New_Rep6_100-500.txt",#
				"RF_Eucl_results_New_Rep7_100-1000.txt"#,#
				# "RF_Eucl_results_New_Rep8_100-1000.txt",#
				# "RF_Eucl_results_New_Rep9_100-1000.txt",#
				# "RF_Eucl_results_New_Rep10_100-1000.txt",#
				# "RF_Eucl_results_New_Rep11_100-1000.txt",#
				# "RF_Eucl_results_New_Rep12_100-1000.txt",#
				# "RF_Eucl_results_New_Rep13_100-1000.txt",#
				# "RF_Eucl_results_New_Rep14_100-1000.txt",#
				# "RF_Eucl_results_New_Rep15_100-1000.txt",#
				# "RF_Eucl_results_New_Rep16_100-1000.txt",#
				# "RF_Eucl_results_New_Rep17_100-1000.txt",#
				# "RF_Eucl_results_New_Rep18_100-1000.txt",#
				# "RF_Eucl_results_New_Rep19_100-1000.txt",#
				# "RF_Eucl_results_New_Rep20_100-1000.txt"#
				)#
#
dat <- NULL#
for(i in 1:length(infiles.a)){#
	temp.dat1 <- read.csv(infiles.a[i], header=TRUE, stringsAsFactors=FALSE)#
	temp.dat1$uniqueID <- paste(temp.dat1$species, temp.dat1$samp.size, temp.dat1$search.algo, temp.dat1$part.IC, sep="_")#
	temp.dat2 <- read.table(infiles.b[i], header=TRUE, stringsAsFactors=FALSE)#
	temp.dat2$uniqueID <- make.merge.id(temp.dat2)#
	temp.dat <- merge(temp.dat1, temp.dat2, by="uniqueID")#
	temp.dat$gene.size <- 100#
	temp.dat$mut.rate <- 1000#
	temp.dat$replicate <- i#
	dat <- rbind(dat, temp.dat)#
}#
#
#####################################
samp.size.col <- c("steelblue4", "darkorange2", "green4", "red3")#
outline.col <- "gray40"#
samp.sizes <- c(10,20,40,80)#
#####################################
ylim1 <- c(-0.05, 0.05)#
ylim2 <- c(-0.75, 0.75)#
box.width <- 1#
line.type <- 1#
line.width <- 2#
pdf("Results_Plots/Boxplots.pdf", width=6, height=8)#
par(mfrow=c(2,2), mar=c(4,4,1.5,0.5))#
part.crit <- "AIC"#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="diff in RF dist from true tree for 'no part' - 'part'", main="Lophotrochozoa")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width, lty=line.type, lwd=line.width)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="", main="Myriapoda")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width, lty=line.type, lwd=line.width)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="diff in eucl dist from true tree for 'no part' - 'part'", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width, lty=line.type, lwd=line.width)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width, lty=line.type, lwd=line.width)#
}#
part.crit <- "BIC"#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="diff in RF dist from true tree for 'no part' - 'part'", main="Lophotrochozoa")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width, lty=line.type, lwd=line.width)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="", main="Myriapoda")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width, lty=line.type, lwd=line.width)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="diff in eucl dist from true tree for 'no part' - 'part'", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width, lty=line.type, lwd=line.width)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width, lty=line.type, lwd=line.width)#
}#
part.crit <- "AICc"#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="diff in RF dist from true tree for 'no part' - 'part'", main="Lophotrochozoa")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width, lty=line.type, lwd=line.width)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="", main="Myriapoda")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width, lty=line.type, lwd=line.width)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="diff in eucl dist from true tree for 'no part' - 'part'", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width, lty=line.type, lwd=line.width)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width, lty=line.type, lwd=line.width)#
}#
dev.off()
library(scales)#
setwd("~/Documents/UNIL/PartitioningMethods_SimulationProject/FunctioningPipeline/AnalysisResults")#
make.merge.id <- function(dat){#
	id.col <- rep(NA, dim(dat)[1])#
	for(i in 1:dim(dat)[1]){#
		if(length(grep("lopho", dat$file[i])) > 0) spp <- "lopho_"#
		if(length(grep("myria", dat$file[i])) > 0) spp <- "myria_"#
		if(length(grep("10", dat$file[i])) > 0) samp <- "10_"#
		if(length(grep("20", dat$file[i])) > 0) samp <- "20_"#
		if(length(grep("40", dat$file[i])) > 0) samp <- "40_"#
		if(length(grep("80", dat$file[i])) > 0) samp <- "80_"#
		if(length(grep("rcluster", dat$file[i])) > 0) algo <- "rcluster_"#
		if(length(grep("greedy", dat$file[i])) > 0) algo <- "greedy_"#
		if(length(grep("noPart", dat$file[i])) > 0) algo <- "noPart_"#
		if(length(grep("AIC", dat$file[i])) > 0) crit <- "AIC"#
		if(length(grep("AICc", dat$file[i])) > 0) crit <- "AICc"#
		if(length(grep("BIC", dat$file[i])) > 0) crit <- "BIC"#
		if(length(grep("noPart", dat$file[i])) > 0) crit <- "noPart"#
		id.col[i] <- paste(c(spp, samp, algo, crit), collapse="")#
	}#
	return(id.col)#
}#
#####################################
#
get.rep.difference <- function(dat, rep, samp.size, spp, partitioning.criterion, distance){#
	temp.dat <- dat[dat$replicate == rep & dat$samp.size == samp.size & dat$species == spp , ]#
	no.part.result <- temp.dat[temp.dat$search.algo == "noPart" ,]#
	rclust.AIC.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "AIC" ,]#
	rclust.BIC.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "BIC" ,]#
	rclust.AICc.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "AICc",]#
	if(partitioning.criterion == "AIC"){#
		if(dim(rclust.AIC.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.AIC.result[distance] }#
	}#
	if(partitioning.criterion == "BIC"){#
		if(dim(rclust.BIC.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.BIC.result[distance] }#
	}#
	if(partitioning.criterion == "AICc"){#
		if(dim(rclust.AICc.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.AICc.result[distance] }#
	}#
	return(as.numeric(difference))			#
}#
#
#####################################
#
get.boxplot.dat <- function(dat, samp.size, spp, partitioning.criterion, distance){	#
	samp.size.dists <- NULL#
	for(j in unique(dat$replicate)){#
		dist <- get.rep.difference(dat, rep=j, samp.size=samp.size, spp=spp, partitioning.criterion=partitioning.criterion, distance=distance)#
		samp.size.dists <- c(samp.size.dists, dist)#
	}#
	return(samp.size.dists)#
}#
#
#####################################
# # # mut rate 500#
# dat1 <- read.csv("AllStatsOutput_New_Rep1_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
# dat1$uniqueID <- paste(dat1$species, dat1$samp.size, dat1$search.algo, dat1$part.IC, sep="_")#
# dat1b <- read.table("RF_Eucl_results_New_Rep1_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
# dat1b$uniqueID <- make.merge.id(dat1b)#
# dat <- merge(dat1, dat1b, by="uniqueID")#
# dat$gene.size <- 100#
# dat$mut.rate <- 500#
# dat1 <- dat#
# mut rate 1000#
#
infiles.a <- c("AllStatsOutput_New_Rep1_100-1000.csv",#
				"AllStatsOutput_New_Rep2_100-1000.csv",#
				"AllStatsOutput_New_Rep3_100-1000.csv",#
				"AllStatsOutput_New_Rep4_100-1000.csv",#
				"AllStatsOutput_New_Rep5_100-1000.csv",#
				"AllStatsOutput_New_Rep6_100-1000.csv"#,#
				#"AllStatsOutput_New_Rep1_100-500.csv",#
				#"AllStatsOutput_New_Rep2_100-500.csv",#
				#"AllStatsOutput_New_Rep3_100-500.csv",#
				#"AllStatsOutput_New_Rep4_100-500.csv",#
				#"AllStatsOutput_New_Rep5_100-500.csv",#
				#"AllStatsOutput_New_Rep6_100-500.csv",#
				"AllStatsOutput_Newest_Rep7_100-1000.csv"#,#
				# "AllStatsOutput_Newest_Rep8_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep9_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep10_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep11_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep12_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep13_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep14_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep15_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep16_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep17_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep18_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep19_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep20_100-1000.csv"#
				)#
infiles.b <- c("RF_Eucl_results_New_Rep1_100-1000.txt",#
				"RF_Eucl_results_New_Rep2_100-1000.txt",#
				"RF_Eucl_results_New_Rep3_100-1000.txt",#
				"RF_Eucl_results_New_Rep4_100-1000.txt",#
				"RF_Eucl_results_New_Rep5_100-1000.txt",#
				"RF_Eucl_results_New_Rep6_100-1000.txt",#
				#"RF_Eucl_results_New_Rep1_100-500.txt",#
				#"RF_Eucl_results_New_Rep2_100-500.txt",#
				#"RF_Eucl_results_New_Rep3_100-500.txt",#
				#"RF_Eucl_results_New_Rep4_100-500.txt",#
				#"RF_Eucl_results_New_Rep5_100-500.txt",#
				#"RF_Eucl_results_New_Rep6_100-500.txt",#
				"RF_Eucl_results_New_Rep7_100-1000.txt"#,#
				# "RF_Eucl_results_New_Rep8_100-1000.txt",#
				# "RF_Eucl_results_New_Rep9_100-1000.txt",#
				# "RF_Eucl_results_New_Rep10_100-1000.txt",#
				# "RF_Eucl_results_New_Rep11_100-1000.txt",#
				# "RF_Eucl_results_New_Rep12_100-1000.txt",#
				# "RF_Eucl_results_New_Rep13_100-1000.txt",#
				# "RF_Eucl_results_New_Rep14_100-1000.txt",#
				# "RF_Eucl_results_New_Rep15_100-1000.txt",#
				# "RF_Eucl_results_New_Rep16_100-1000.txt",#
				# "RF_Eucl_results_New_Rep17_100-1000.txt",#
				# "RF_Eucl_results_New_Rep18_100-1000.txt",#
				# "RF_Eucl_results_New_Rep19_100-1000.txt",#
				# "RF_Eucl_results_New_Rep20_100-1000.txt"#
				)#
#
dat <- NULL#
for(i in 1:length(infiles.a)){#
	temp.dat1 <- read.csv(infiles.a[i], header=TRUE, stringsAsFactors=FALSE)#
	temp.dat1$uniqueID <- paste(temp.dat1$species, temp.dat1$samp.size, temp.dat1$search.algo, temp.dat1$part.IC, sep="_")#
	temp.dat2 <- read.table(infiles.b[i], header=TRUE, stringsAsFactors=FALSE)#
	temp.dat2$uniqueID <- make.merge.id(temp.dat2)#
	temp.dat <- merge(temp.dat1, temp.dat2, by="uniqueID")#
	temp.dat$gene.size <- 100#
	temp.dat$mut.rate <- 1000#
	temp.dat$replicate <- i#
	dat <- rbind(dat, temp.dat)#
}#
#
#####################################
samp.size.col <- c("steelblue4", "darkorange2", "green4", "red3")#
outline.col <- "gray40"#
samp.sizes <- c(10,20,40,80)#
#####################################
ylim1 <- c(-0.05, 0.05)#
ylim2 <- c(-0.75, 0.75)#
box.width <- 1#
line.type <- 1#
line.width <- 1.75#
pdf("Results_Plots/Boxplots.pdf", width=6, height=8)#
par(mfrow=c(2,2), mar=c(4,4,1.5,0.5))#
part.crit <- "AIC"#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="diff in RF dist from true tree for 'no part' - 'part'", main="Lophotrochozoa")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width, lty=line.type, lwd=line.width)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="", main="Myriapoda")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width, lty=line.type, lwd=line.width)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="diff in eucl dist from true tree for 'no part' - 'part'", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width, lty=line.type, lwd=line.width)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width, lty=line.type, lwd=line.width)#
}#
part.crit <- "BIC"#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="diff in RF dist from true tree for 'no part' - 'part'", main="Lophotrochozoa")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width, lty=line.type, lwd=line.width)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="", main="Myriapoda")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width, lty=line.type, lwd=line.width)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="diff in eucl dist from true tree for 'no part' - 'part'", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width, lty=line.type, lwd=line.width)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width, lty=line.type, lwd=line.width)#
}#
part.crit <- "AICc"#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="diff in RF dist from true tree for 'no part' - 'part'", main="Lophotrochozoa")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width, lty=line.type, lwd=line.width)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="", main="Myriapoda")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width, lty=line.type, lwd=line.width)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="diff in eucl dist from true tree for 'no part' - 'part'", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width, lty=line.type, lwd=line.width)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width, lty=line.type, lwd=line.width)#
}#
dev.off()
library(scales)#
setwd("~/Documents/UNIL/PartitioningMethods_SimulationProject/FunctioningPipeline/AnalysisResults")#
make.merge.id <- function(dat){#
	id.col <- rep(NA, dim(dat)[1])#
	for(i in 1:dim(dat)[1]){#
		if(length(grep("lopho", dat$file[i])) > 0) spp <- "lopho_"#
		if(length(grep("myria", dat$file[i])) > 0) spp <- "myria_"#
		if(length(grep("10", dat$file[i])) > 0) samp <- "10_"#
		if(length(grep("20", dat$file[i])) > 0) samp <- "20_"#
		if(length(grep("40", dat$file[i])) > 0) samp <- "40_"#
		if(length(grep("80", dat$file[i])) > 0) samp <- "80_"#
		if(length(grep("rcluster", dat$file[i])) > 0) algo <- "rcluster_"#
		if(length(grep("greedy", dat$file[i])) > 0) algo <- "greedy_"#
		if(length(grep("noPart", dat$file[i])) > 0) algo <- "noPart_"#
		if(length(grep("AIC", dat$file[i])) > 0) crit <- "AIC"#
		if(length(grep("AICc", dat$file[i])) > 0) crit <- "AICc"#
		if(length(grep("BIC", dat$file[i])) > 0) crit <- "BIC"#
		if(length(grep("noPart", dat$file[i])) > 0) crit <- "noPart"#
		id.col[i] <- paste(c(spp, samp, algo, crit), collapse="")#
	}#
	return(id.col)#
}#
#####################################
#
get.rep.difference <- function(dat, rep, samp.size, spp, partitioning.criterion, distance){#
	temp.dat <- dat[dat$replicate == rep & dat$samp.size == samp.size & dat$species == spp , ]#
	no.part.result <- temp.dat[temp.dat$search.algo == "noPart" ,]#
	rclust.AIC.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "AIC" ,]#
	rclust.BIC.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "BIC" ,]#
	rclust.AICc.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "AICc",]#
	if(partitioning.criterion == "AIC"){#
		if(dim(rclust.AIC.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.AIC.result[distance] }#
	}#
	if(partitioning.criterion == "BIC"){#
		if(dim(rclust.BIC.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.BIC.result[distance] }#
	}#
	if(partitioning.criterion == "AICc"){#
		if(dim(rclust.AICc.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.AICc.result[distance] }#
	}#
	return(as.numeric(difference))			#
}#
#
#####################################
#
get.boxplot.dat <- function(dat, samp.size, spp, partitioning.criterion, distance){	#
	samp.size.dists <- NULL#
	for(j in unique(dat$replicate)){#
		dist <- get.rep.difference(dat, rep=j, samp.size=samp.size, spp=spp, partitioning.criterion=partitioning.criterion, distance=distance)#
		samp.size.dists <- c(samp.size.dists, dist)#
	}#
	return(samp.size.dists)#
}#
#
#####################################
# # # mut rate 500#
# dat1 <- read.csv("AllStatsOutput_New_Rep1_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
# dat1$uniqueID <- paste(dat1$species, dat1$samp.size, dat1$search.algo, dat1$part.IC, sep="_")#
# dat1b <- read.table("RF_Eucl_results_New_Rep1_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
# dat1b$uniqueID <- make.merge.id(dat1b)#
# dat <- merge(dat1, dat1b, by="uniqueID")#
# dat$gene.size <- 100#
# dat$mut.rate <- 500#
# dat1 <- dat#
# mut rate 1000#
#
infiles.a <- c("AllStatsOutput_New_Rep1_100-1000.csv",#
				"AllStatsOutput_New_Rep2_100-1000.csv",#
				"AllStatsOutput_New_Rep3_100-1000.csv",#
				"AllStatsOutput_New_Rep4_100-1000.csv",#
				"AllStatsOutput_New_Rep5_100-1000.csv",#
				"AllStatsOutput_New_Rep6_100-1000.csv"#,#
				#"AllStatsOutput_New_Rep1_100-500.csv",#
				#"AllStatsOutput_New_Rep2_100-500.csv",#
				#"AllStatsOutput_New_Rep3_100-500.csv",#
				#"AllStatsOutput_New_Rep4_100-500.csv",#
				#"AllStatsOutput_New_Rep5_100-500.csv",#
				#"AllStatsOutput_New_Rep6_100-500.csv",#
				"AllStatsOutput_Newest_Rep7_100-1000.csv"#,#
				# "AllStatsOutput_Newest_Rep8_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep9_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep10_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep11_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep12_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep13_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep14_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep15_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep16_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep17_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep18_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep19_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep20_100-1000.csv"#
				)#
infiles.b <- c("RF_Eucl_results_New_Rep1_100-1000.txt",#
				"RF_Eucl_results_New_Rep2_100-1000.txt",#
				"RF_Eucl_results_New_Rep3_100-1000.txt",#
				"RF_Eucl_results_New_Rep4_100-1000.txt",#
				"RF_Eucl_results_New_Rep5_100-1000.txt",#
				"RF_Eucl_results_New_Rep6_100-1000.txt",#
				#"RF_Eucl_results_New_Rep1_100-500.txt",#
				#"RF_Eucl_results_New_Rep2_100-500.txt",#
				#"RF_Eucl_results_New_Rep3_100-500.txt",#
				#"RF_Eucl_results_New_Rep4_100-500.txt",#
				#"RF_Eucl_results_New_Rep5_100-500.txt",#
				#"RF_Eucl_results_New_Rep6_100-500.txt",#
				"RF_Eucl_results_New_Rep7_100-1000.txt"#,#
				# "RF_Eucl_results_New_Rep8_100-1000.txt",#
				# "RF_Eucl_results_New_Rep9_100-1000.txt",#
				# "RF_Eucl_results_New_Rep10_100-1000.txt",#
				# "RF_Eucl_results_New_Rep11_100-1000.txt",#
				# "RF_Eucl_results_New_Rep12_100-1000.txt",#
				# "RF_Eucl_results_New_Rep13_100-1000.txt",#
				# "RF_Eucl_results_New_Rep14_100-1000.txt",#
				# "RF_Eucl_results_New_Rep15_100-1000.txt",#
				# "RF_Eucl_results_New_Rep16_100-1000.txt",#
				# "RF_Eucl_results_New_Rep17_100-1000.txt",#
				# "RF_Eucl_results_New_Rep18_100-1000.txt",#
				# "RF_Eucl_results_New_Rep19_100-1000.txt",#
				# "RF_Eucl_results_New_Rep20_100-1000.txt"#
				)#
#
dat <- NULL#
for(i in 1:length(infiles.a)){#
	temp.dat1 <- read.csv(infiles.a[i], header=TRUE, stringsAsFactors=FALSE)#
	temp.dat1$uniqueID <- paste(temp.dat1$species, temp.dat1$samp.size, temp.dat1$search.algo, temp.dat1$part.IC, sep="_")#
	temp.dat2 <- read.table(infiles.b[i], header=TRUE, stringsAsFactors=FALSE)#
	temp.dat2$uniqueID <- make.merge.id(temp.dat2)#
	temp.dat <- merge(temp.dat1, temp.dat2, by="uniqueID")#
	temp.dat$gene.size <- 100#
	temp.dat$mut.rate <- 1000#
	temp.dat$replicate <- i#
	dat <- rbind(dat, temp.dat)#
}#
#
#####################################
samp.size.col <- c("steelblue4", "darkorange2", "green4", "red3")#
outline.col <- "gray30"#
samp.sizes <- c(10,20,40,80)#
#####################################
ylim1 <- c(-0.05, 0.05)#
ylim2 <- c(-0.75, 0.75)#
box.width <- 1#
line.type <- 1#
line.width <- 1.75#
pdf("Results_Plots/Boxplots.pdf", width=6, height=8)#
par(mfrow=c(2,2), mar=c(4,4,1.5,0.5))#
part.crit <- "AIC"#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="diff in RF dist from true tree for 'no part' - 'part'", main="Lophotrochozoa")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width, lty=line.type, lwd=line.width)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="", main="Myriapoda")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width, lty=line.type, lwd=line.width)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="diff in eucl dist from true tree for 'no part' - 'part'", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width, lty=line.type, lwd=line.width)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width, lty=line.type, lwd=line.width)#
}#
part.crit <- "BIC"#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="diff in RF dist from true tree for 'no part' - 'part'", main="Lophotrochozoa")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width, lty=line.type, lwd=line.width)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="", main="Myriapoda")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width, lty=line.type, lwd=line.width)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="diff in eucl dist from true tree for 'no part' - 'part'", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width, lty=line.type, lwd=line.width)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width, lty=line.type, lwd=line.width)#
}#
part.crit <- "AICc"#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="diff in RF dist from true tree for 'no part' - 'part'", main="Lophotrochozoa")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width, lty=line.type, lwd=line.width)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="", main="Myriapoda")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width, lty=line.type, lwd=line.width)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="diff in eucl dist from true tree for 'no part' - 'part'", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width, lty=line.type, lwd=line.width)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width, lty=line.type, lwd=line.width)#
}#
dev.off()
library(scales)#
setwd("~/Documents/UNIL/PartitioningMethods_SimulationProject/FunctioningPipeline/AnalysisResults")#
make.merge.id <- function(dat){#
	id.col <- rep(NA, dim(dat)[1])#
	for(i in 1:dim(dat)[1]){#
		if(length(grep("lopho", dat$file[i])) > 0) spp <- "lopho_"#
		if(length(grep("myria", dat$file[i])) > 0) spp <- "myria_"#
		if(length(grep("10", dat$file[i])) > 0) samp <- "10_"#
		if(length(grep("20", dat$file[i])) > 0) samp <- "20_"#
		if(length(grep("40", dat$file[i])) > 0) samp <- "40_"#
		if(length(grep("80", dat$file[i])) > 0) samp <- "80_"#
		if(length(grep("rcluster", dat$file[i])) > 0) algo <- "rcluster_"#
		if(length(grep("greedy", dat$file[i])) > 0) algo <- "greedy_"#
		if(length(grep("noPart", dat$file[i])) > 0) algo <- "noPart_"#
		if(length(grep("AIC", dat$file[i])) > 0) crit <- "AIC"#
		if(length(grep("AICc", dat$file[i])) > 0) crit <- "AICc"#
		if(length(grep("BIC", dat$file[i])) > 0) crit <- "BIC"#
		if(length(grep("noPart", dat$file[i])) > 0) crit <- "noPart"#
		id.col[i] <- paste(c(spp, samp, algo, crit), collapse="")#
	}#
	return(id.col)#
}#
#####################################
#
get.rep.difference <- function(dat, rep, samp.size, spp, partitioning.criterion, distance){#
	temp.dat <- dat[dat$replicate == rep & dat$samp.size == samp.size & dat$species == spp , ]#
	no.part.result <- temp.dat[temp.dat$search.algo == "noPart" ,]#
	rclust.AIC.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "AIC" ,]#
	rclust.BIC.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "BIC" ,]#
	rclust.AICc.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "AICc",]#
	if(partitioning.criterion == "AIC"){#
		if(dim(rclust.AIC.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.AIC.result[distance] }#
	}#
	if(partitioning.criterion == "BIC"){#
		if(dim(rclust.BIC.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.BIC.result[distance] }#
	}#
	if(partitioning.criterion == "AICc"){#
		if(dim(rclust.AICc.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.AICc.result[distance] }#
	}#
	return(as.numeric(difference))			#
}#
#
#####################################
#
get.boxplot.dat <- function(dat, samp.size, spp, partitioning.criterion, distance){	#
	samp.size.dists <- NULL#
	for(j in unique(dat$replicate)){#
		dist <- get.rep.difference(dat, rep=j, samp.size=samp.size, spp=spp, partitioning.criterion=partitioning.criterion, distance=distance)#
		samp.size.dists <- c(samp.size.dists, dist)#
	}#
	return(samp.size.dists)#
}#
#
#####################################
# # # mut rate 500#
# dat1 <- read.csv("AllStatsOutput_New_Rep1_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
# dat1$uniqueID <- paste(dat1$species, dat1$samp.size, dat1$search.algo, dat1$part.IC, sep="_")#
# dat1b <- read.table("RF_Eucl_results_New_Rep1_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
# dat1b$uniqueID <- make.merge.id(dat1b)#
# dat <- merge(dat1, dat1b, by="uniqueID")#
# dat$gene.size <- 100#
# dat$mut.rate <- 500#
# dat1 <- dat#
# mut rate 1000#
#
infiles.a <- c("AllStatsOutput_New_Rep1_100-1000.csv",#
				"AllStatsOutput_New_Rep2_100-1000.csv",#
				"AllStatsOutput_New_Rep3_100-1000.csv",#
				"AllStatsOutput_New_Rep4_100-1000.csv",#
				"AllStatsOutput_New_Rep5_100-1000.csv",#
				"AllStatsOutput_New_Rep6_100-1000.csv"#,#
				#"AllStatsOutput_New_Rep1_100-500.csv",#
				#"AllStatsOutput_New_Rep2_100-500.csv",#
				#"AllStatsOutput_New_Rep3_100-500.csv",#
				#"AllStatsOutput_New_Rep4_100-500.csv",#
				#"AllStatsOutput_New_Rep5_100-500.csv",#
				#"AllStatsOutput_New_Rep6_100-500.csv",#
				"AllStatsOutput_Newest_Rep7_100-1000.csv"#,#
				# "AllStatsOutput_Newest_Rep8_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep9_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep10_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep11_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep12_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep13_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep14_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep15_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep16_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep17_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep18_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep19_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep20_100-1000.csv"#
				)#
infiles.b <- c("RF_Eucl_results_New_Rep1_100-1000.txt",#
				"RF_Eucl_results_New_Rep2_100-1000.txt",#
				"RF_Eucl_results_New_Rep3_100-1000.txt",#
				"RF_Eucl_results_New_Rep4_100-1000.txt",#
				"RF_Eucl_results_New_Rep5_100-1000.txt",#
				"RF_Eucl_results_New_Rep6_100-1000.txt",#
				#"RF_Eucl_results_New_Rep1_100-500.txt",#
				#"RF_Eucl_results_New_Rep2_100-500.txt",#
				#"RF_Eucl_results_New_Rep3_100-500.txt",#
				#"RF_Eucl_results_New_Rep4_100-500.txt",#
				#"RF_Eucl_results_New_Rep5_100-500.txt",#
				#"RF_Eucl_results_New_Rep6_100-500.txt",#
				"RF_Eucl_results_New_Rep7_100-1000.txt"#,#
				# "RF_Eucl_results_New_Rep8_100-1000.txt",#
				# "RF_Eucl_results_New_Rep9_100-1000.txt",#
				# "RF_Eucl_results_New_Rep10_100-1000.txt",#
				# "RF_Eucl_results_New_Rep11_100-1000.txt",#
				# "RF_Eucl_results_New_Rep12_100-1000.txt",#
				# "RF_Eucl_results_New_Rep13_100-1000.txt",#
				# "RF_Eucl_results_New_Rep14_100-1000.txt",#
				# "RF_Eucl_results_New_Rep15_100-1000.txt",#
				# "RF_Eucl_results_New_Rep16_100-1000.txt",#
				# "RF_Eucl_results_New_Rep17_100-1000.txt",#
				# "RF_Eucl_results_New_Rep18_100-1000.txt",#
				# "RF_Eucl_results_New_Rep19_100-1000.txt",#
				# "RF_Eucl_results_New_Rep20_100-1000.txt"#
				)#
#
dat <- NULL#
for(i in 1:length(infiles.a)){#
	temp.dat1 <- read.csv(infiles.a[i], header=TRUE, stringsAsFactors=FALSE)#
	temp.dat1$uniqueID <- paste(temp.dat1$species, temp.dat1$samp.size, temp.dat1$search.algo, temp.dat1$part.IC, sep="_")#
	temp.dat2 <- read.table(infiles.b[i], header=TRUE, stringsAsFactors=FALSE)#
	temp.dat2$uniqueID <- make.merge.id(temp.dat2)#
	temp.dat <- merge(temp.dat1, temp.dat2, by="uniqueID")#
	temp.dat$gene.size <- 100#
	temp.dat$mut.rate <- 1000#
	temp.dat$replicate <- i#
	dat <- rbind(dat, temp.dat)#
}#
#
#####################################
samp.size.col <- c("steelblue4", "darkorange2", "green4", "red3")#
outline.col <- "gray30"#
samp.sizes <- c(10,20,40,80)#
#####################################
ylim1 <- c(-0.05, 0.05)#
ylim2 <- c(-0.75, 0.75)#
box.width <- 1#
line.type <- 1#
line.width <- 1.75#
pdf("Results_Plots/Boxplots.pdf", width=6, height=8)#
par(mfrow=c(2,2), mar=c(4,4,1.5,0.5))#
# part.crit <- "AIC"#
# plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="diff in RF dist from true tree for 'no part' - 'part'", main="Lophotrochozoa")#
# axis(at=c(1:4), c(1:4))#
# abline(h=0, col="gray75", lty=3)#
# text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
# text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
# for(i in 1:4){#
	# plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="rf_dist")#
	# if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	# boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width, lty=line.type, lwd=line.width)#
# }#
#
# plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="", main="Myriapoda")#
# axis(at=c(1:4), c(1:4))#
# abline(h=0, col="gray75", lty=3)#
# text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
# text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
# for(i in 1:4){#
	# plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="rf_dist")#
	# if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	# boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width, lty=line.type, lwd=line.width)#
# }#
#
# plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="diff in eucl dist from true tree for 'no part' - 'part'", main="")#
# axis(at=c(1:4), c(1:4))#
# abline(h=0, col="gray75", lty=3)#
# text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
# text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
# for(i in 1:4){#
	# plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="eucl_dist")#
	# if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	# boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width, lty=line.type, lwd=line.width)#
# }#
#
# plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="", main="")#
# axis(at=c(1:4), c(1:4))#
# abline(h=0, col="gray75", lty=3)#
# text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
# text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
# for(i in 1:4){#
	# plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="eucl_dist")#
	# if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	# boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width, lty=line.type, lwd=line.width)#
# }#
part.crit <- "BIC"#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="diff in RF dist from true tree for 'no part' - 'part'", main="Lophotrochozoa")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width, lty=line.type, lwd=line.width)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="", main="Myriapoda")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width, lty=line.type, lwd=line.width)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="diff in eucl dist from true tree for 'no part' - 'part'", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width, lty=line.type, lwd=line.width)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width, lty=line.type, lwd=line.width)#
}#
# # #
# part.crit <- "AICc"#
# plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="diff in RF dist from true tree for 'no part' - 'part'", main="Lophotrochozoa")#
# axis(at=c(1:4), c(1:4))#
# abline(h=0, col="gray75", lty=3)#
# text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
# text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
# for(i in 1:4){#
	# plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="rf_dist")#
	# if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	# boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width, lty=line.type, lwd=line.width)#
# }#
#
# plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="", main="Myriapoda")#
# axis(at=c(1:4), c(1:4))#
# abline(h=0, col="gray75", lty=3)#
# text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
# text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
# for(i in 1:4){#
	# plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="rf_dist")#
	# if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	# boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width, lty=line.type, lwd=line.width)#
# }#
#
# plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="diff in eucl dist from true tree for 'no part' - 'part'", main="")#
# axis(at=c(1:4), c(1:4))#
# abline(h=0, col="gray75", lty=3)#
# text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
# text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
# for(i in 1:4){#
	# plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="eucl_dist")#
	# if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	# boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width, lty=line.type, lwd=line.width)#
# }#
#
# plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="", main="")#
# axis(at=c(1:4), c(1:4))#
# abline(h=0, col="gray75", lty=3)#
# text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
# text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
# for(i in 1:4){#
	# plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="eucl_dist")#
	# if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	# boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width, lty=line.type, lwd=line.width)#
# }#
dev.off()
library(scales)#
setwd("~/Documents/UNIL/PartitioningMethods_SimulationProject/FunctioningPipeline/AnalysisResults")#
make.merge.id <- function(dat){#
	id.col <- rep(NA, dim(dat)[1])#
	for(i in 1:dim(dat)[1]){#
		if(length(grep("lopho", dat$file[i])) > 0) spp <- "lopho_"#
		if(length(grep("myria", dat$file[i])) > 0) spp <- "myria_"#
		if(length(grep("10", dat$file[i])) > 0) samp <- "10_"#
		if(length(grep("20", dat$file[i])) > 0) samp <- "20_"#
		if(length(grep("40", dat$file[i])) > 0) samp <- "40_"#
		if(length(grep("80", dat$file[i])) > 0) samp <- "80_"#
		if(length(grep("rcluster", dat$file[i])) > 0) algo <- "rcluster_"#
		if(length(grep("greedy", dat$file[i])) > 0) algo <- "greedy_"#
		if(length(grep("noPart", dat$file[i])) > 0) algo <- "noPart_"#
		if(length(grep("AIC", dat$file[i])) > 0) crit <- "AIC"#
		if(length(grep("AICc", dat$file[i])) > 0) crit <- "AICc"#
		if(length(grep("BIC", dat$file[i])) > 0) crit <- "BIC"#
		if(length(grep("noPart", dat$file[i])) > 0) crit <- "noPart"#
		id.col[i] <- paste(c(spp, samp, algo, crit), collapse="")#
	}#
	return(id.col)#
}#
#####################################
species <- c("lopho", "myria")#
spp.pch <- c(1,2)#
samp.sizes <- c(10,20,40,80)#
samp.size.col <- c("steelblue4", "darkorange2", "green4", "red3")#
pt.wid <- 2#
opac <- 0.95#
#
analyze.rf.datset <- function(dat, criterion){#
	spp.it <- 1#
	for(i in species){#
		col.it <- 1#
		for(j in samp.sizes){#
			no.part.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "noPart" ,]#
			rclust.AIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AIC" ,]#
			rclust.BIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "BIC" ,]#
			rclust.AICc.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AICc",]#
			if(criterion == "AIC") points(no.part.result$rf_dist - rclust.AIC.result$rf_dist, no.part.result$max.log.lik - rclust.AIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)#
			if(criterion == "BIC") points(no.part.result$rf_dist - rclust.BIC.result$rf_dist, no.part.result$max.log.lik - rclust.BIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)#
			if(criterion == "AICc") points(no.part.result$rf_dist - rclust.AICc.result$rf_dist, no.part.result$max.log.lik - rclust.AICc.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)			#
			col.it <- col.it + 1	#
		}#
		spp.it <- spp.it + 1	#
	}#
}#
analyze.euc.datset <- function(dat, criterion){#
	spp.it <- 1#
	for(i in species){#
		col.it <- 1#
		for(j in samp.sizes){#
			no.part.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "noPart" ,]#
			rclust.AIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AIC" ,]#
			rclust.BIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "BIC" ,]#
			rclust.AICc.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AICc",]#
			if(criterion == "AIC") points(no.part.result$eucl_dist - rclust.AIC.result$eucl_dist, no.part.result$max.log.lik - rclust.AIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)#
			if(criterion == "BIC") points(no.part.result$eucl_dist - rclust.BIC.result$eucl_dist, no.part.result$max.log.lik - rclust.BIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)#
			if(criterion == "AICc") points(no.part.result$eucl_dist - rclust.AICc.result$eucl_dist, no.part.result$max.log.lik - rclust.AICc.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)			#
			col.it <- col.it + 1	#
		}#
		spp.it <- spp.it + 1	#
	}#
}#
#
# can use any of these scores from the treebuilding in IQtree:#
#   max.log.lik#
#   uncon.log.lik#
#   AIC#
#   BIC#
#   AICc#
#   cons.log.lik (consensus tree LL)#
#   sum.branch.lens#
#   sum.int.branch.lens#
euc.size.by.partitions <- function(dat, criterion, stat="max.log.lik"){#
	spp.it <- 1#
	for(i in species){#
		col.it <- 1#
		for(j in samp.sizes){#
			no.part.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "noPart" ,]#
			rclust.AIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AIC" ,]#
			rclust.BIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "BIC" ,]#
			rclust.AICc.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AICc",]#
			if(stat == "max.log.lik"){#
				if(criterion == "AIC") points(no.part.result$max.log.lik - rclust.AIC.result$max.log.lik, no.part.result$eucl_dist - rclust.AIC.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AIC.result$num.partitions/2)#
				if(criterion == "BIC") points(no.part.result$max.log.lik - rclust.BIC.result$max.log.lik, no.part.result$eucl_dist - rclust.BIC.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.BIC.result$num.partitions/2)#
				if(criterion == "AICc") points(no.part.result$max.log.lik - rclust.AICc.result$max.log.lik, no.part.result$eucl_dist - rclust.AICc.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AICc.result$num.partitions/2)			#
			}#
			if(stat == "uncon.log.lik"){#
				if(criterion == "AIC") points(no.part.result$uncon.log.lik - rclust.AIC.result$uncon.log.lik, no.part.result$eucl_dist - rclust.AIC.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AIC.result$num.partitions/2)#
				if(criterion == "BIC") points(no.part.result$uncon.log.lik - rclust.BIC.result$uncon.log.lik, no.part.result$eucl_dist - rclust.BIC.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.BIC.result$num.partitions/2)#
				if(criterion == "AICc") points(no.part.result$uncon.log.lik - rclust.AICc.result$uncon.log.lik, no.part.result$eucl_dist - rclust.AICc.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AICc.result$num.partitions/2)			#
			}		#
			col.it <- col.it + 1	#
		}#
		spp.it <- spp.it + 1	#
	}#
}#
rf_dist.size.by.partitions <- function(dat, criterion, stat="max.log.lik"){#
	spp.it <- 1#
	for(i in species){#
		col.it <- 1#
		for(j in samp.sizes){#
			no.part.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "noPart" ,]#
			rclust.AIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AIC" ,]#
			rclust.BIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "BIC" ,]#
			rclust.AICc.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AICc",]#
			if(stat == "max.log.lik"){#
				if(criterion == "AIC") points(no.part.result$max.log.lik - rclust.AIC.result$max.log.lik, no.part.result$rf_dist - rclust.AIC.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AIC.result$num.partitions/2)#
				if(criterion == "BIC") points(no.part.result$max.log.lik - rclust.BIC.result$max.log.lik, no.part.result$rf_dist - rclust.BIC.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.BIC.result$num.partitions/2)#
				if(criterion == "AICc") points(no.part.result$max.log.lik - rclust.AICc.result$max.log.lik, no.part.result$rf_dist - rclust.AICc.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AICc.result$num.partitions/2)			#
			}#
			if(stat == "uncon.log.lik"){#
				if(criterion == "AIC") points(no.part.result$uncon.log.lik - rclust.AIC.result$uncon.log.lik, no.part.result$rf_dist - rclust.AIC.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AIC.result$num.partitions/2)#
				if(criterion == "BIC") points(no.part.result$uncon.log.lik - rclust.BIC.result$uncon.log.lik, no.part.result$rf_dist - rclust.BIC.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.BIC.result$num.partitions/2)#
				if(criterion == "AICc") points(no.part.result$uncon.log.lik - rclust.AICc.result$uncon.log.lik, no.part.result$rf_dist - rclust.AICc.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AICc.result$num.partitions/2)			#
			}		#
			col.it <- col.it + 1	#
		}#
		spp.it <- spp.it + 1	#
	}#
}#
#####################################
# mut rate 500#
dat1 <- read.csv("AllStatsOutput_New_Rep1_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
dat1$uniqueID <- paste(dat1$species, dat1$samp.size, dat1$search.algo, dat1$part.IC, sep="_")#
dat1b <- read.table("RF_Eucl_results_New_Rep1_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
dat1b$uniqueID <- make.merge.id(dat1b)#
dat <- merge(dat1, dat1b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 500#
dat1 <- dat#
#
dat2 <- read.csv("AllStatsOutput_New_Rep2_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
dat2$uniqueID <- paste(dat2$species, dat2$samp.size, dat2$search.algo, dat2$part.IC, sep="_")#
dat2b <- read.table("RF_Eucl_results_New_Rep2_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
dat2b$uniqueID <- make.merge.id(dat2b)#
dat <- merge(dat2, dat2b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 500#
dat2 <- dat#
#
dat3 <- read.csv("AllStatsOutput_New_Rep3_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
dat3$uniqueID <- paste(dat3$species, dat3$samp.size, dat3$search.algo, dat3$part.IC, sep="_")#
dat3b <- read.table("RF_Eucl_results_New_Rep3_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
dat3b$uniqueID <- make.merge.id(dat3b)#
dat <- merge(dat3, dat3b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 500#
dat3 <- dat#
#
dat4 <- read.csv("AllStatsOutput_New_Rep4_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
dat4$uniqueID <- paste(dat4$species, dat4$samp.size, dat4$search.algo, dat4$part.IC, sep="_")#
dat4b <- read.table("RF_Eucl_results_New_Rep4_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
dat4b$uniqueID <- make.merge.id(dat4b)#
dat <- merge(dat4, dat4b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 500#
dat4 <- dat#
#
dat5 <- read.csv("AllStatsOutput_New_Rep5_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
dat5$uniqueID <- paste(dat5$species, dat5$samp.size, dat5$search.algo, dat5$part.IC, sep="_")#
dat5b <- read.table("RF_Eucl_results_New_Rep5_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
dat5b$uniqueID <- make.merge.id(dat5b)#
dat <- merge(dat5, dat5b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 500#
dat5 <- dat#
#
dat5b <- read.csv("AllStatsOutput_New_Rep6_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
dat5b$uniqueID <- paste(dat5b$species, dat5b$samp.size, dat5b$search.algo, dat5b$part.IC, sep="_")#
dat5bb <- read.table("RF_Eucl_results_New_Rep6_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
dat5bb$uniqueID <- make.merge.id(dat5bb)#
dat <- merge(dat5b, dat5bb, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 500#
dat5b <- dat#
# mut rate 1000#
dat6 <- read.csv("AllStatsOutput_New_Rep1_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat6$uniqueID <- paste(dat6$species, dat6$samp.size, dat6$search.algo, dat6$part.IC, sep="_")#
dat6b <- read.table("RF_Eucl_results_New_Rep1_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat6b$uniqueID <- make.merge.id(dat6b)#
dat <- merge(dat6, dat6b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat6 <- dat#
#
dat7 <- read.csv("AllStatsOutput_New_Rep2_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat7$uniqueID <- paste(dat7$species, dat7$samp.size, dat7$search.algo, dat7$part.IC, sep="_")#
dat7b <- read.table("RF_Eucl_results_New_Rep2_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat7b$uniqueID <- make.merge.id(dat7b)#
dat <- merge(dat7, dat7b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat7 <- dat#
#
dat8 <- read.csv("AllStatsOutput_New_Rep3_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat8$uniqueID <- paste(dat8$species, dat8$samp.size, dat8$search.algo, dat8$part.IC, sep="_")#
dat8b <- read.table("RF_Eucl_results_New_Rep3_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat8b$uniqueID <- make.merge.id(dat8b)#
dat <- merge(dat8, dat8b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat8 <- dat#
#
dat9 <- read.csv("AllStatsOutput_New_Rep4_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat9$uniqueID <- paste(dat9$species, dat9$samp.size, dat9$search.algo, dat9$part.IC, sep="_")#
dat9b <- read.table("RF_Eucl_results_New_Rep4_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat9b$uniqueID <- make.merge.id(dat9b)#
dat <- merge(dat9, dat9b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat9 <- dat#
#
dat10 <- read.csv("AllStatsOutput_New_Rep5_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat10$uniqueID <- paste(dat10$species, dat10$samp.size, dat10$search.algo, dat10$part.IC, sep="_")#
dat10b <- read.table("RF_Eucl_results_New_Rep5_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat10b$uniqueID <- make.merge.id(dat10b)#
dat <- merge(dat10, dat10b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat10 <- dat#
#
dat11 <- read.csv("AllStatsOutput_New_Rep6_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat11$uniqueID <- paste(dat11$species, dat11$samp.size, dat11$search.algo, dat11$part.IC, sep="_")#
dat11b <- read.table("RF_Eucl_results_New_Rep6_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat11b$uniqueID <- make.merge.id(dat11b)#
dat <- merge(dat11, dat11b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat11 <- dat#
#
dat12 <- read.csv("AllStatsOutput_Newest_Rep7_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat12$uniqueID <- paste(dat12$species, dat12$samp.size, dat12$search.algo, dat12$part.IC, sep="_")#
dat12b <- read.table("RF_Eucl_results_New_Rep7_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat12b$uniqueID <- make.merge.id(dat12b)#
dat <- merge(dat12, dat12b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat12 <- dat#
#
dat13 <- read.csv("AllStatsOutput_Newest_Rep8_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat13$uniqueID <- paste(dat13$species, dat13$samp.size, dat13$search.algo, dat13$part.IC, sep="_")#
dat13b <- read.table("RF_Eucl_results_New_Rep8_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat13b$uniqueID <- make.merge.id(dat13b)#
dat <- merge(dat13, dat13b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat13 <- dat#
#########
#########
plot.stat <- "max.log.lik"#
part.text1 <- -35#
part.text2 <- 0.65#
part.text3 <- -0.65#
pdf("Results_Plots/Flipped_CompareLogLikelihoods.pdf", width=4, height=8)#
# par(mfrow=c(3,1), mar=c(4,4,1.5,0.5)) # if doing all three information criteria for partitionfinder#
par(mfrow=c(2,1), mar=c(4,4,1.5,0.5)) # if just looking at BIC for partitionfinder#
opac <- 0.75#
pt.lwd <- 2#
xlimits <- c(-55,2.5)#
ylimits <- c(-0.75,0.75)#
# plot(0, type="n", xlim=xlimits, ylim=ylimits, ylab="", xlab="", main="partitioning w/ AIC")#
# abline(h=0, col="gray75", lty=2); abline(v=0, col="gray75", lty=2)#
# #analyze.euc.datset(dat1, "AIC")#
# text(part.text1, part.text2, expression(italic("partitioning better")), cex=1, col="green4")#
# text(part.text1, part.text3, expression(italic("no partitioning better")), cex=1, col="red3")#
# # euc.size.by.partitions(dat1, "AIC", stat=plot.stat)#
# # euc.size.by.partitions(dat2, "AIC", stat=plot.stat)#
# # euc.size.by.partitions(dat3, "AIC", stat=plot.stat)#
# # euc.size.by.partitions(dat4, "AIC", stat=plot.stat)#
# # euc.size.by.partitions(dat5, "AIC", stat=plot.stat)#
# # euc.size.by.partitions(dat5b, "AIC", stat=plot.stat)#
# euc.size.by.partitions(dat6, "AIC", stat=plot.stat)#
# euc.size.by.partitions(dat7, "AIC", stat=plot.stat)#
# euc.size.by.partitions(dat8, "AIC", stat=plot.stat)#
# euc.size.by.partitions(dat9, "AIC", stat=plot.stat)#
# euc.size.by.partitions(dat10, "AIC", stat=plot.stat)#
# euc.size.by.partitions(dat11, "AIC", stat=plot.stat)#
# euc.size.by.partitions(dat12, "AIC", stat=plot.stat)#
# euc.size.by.partitions(dat13, "AIC", stat=plot.stat)#
#
plot(0, type="n", xlim=xlimits, ylim=ylimits, ylab="", xlab="", main="partitioning w/ BIC")#
mtext(side=2, at=0, line=2.5, "difference in euclidean distance from true tree for 'no partitioning' - 'partitioning'")#
abline(h=0, col="gray75", lty=2); abline(v=0, col="gray75", lty=2)#
text(part.text1, part.text2, expression(italic("partitioning better")), cex=1, col="green4")#
text(part.text1, part.text3, expression(italic("no partitioning better")), cex=1, col="red3")#
# euc.size.by.partitions(dat1, "BIC", stat=plot.stat)#
# euc.size.by.partitions(dat2, "BIC", stat=plot.stat)#
# euc.size.by.partitions(dat3, "BIC", stat=plot.stat)#
# euc.size.by.partitions(dat4, "BIC", stat=plot.stat)#
# euc.size.by.partitions(dat5, "BIC", stat=plot.stat)#
# euc.size.by.partitions(dat5b, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat6, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat7, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat8, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat9, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat10, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat11, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat12, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat13, "BIC", stat=plot.stat)#
legend("bottomleft", c("lopho", "myria"), species, pch=spp.pch, col="black", bg="white", bty="n")#
#
# plot(0, type="n", xlim=xlimits, ylim=ylimits, ylab="", xlab="difference in IQtree max log likelihood of 'no partitioning' - 'partitioning'", main="partitioning w/ AICc")#
# abline(h=0, col="gray75", lty=2); abline(v=0, col="gray75", lty=2)#
# text(part.text1, part.text2, expression(italic("partitioning better")), cex=1, col="green4")#
# text(part.text1, part.text3, expression(italic("no partitioning better")), cex=1, col="red3")#
# # euc.size.by.partitions(dat1, "AICc", stat=plot.stat)#
# # euc.size.by.partitions(dat2, "AICc", stat=plot.stat)#
# # euc.size.by.partitions(dat3, "AICc", stat=plot.stat)#
# # euc.size.by.partitions(dat4, "AICc", stat=plot.stat)#
# # euc.size.by.partitions(dat5, "AICc", stat=plot.stat)#
# # euc.size.by.partitions(dat5b, "AICc", stat=plot.stat)#
# euc.size.by.partitions(dat6, "AICc", stat=plot.stat)#
# euc.size.by.partitions(dat7, "AICc", stat=plot.stat)#
# euc.size.by.partitions(dat8, "AICc", stat=plot.stat)#
# euc.size.by.partitions(dat9, "AICc", stat=plot.stat)#
# euc.size.by.partitions(dat10, "AICc", stat=plot.stat)#
# euc.size.by.partitions(dat11, "AICc", stat=plot.stat)#
# euc.size.by.partitions(dat12, "AICc", stat=plot.stat)#
# euc.size.by.partitions(dat13, "AICc", stat=plot.stat)#
#
legend("bottomleft", c("10", "20", "40", "80"), pch=15, col=samp.size.col, title = "num. genes", bg="white", cex=0.9, pt.cex=1.5)#
#__________________________________________________________________________________________##
#
# robinson foulds distance difference#
ylimits <- c(-0.19,0.14)#
# plot(0, type="n", xlim=xlimits, ylim=ylimits, ylab="", xlab="", main="partitioning w/ AIC")#
# abline(h=0, col="gray75", lty=2); abline(v=0, col="gray75", lty=2)#
# #analyze.euc.datset(dat1, "AIC")#
# text(part.text1, part.text2, expression(italic("partitioning better")), cex=1, col="green4")#
# text(part.text1, part.text3, expression(italic("no partitioning better")), cex=1, col="red3")#
# # rf_dist.size.by.partitions(dat1, "AIC", stat=plot.stat)#
# # rf_dist.size.by.partitions(dat2, "AIC", stat=plot.stat)#
# # rf_dist.size.by.partitions(dat3, "AIC", stat=plot.stat)#
# # rf_dist.size.by.partitions(dat4, "AIC", stat=plot.stat)#
# # rf_dist.size.by.partitions(dat5, "AIC", stat=plot.stat)#
# # rf_dist.size.by.partitions(dat5b, "AIC", stat=plot.stat)#
# rf_dist.size.by.partitions(dat6, "AIC", stat=plot.stat)#
# rf_dist.size.by.partitions(dat7, "AIC", stat=plot.stat)#
# rf_dist.size.by.partitions(dat8, "AIC", stat=plot.stat)#
# rf_dist.size.by.partitions(dat9, "AIC", stat=plot.stat)#
# rf_dist.size.by.partitions(dat10, "AIC", stat=plot.stat)#
# rf_dist.size.by.partitions(dat11, "AIC", stat=plot.stat)#
# rf_dist.size.by.partitions(dat12, "AIC", stat=plot.stat)#
# rf_dist.size.by.partitions(dat13, "AIC", stat=plot.stat)#
#
plot(0, type="n", xlim=xlimits, ylim=ylimits, ylab="", xlab="", main="partitioning w/ BIC")#
mtext(side=2, at=0, line=2.5, "difference in RF distance from true tree for 'no partitioning' - 'partitioning'")#
abline(h=0, col="gray75", lty=2); abline(v=0, col="gray75", lty=2)#
text(part.text1, part.text2, expression(italic("partitioning better")), cex=1, col="green4")#
text(part.text1, part.text3, expression(italic("no partitioning better")), cex=1, col="red3")#
# rf_dist.size.by.partitions(dat1, "BIC", stat=plot.stat)#
# rf_dist.size.by.partitions(dat2, "BIC", stat=plot.stat)#
# rf_dist.size.by.partitions(dat3, "BIC", stat=plot.stat)#
# rf_dist.size.by.partitions(dat4, "BIC", stat=plot.stat)#
# rf_dist.size.by.partitions(dat5, "BIC", stat=plot.stat)#
# rf_dist.size.by.partitions(dat5b, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat6, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat7, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat8, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat9, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat10, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat11, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat12, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat13, "BIC", stat=plot.stat)#
legend("bottomleft", c("lopho", "myria"), species, pch=spp.pch, col="black", bg="white", bty="n")#
#
# plot(0, type="n", xlim=xlimits, ylim=ylimits, ylab="", xlab="difference in IQtree max log likelihood of 'no partitioning' - 'partitioning'", main="partitioning w/ AICc")#
# abline(h=0, col="gray75", lty=2); abline(v=0, col="gray75", lty=2)#
# text(part.text1, part.text2, expression(italic("partitioning better")), cex=1, col="green4")#
# text(part.text1, part.text3, expression(italic("no partitioning better")), cex=1, col="red3")#
# # rf_dist.size.by.partitions(dat1, "AICc", stat=plot.stat)#
# # rf_dist.size.by.partitions(dat2, "AICc", stat=plot.stat)#
# # rf_dist.size.by.partitions(dat3, "AICc", stat=plot.stat)#
# # rf_dist.size.by.partitions(dat4, "AICc", stat=plot.stat)#
# # rf_dist.size.by.partitions(dat5, "AICc", stat=plot.stat)#
# # rf_dist.size.by.partitions(dat5b, "AICc", stat=plot.stat)#
# rf_dist.size.by.partitions(dat6, "AICc", stat=plot.stat)#
# rf_dist.size.by.partitions(dat7, "AICc", stat=plot.stat)#
# rf_dist.size.by.partitions(dat8, "AICc", stat=plot.stat)#
# rf_dist.size.by.partitions(dat9, "AICc", stat=plot.stat)#
# rf_dist.size.by.partitions(dat10, "AICc", stat=plot.stat)#
# rf_dist.size.by.partitions(dat11, "AICc", stat=plot.stat)#
# rf_dist.size.by.partitions(dat12, "AICc", stat=plot.stat)#
# rf_dist.size.by.partitions(dat13, "AICc", stat=plot.stat)#
#
legend("bottomleft", c("10", "20", "40", "80"), pch=15, col=samp.size.col, title = "num. genes", bg="white", cex=0.9, pt.cex=1.5)#
#
dev.off()
library(scales)#
setwd("~/Documents/UNIL/PartitioningMethods_SimulationProject/FunctioningPipeline/AnalysisResults")#
make.merge.id <- function(dat){#
	id.col <- rep(NA, dim(dat)[1])#
	for(i in 1:dim(dat)[1]){#
		if(length(grep("lopho", dat$file[i])) > 0) spp <- "lopho_"#
		if(length(grep("myria", dat$file[i])) > 0) spp <- "myria_"#
		if(length(grep("10", dat$file[i])) > 0) samp <- "10_"#
		if(length(grep("20", dat$file[i])) > 0) samp <- "20_"#
		if(length(grep("40", dat$file[i])) > 0) samp <- "40_"#
		if(length(grep("80", dat$file[i])) > 0) samp <- "80_"#
		if(length(grep("rcluster", dat$file[i])) > 0) algo <- "rcluster_"#
		if(length(grep("greedy", dat$file[i])) > 0) algo <- "greedy_"#
		if(length(grep("noPart", dat$file[i])) > 0) algo <- "noPart_"#
		if(length(grep("AIC", dat$file[i])) > 0) crit <- "AIC"#
		if(length(grep("AICc", dat$file[i])) > 0) crit <- "AICc"#
		if(length(grep("BIC", dat$file[i])) > 0) crit <- "BIC"#
		if(length(grep("noPart", dat$file[i])) > 0) crit <- "noPart"#
		id.col[i] <- paste(c(spp, samp, algo, crit), collapse="")#
	}#
	return(id.col)#
}#
#####################################
species <- c("lopho", "myria")#
spp.pch <- c(1,2)#
samp.sizes <- c(10,20,40,80)#
samp.size.col <- c("steelblue4", "darkorange2", "green4", "red3")#
pt.wid <- 2#
opac <- 0.95#
#
analyze.rf.datset <- function(dat, criterion){#
	spp.it <- 1#
	for(i in species){#
		col.it <- 1#
		for(j in samp.sizes){#
			no.part.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "noPart" ,]#
			rclust.AIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AIC" ,]#
			rclust.BIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "BIC" ,]#
			rclust.AICc.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AICc",]#
			if(criterion == "AIC") points(no.part.result$rf_dist - rclust.AIC.result$rf_dist, no.part.result$max.log.lik - rclust.AIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)#
			if(criterion == "BIC") points(no.part.result$rf_dist - rclust.BIC.result$rf_dist, no.part.result$max.log.lik - rclust.BIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)#
			if(criterion == "AICc") points(no.part.result$rf_dist - rclust.AICc.result$rf_dist, no.part.result$max.log.lik - rclust.AICc.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)			#
			col.it <- col.it + 1	#
		}#
		spp.it <- spp.it + 1	#
	}#
}#
analyze.euc.datset <- function(dat, criterion){#
	spp.it <- 1#
	for(i in species){#
		col.it <- 1#
		for(j in samp.sizes){#
			no.part.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "noPart" ,]#
			rclust.AIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AIC" ,]#
			rclust.BIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "BIC" ,]#
			rclust.AICc.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AICc",]#
			if(criterion == "AIC") points(no.part.result$eucl_dist - rclust.AIC.result$eucl_dist, no.part.result$max.log.lik - rclust.AIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)#
			if(criterion == "BIC") points(no.part.result$eucl_dist - rclust.BIC.result$eucl_dist, no.part.result$max.log.lik - rclust.BIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)#
			if(criterion == "AICc") points(no.part.result$eucl_dist - rclust.AICc.result$eucl_dist, no.part.result$max.log.lik - rclust.AICc.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)			#
			col.it <- col.it + 1	#
		}#
		spp.it <- spp.it + 1	#
	}#
}#
#
# can use any of these scores from the treebuilding in IQtree:#
#   max.log.lik#
#   uncon.log.lik#
#   AIC#
#   BIC#
#   AICc#
#   cons.log.lik (consensus tree LL)#
#   sum.branch.lens#
#   sum.int.branch.lens#
euc.size.by.partitions <- function(dat, criterion, stat="max.log.lik"){#
	spp.it <- 1#
	for(i in species){#
		col.it <- 1#
		for(j in samp.sizes){#
			no.part.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "noPart" ,]#
			rclust.AIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AIC" ,]#
			rclust.BIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "BIC" ,]#
			rclust.AICc.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AICc",]#
			if(stat == "max.log.lik"){#
				if(criterion == "AIC") points(no.part.result$max.log.lik - rclust.AIC.result$max.log.lik, no.part.result$eucl_dist - rclust.AIC.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AIC.result$num.partitions/2)#
				if(criterion == "BIC") points(no.part.result$max.log.lik - rclust.BIC.result$max.log.lik, no.part.result$eucl_dist - rclust.BIC.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.BIC.result$num.partitions/2)#
				if(criterion == "AICc") points(no.part.result$max.log.lik - rclust.AICc.result$max.log.lik, no.part.result$eucl_dist - rclust.AICc.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AICc.result$num.partitions/2)			#
			}#
			if(stat == "uncon.log.lik"){#
				if(criterion == "AIC") points(no.part.result$uncon.log.lik - rclust.AIC.result$uncon.log.lik, no.part.result$eucl_dist - rclust.AIC.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AIC.result$num.partitions/2)#
				if(criterion == "BIC") points(no.part.result$uncon.log.lik - rclust.BIC.result$uncon.log.lik, no.part.result$eucl_dist - rclust.BIC.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.BIC.result$num.partitions/2)#
				if(criterion == "AICc") points(no.part.result$uncon.log.lik - rclust.AICc.result$uncon.log.lik, no.part.result$eucl_dist - rclust.AICc.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AICc.result$num.partitions/2)			#
			}		#
			col.it <- col.it + 1	#
		}#
		spp.it <- spp.it + 1	#
	}#
}#
rf_dist.size.by.partitions <- function(dat, criterion, stat="max.log.lik"){#
	spp.it <- 1#
	for(i in species){#
		col.it <- 1#
		for(j in samp.sizes){#
			no.part.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "noPart" ,]#
			rclust.AIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AIC" ,]#
			rclust.BIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "BIC" ,]#
			rclust.AICc.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AICc",]#
			if(stat == "max.log.lik"){#
				if(criterion == "AIC") points(no.part.result$max.log.lik - rclust.AIC.result$max.log.lik, no.part.result$rf_dist - rclust.AIC.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AIC.result$num.partitions/2)#
				if(criterion == "BIC") points(no.part.result$max.log.lik - rclust.BIC.result$max.log.lik, no.part.result$rf_dist - rclust.BIC.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.BIC.result$num.partitions/2)#
				if(criterion == "AICc") points(no.part.result$max.log.lik - rclust.AICc.result$max.log.lik, no.part.result$rf_dist - rclust.AICc.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AICc.result$num.partitions/2)			#
			}#
			if(stat == "uncon.log.lik"){#
				if(criterion == "AIC") points(no.part.result$uncon.log.lik - rclust.AIC.result$uncon.log.lik, no.part.result$rf_dist - rclust.AIC.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AIC.result$num.partitions/2)#
				if(criterion == "BIC") points(no.part.result$uncon.log.lik - rclust.BIC.result$uncon.log.lik, no.part.result$rf_dist - rclust.BIC.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.BIC.result$num.partitions/2)#
				if(criterion == "AICc") points(no.part.result$uncon.log.lik - rclust.AICc.result$uncon.log.lik, no.part.result$rf_dist - rclust.AICc.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AICc.result$num.partitions/2)			#
			}		#
			col.it <- col.it + 1	#
		}#
		spp.it <- spp.it + 1	#
	}#
}#
#####################################
# mut rate 500#
dat1 <- read.csv("AllStatsOutput_New_Rep1_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
dat1$uniqueID <- paste(dat1$species, dat1$samp.size, dat1$search.algo, dat1$part.IC, sep="_")#
dat1b <- read.table("RF_Eucl_results_New_Rep1_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
dat1b$uniqueID <- make.merge.id(dat1b)#
dat <- merge(dat1, dat1b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 500#
dat1 <- dat#
#
dat2 <- read.csv("AllStatsOutput_New_Rep2_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
dat2$uniqueID <- paste(dat2$species, dat2$samp.size, dat2$search.algo, dat2$part.IC, sep="_")#
dat2b <- read.table("RF_Eucl_results_New_Rep2_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
dat2b$uniqueID <- make.merge.id(dat2b)#
dat <- merge(dat2, dat2b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 500#
dat2 <- dat#
#
dat3 <- read.csv("AllStatsOutput_New_Rep3_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
dat3$uniqueID <- paste(dat3$species, dat3$samp.size, dat3$search.algo, dat3$part.IC, sep="_")#
dat3b <- read.table("RF_Eucl_results_New_Rep3_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
dat3b$uniqueID <- make.merge.id(dat3b)#
dat <- merge(dat3, dat3b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 500#
dat3 <- dat#
#
dat4 <- read.csv("AllStatsOutput_New_Rep4_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
dat4$uniqueID <- paste(dat4$species, dat4$samp.size, dat4$search.algo, dat4$part.IC, sep="_")#
dat4b <- read.table("RF_Eucl_results_New_Rep4_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
dat4b$uniqueID <- make.merge.id(dat4b)#
dat <- merge(dat4, dat4b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 500#
dat4 <- dat#
#
dat5 <- read.csv("AllStatsOutput_New_Rep5_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
dat5$uniqueID <- paste(dat5$species, dat5$samp.size, dat5$search.algo, dat5$part.IC, sep="_")#
dat5b <- read.table("RF_Eucl_results_New_Rep5_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
dat5b$uniqueID <- make.merge.id(dat5b)#
dat <- merge(dat5, dat5b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 500#
dat5 <- dat#
#
dat5b <- read.csv("AllStatsOutput_New_Rep6_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
dat5b$uniqueID <- paste(dat5b$species, dat5b$samp.size, dat5b$search.algo, dat5b$part.IC, sep="_")#
dat5bb <- read.table("RF_Eucl_results_New_Rep6_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
dat5bb$uniqueID <- make.merge.id(dat5bb)#
dat <- merge(dat5b, dat5bb, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 500#
dat5b <- dat#
# mut rate 1000#
dat6 <- read.csv("AllStatsOutput_New_Rep1_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat6$uniqueID <- paste(dat6$species, dat6$samp.size, dat6$search.algo, dat6$part.IC, sep="_")#
dat6b <- read.table("RF_Eucl_results_New_Rep1_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat6b$uniqueID <- make.merge.id(dat6b)#
dat <- merge(dat6, dat6b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat6 <- dat#
#
dat7 <- read.csv("AllStatsOutput_New_Rep2_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat7$uniqueID <- paste(dat7$species, dat7$samp.size, dat7$search.algo, dat7$part.IC, sep="_")#
dat7b <- read.table("RF_Eucl_results_New_Rep2_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat7b$uniqueID <- make.merge.id(dat7b)#
dat <- merge(dat7, dat7b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat7 <- dat#
#
dat8 <- read.csv("AllStatsOutput_New_Rep3_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat8$uniqueID <- paste(dat8$species, dat8$samp.size, dat8$search.algo, dat8$part.IC, sep="_")#
dat8b <- read.table("RF_Eucl_results_New_Rep3_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat8b$uniqueID <- make.merge.id(dat8b)#
dat <- merge(dat8, dat8b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat8 <- dat#
#
dat9 <- read.csv("AllStatsOutput_New_Rep4_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat9$uniqueID <- paste(dat9$species, dat9$samp.size, dat9$search.algo, dat9$part.IC, sep="_")#
dat9b <- read.table("RF_Eucl_results_New_Rep4_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat9b$uniqueID <- make.merge.id(dat9b)#
dat <- merge(dat9, dat9b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat9 <- dat#
#
dat10 <- read.csv("AllStatsOutput_New_Rep5_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat10$uniqueID <- paste(dat10$species, dat10$samp.size, dat10$search.algo, dat10$part.IC, sep="_")#
dat10b <- read.table("RF_Eucl_results_New_Rep5_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat10b$uniqueID <- make.merge.id(dat10b)#
dat <- merge(dat10, dat10b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat10 <- dat#
#
dat11 <- read.csv("AllStatsOutput_New_Rep6_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat11$uniqueID <- paste(dat11$species, dat11$samp.size, dat11$search.algo, dat11$part.IC, sep="_")#
dat11b <- read.table("RF_Eucl_results_New_Rep6_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat11b$uniqueID <- make.merge.id(dat11b)#
dat <- merge(dat11, dat11b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat11 <- dat#
#
dat12 <- read.csv("AllStatsOutput_Newest_Rep7_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat12$uniqueID <- paste(dat12$species, dat12$samp.size, dat12$search.algo, dat12$part.IC, sep="_")#
dat12b <- read.table("RF_Eucl_results_New_Rep7_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat12b$uniqueID <- make.merge.id(dat12b)#
dat <- merge(dat12, dat12b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat12 <- dat#
#
dat13 <- read.csv("AllStatsOutput_Newest_Rep8_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat13$uniqueID <- paste(dat13$species, dat13$samp.size, dat13$search.algo, dat13$part.IC, sep="_")#
dat13b <- read.table("RF_Eucl_results_New_Rep8_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat13b$uniqueID <- make.merge.id(dat13b)#
dat <- merge(dat13, dat13b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat13 <- dat#
#########
#########
plot.stat <- "max.log.lik"#
part.text1 <- -35#
part.text2 <- 0.65#
part.text3 <- -0.65#
pdf("Results_Plots/Flipped_CompareLogLikelihoods.pdf", width=4, height=8)#
par(mfrow=c(3,1), mar=c(4,4,1.5,0.5))#
opac <- 0.75#
pt.lwd <- 2#
xlimits <- c(-55,2.5)#
ylimits <- c(-0.75,0.75)#
plot(0, type="n", xlim=xlimits, ylim=ylimits, ylab="", xlab="", main="partitioning w/ AIC")#
abline(h=0, col="gray75", lty=2); abline(v=0, col="gray75", lty=2)#
#analyze.euc.datset(dat1, "AIC")#
text(part.text1, part.text2, expression(italic("partitioning better")), cex=1, col="green4")#
text(part.text1, part.text3, expression(italic("no partitioning better")), cex=1, col="red3")#
# euc.size.by.partitions(dat1, "AIC", stat=plot.stat)#
# euc.size.by.partitions(dat2, "AIC", stat=plot.stat)#
# euc.size.by.partitions(dat3, "AIC", stat=plot.stat)#
# euc.size.by.partitions(dat4, "AIC", stat=plot.stat)#
# euc.size.by.partitions(dat5, "AIC", stat=plot.stat)#
# euc.size.by.partitions(dat5b, "AIC", stat=plot.stat)#
euc.size.by.partitions(dat6, "AIC", stat=plot.stat)#
euc.size.by.partitions(dat7, "AIC", stat=plot.stat)#
euc.size.by.partitions(dat8, "AIC", stat=plot.stat)#
euc.size.by.partitions(dat9, "AIC", stat=plot.stat)#
euc.size.by.partitions(dat10, "AIC", stat=plot.stat)#
euc.size.by.partitions(dat11, "AIC", stat=plot.stat)#
euc.size.by.partitions(dat12, "AIC", stat=plot.stat)#
euc.size.by.partitions(dat13, "AIC", stat=plot.stat)#
#
plot(0, type="n", xlim=xlimits, ylim=ylimits, ylab="", xlab="", main="partitioning w/ BIC")#
mtext(side=2, at=0, line=2.5, "difference in euclidean distance from true tree for 'no partitioning' - 'partitioning'")#
abline(h=0, col="gray75", lty=2); abline(v=0, col="gray75", lty=2)#
text(part.text1, part.text2, expression(italic("partitioning better")), cex=1, col="green4")#
text(part.text1, part.text3, expression(italic("no partitioning better")), cex=1, col="red3")#
# euc.size.by.partitions(dat1, "BIC", stat=plot.stat)#
# euc.size.by.partitions(dat2, "BIC", stat=plot.stat)#
# euc.size.by.partitions(dat3, "BIC", stat=plot.stat)#
# euc.size.by.partitions(dat4, "BIC", stat=plot.stat)#
# euc.size.by.partitions(dat5, "BIC", stat=plot.stat)#
# euc.size.by.partitions(dat5b, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat6, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat7, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat8, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat9, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat10, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat11, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat12, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat13, "BIC", stat=plot.stat)#
legend("bottomleft", c("lopho", "myria"), species, pch=spp.pch, col="black", bg="white", bty="n")#
#
plot(0, type="n", xlim=xlimits, ylim=ylimits, ylab="", xlab="difference in IQtree max log likelihood of 'no partitioning' - 'partitioning'", main="partitioning w/ AICc")#
abline(h=0, col="gray75", lty=2); abline(v=0, col="gray75", lty=2)#
text(part.text1, part.text2, expression(italic("partitioning better")), cex=1, col="green4")#
text(part.text1, part.text3, expression(italic("no partitioning better")), cex=1, col="red3")#
# euc.size.by.partitions(dat1, "AICc", stat=plot.stat)#
# euc.size.by.partitions(dat2, "AICc", stat=plot.stat)#
# euc.size.by.partitions(dat3, "AICc", stat=plot.stat)#
# euc.size.by.partitions(dat4, "AICc", stat=plot.stat)#
# euc.size.by.partitions(dat5, "AICc", stat=plot.stat)#
# euc.size.by.partitions(dat5b, "AICc", stat=plot.stat)#
euc.size.by.partitions(dat6, "AICc", stat=plot.stat)#
euc.size.by.partitions(dat7, "AICc", stat=plot.stat)#
euc.size.by.partitions(dat8, "AICc", stat=plot.stat)#
euc.size.by.partitions(dat9, "AICc", stat=plot.stat)#
euc.size.by.partitions(dat10, "AICc", stat=plot.stat)#
euc.size.by.partitions(dat11, "AICc", stat=plot.stat)#
euc.size.by.partitions(dat12, "AICc", stat=plot.stat)#
euc.size.by.partitions(dat13, "AICc", stat=plot.stat)#
#
legend("bottomleft", c("10", "20", "40", "80"), pch=15, col=samp.size.col, title = "num. genes", bg="white", cex=0.9, pt.cex=1.5)#
#__________________________________________________________________________________________##
#
# robinson foulds distance difference#
ylimits <- c(-0.19,0.14)#
plot(0, type="n", xlim=xlimits, ylim=ylimits, ylab="", xlab="", main="partitioning w/ AIC")#
abline(h=0, col="gray75", lty=2); abline(v=0, col="gray75", lty=2)#
#analyze.euc.datset(dat1, "AIC")#
text(part.text1, part.text2, expression(italic("partitioning better")), cex=1, col="green4")#
text(part.text1, part.text3, expression(italic("no partitioning better")), cex=1, col="red3")#
# rf_dist.size.by.partitions(dat1, "AIC", stat=plot.stat)#
# rf_dist.size.by.partitions(dat2, "AIC", stat=plot.stat)#
# rf_dist.size.by.partitions(dat3, "AIC", stat=plot.stat)#
# rf_dist.size.by.partitions(dat4, "AIC", stat=plot.stat)#
# rf_dist.size.by.partitions(dat5, "AIC", stat=plot.stat)#
# rf_dist.size.by.partitions(dat5b, "AIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat6, "AIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat7, "AIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat8, "AIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat9, "AIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat10, "AIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat11, "AIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat12, "AIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat13, "AIC", stat=plot.stat)#
#
plot(0, type="n", xlim=xlimits, ylim=ylimits, ylab="", xlab="", main="partitioning w/ BIC")#
mtext(side=2, at=0, line=2.5, "difference in RF distance from true tree for 'no partitioning' - 'partitioning'")#
abline(h=0, col="gray75", lty=2); abline(v=0, col="gray75", lty=2)#
text(part.text1, part.text2, expression(italic("partitioning better")), cex=1, col="green4")#
text(part.text1, part.text3, expression(italic("no partitioning better")), cex=1, col="red3")#
# rf_dist.size.by.partitions(dat1, "BIC", stat=plot.stat)#
# rf_dist.size.by.partitions(dat2, "BIC", stat=plot.stat)#
# rf_dist.size.by.partitions(dat3, "BIC", stat=plot.stat)#
# rf_dist.size.by.partitions(dat4, "BIC", stat=plot.stat)#
# rf_dist.size.by.partitions(dat5, "BIC", stat=plot.stat)#
# rf_dist.size.by.partitions(dat5b, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat6, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat7, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat8, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat9, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat10, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat11, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat12, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat13, "BIC", stat=plot.stat)#
legend("bottomleft", c("lopho", "myria"), species, pch=spp.pch, col="black", bg="white", bty="n")#
#
plot(0, type="n", xlim=xlimits, ylim=ylimits, ylab="", xlab="difference in IQtree max log likelihood of 'no partitioning' - 'partitioning'", main="partitioning w/ AICc")#
abline(h=0, col="gray75", lty=2); abline(v=0, col="gray75", lty=2)#
text(part.text1, part.text2, expression(italic("partitioning better")), cex=1, col="green4")#
text(part.text1, part.text3, expression(italic("no partitioning better")), cex=1, col="red3")#
# rf_dist.size.by.partitions(dat1, "AICc", stat=plot.stat)#
# rf_dist.size.by.partitions(dat2, "AICc", stat=plot.stat)#
# rf_dist.size.by.partitions(dat3, "AICc", stat=plot.stat)#
# rf_dist.size.by.partitions(dat4, "AICc", stat=plot.stat)#
# rf_dist.size.by.partitions(dat5, "AICc", stat=plot.stat)#
# rf_dist.size.by.partitions(dat5b, "AICc", stat=plot.stat)#
rf_dist.size.by.partitions(dat6, "AICc", stat=plot.stat)#
rf_dist.size.by.partitions(dat7, "AICc", stat=plot.stat)#
rf_dist.size.by.partitions(dat8, "AICc", stat=plot.stat)#
rf_dist.size.by.partitions(dat9, "AICc", stat=plot.stat)#
rf_dist.size.by.partitions(dat10, "AICc", stat=plot.stat)#
rf_dist.size.by.partitions(dat11, "AICc", stat=plot.stat)#
rf_dist.size.by.partitions(dat12, "AICc", stat=plot.stat)#
rf_dist.size.by.partitions(dat13, "AICc", stat=plot.stat)#
#
legend("bottomleft", c("10", "20", "40", "80"), pch=15, col=samp.size.col, title = "num. genes", bg="white", cex=0.9, pt.cex=1.5)#
#
dev.off()
library(scales)#
setwd("~/Documents/UNIL/PartitioningMethods_SimulationProject/FunctioningPipeline/AnalysisResults")#
make.merge.id <- function(dat){#
	id.col <- rep(NA, dim(dat)[1])#
	for(i in 1:dim(dat)[1]){#
		if(length(grep("lopho", dat$file[i])) > 0) spp <- "lopho_"#
		if(length(grep("myria", dat$file[i])) > 0) spp <- "myria_"#
		if(length(grep("10", dat$file[i])) > 0) samp <- "10_"#
		if(length(grep("20", dat$file[i])) > 0) samp <- "20_"#
		if(length(grep("40", dat$file[i])) > 0) samp <- "40_"#
		if(length(grep("80", dat$file[i])) > 0) samp <- "80_"#
		if(length(grep("rcluster", dat$file[i])) > 0) algo <- "rcluster_"#
		if(length(grep("greedy", dat$file[i])) > 0) algo <- "greedy_"#
		if(length(grep("noPart", dat$file[i])) > 0) algo <- "noPart_"#
		if(length(grep("AIC", dat$file[i])) > 0) crit <- "AIC"#
		if(length(grep("AICc", dat$file[i])) > 0) crit <- "AICc"#
		if(length(grep("BIC", dat$file[i])) > 0) crit <- "BIC"#
		if(length(grep("noPart", dat$file[i])) > 0) crit <- "noPart"#
		id.col[i] <- paste(c(spp, samp, algo, crit), collapse="")#
	}#
	return(id.col)#
}#
#####################################
species <- c("lopho", "myria")#
spp.pch <- c(1,2)#
samp.sizes <- c(10,20,40,80)#
samp.size.col <- c("steelblue4", "darkorange2", "green4", "red3")#
pt.wid <- 2#
opac <- 0.95#
#
analyze.rf.datset <- function(dat, criterion){#
	spp.it <- 1#
	for(i in species){#
		col.it <- 1#
		for(j in samp.sizes){#
			no.part.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "noPart" ,]#
			rclust.AIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AIC" ,]#
			rclust.BIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "BIC" ,]#
			rclust.AICc.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AICc",]#
			if(criterion == "AIC") points(no.part.result$rf_dist - rclust.AIC.result$rf_dist, no.part.result$max.log.lik - rclust.AIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)#
			if(criterion == "BIC") points(no.part.result$rf_dist - rclust.BIC.result$rf_dist, no.part.result$max.log.lik - rclust.BIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)#
			if(criterion == "AICc") points(no.part.result$rf_dist - rclust.AICc.result$rf_dist, no.part.result$max.log.lik - rclust.AICc.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)			#
			col.it <- col.it + 1	#
		}#
		spp.it <- spp.it + 1	#
	}#
}#
analyze.euc.datset <- function(dat, criterion){#
	spp.it <- 1#
	for(i in species){#
		col.it <- 1#
		for(j in samp.sizes){#
			no.part.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "noPart" ,]#
			rclust.AIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AIC" ,]#
			rclust.BIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "BIC" ,]#
			rclust.AICc.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AICc",]#
			if(criterion == "AIC") points(no.part.result$eucl_dist - rclust.AIC.result$eucl_dist, no.part.result$max.log.lik - rclust.AIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)#
			if(criterion == "BIC") points(no.part.result$eucl_dist - rclust.BIC.result$eucl_dist, no.part.result$max.log.lik - rclust.BIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)#
			if(criterion == "AICc") points(no.part.result$eucl_dist - rclust.AICc.result$eucl_dist, no.part.result$max.log.lik - rclust.AICc.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)			#
			col.it <- col.it + 1	#
		}#
		spp.it <- spp.it + 1	#
	}#
}#
#
# can use any of these scores from the treebuilding in IQtree:#
#   max.log.lik#
#   uncon.log.lik#
#   AIC#
#   BIC#
#   AICc#
#   cons.log.lik (consensus tree LL)#
#   sum.branch.lens#
#   sum.int.branch.lens#
euc.size.by.partitions <- function(dat, criterion, stat="max.log.lik"){#
	spp.it <- 1#
	for(i in species){#
		col.it <- 1#
		for(j in samp.sizes){#
			no.part.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "noPart" ,]#
			rclust.AIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AIC" ,]#
			rclust.BIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "BIC" ,]#
			rclust.AICc.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AICc",]#
			if(stat == "max.log.lik"){#
				if(criterion == "AIC") points(no.part.result$max.log.lik - rclust.AIC.result$max.log.lik, no.part.result$eucl_dist - rclust.AIC.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AIC.result$num.partitions/2)#
				if(criterion == "BIC") points(no.part.result$max.log.lik - rclust.BIC.result$max.log.lik, no.part.result$eucl_dist - rclust.BIC.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.BIC.result$num.partitions/2)#
				if(criterion == "AICc") points(no.part.result$max.log.lik - rclust.AICc.result$max.log.lik, no.part.result$eucl_dist - rclust.AICc.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AICc.result$num.partitions/2)			#
			}#
			if(stat == "uncon.log.lik"){#
				if(criterion == "AIC") points(no.part.result$uncon.log.lik - rclust.AIC.result$uncon.log.lik, no.part.result$eucl_dist - rclust.AIC.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AIC.result$num.partitions/2)#
				if(criterion == "BIC") points(no.part.result$uncon.log.lik - rclust.BIC.result$uncon.log.lik, no.part.result$eucl_dist - rclust.BIC.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.BIC.result$num.partitions/2)#
				if(criterion == "AICc") points(no.part.result$uncon.log.lik - rclust.AICc.result$uncon.log.lik, no.part.result$eucl_dist - rclust.AICc.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AICc.result$num.partitions/2)			#
			}		#
			col.it <- col.it + 1	#
		}#
		spp.it <- spp.it + 1	#
	}#
}#
rf_dist.size.by.partitions <- function(dat, criterion, stat="max.log.lik"){#
	spp.it <- 1#
	for(i in species){#
		col.it <- 1#
		for(j in samp.sizes){#
			no.part.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "noPart" ,]#
			rclust.AIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AIC" ,]#
			rclust.BIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "BIC" ,]#
			rclust.AICc.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AICc",]#
			if(stat == "max.log.lik"){#
				if(criterion == "AIC") points(no.part.result$max.log.lik - rclust.AIC.result$max.log.lik, no.part.result$rf_dist - rclust.AIC.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AIC.result$num.partitions/2)#
				if(criterion == "BIC") points(no.part.result$max.log.lik - rclust.BIC.result$max.log.lik, no.part.result$rf_dist - rclust.BIC.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.BIC.result$num.partitions/2)#
				if(criterion == "AICc") points(no.part.result$max.log.lik - rclust.AICc.result$max.log.lik, no.part.result$rf_dist - rclust.AICc.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AICc.result$num.partitions/2)			#
			}#
			if(stat == "uncon.log.lik"){#
				if(criterion == "AIC") points(no.part.result$uncon.log.lik - rclust.AIC.result$uncon.log.lik, no.part.result$rf_dist - rclust.AIC.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AIC.result$num.partitions/2)#
				if(criterion == "BIC") points(no.part.result$uncon.log.lik - rclust.BIC.result$uncon.log.lik, no.part.result$rf_dist - rclust.BIC.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.BIC.result$num.partitions/2)#
				if(criterion == "AICc") points(no.part.result$uncon.log.lik - rclust.AICc.result$uncon.log.lik, no.part.result$rf_dist - rclust.AICc.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AICc.result$num.partitions/2)			#
			}		#
			col.it <- col.it + 1	#
		}#
		spp.it <- spp.it + 1	#
	}#
}#
#####################################
# mut rate 500#
dat1 <- read.csv("AllStatsOutput_New_Rep1_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
dat1$uniqueID <- paste(dat1$species, dat1$samp.size, dat1$search.algo, dat1$part.IC, sep="_")#
dat1b <- read.table("RF_Eucl_results_New_Rep1_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
dat1b$uniqueID <- make.merge.id(dat1b)#
dat <- merge(dat1, dat1b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 500#
dat1 <- dat#
#
dat2 <- read.csv("AllStatsOutput_New_Rep2_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
dat2$uniqueID <- paste(dat2$species, dat2$samp.size, dat2$search.algo, dat2$part.IC, sep="_")#
dat2b <- read.table("RF_Eucl_results_New_Rep2_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
dat2b$uniqueID <- make.merge.id(dat2b)#
dat <- merge(dat2, dat2b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 500#
dat2 <- dat#
#
dat3 <- read.csv("AllStatsOutput_New_Rep3_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
dat3$uniqueID <- paste(dat3$species, dat3$samp.size, dat3$search.algo, dat3$part.IC, sep="_")#
dat3b <- read.table("RF_Eucl_results_New_Rep3_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
dat3b$uniqueID <- make.merge.id(dat3b)#
dat <- merge(dat3, dat3b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 500#
dat3 <- dat#
#
dat4 <- read.csv("AllStatsOutput_New_Rep4_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
dat4$uniqueID <- paste(dat4$species, dat4$samp.size, dat4$search.algo, dat4$part.IC, sep="_")#
dat4b <- read.table("RF_Eucl_results_New_Rep4_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
dat4b$uniqueID <- make.merge.id(dat4b)#
dat <- merge(dat4, dat4b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 500#
dat4 <- dat#
#
dat5 <- read.csv("AllStatsOutput_New_Rep5_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
dat5$uniqueID <- paste(dat5$species, dat5$samp.size, dat5$search.algo, dat5$part.IC, sep="_")#
dat5b <- read.table("RF_Eucl_results_New_Rep5_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
dat5b$uniqueID <- make.merge.id(dat5b)#
dat <- merge(dat5, dat5b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 500#
dat5 <- dat#
#
dat5b <- read.csv("AllStatsOutput_New_Rep6_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
dat5b$uniqueID <- paste(dat5b$species, dat5b$samp.size, dat5b$search.algo, dat5b$part.IC, sep="_")#
dat5bb <- read.table("RF_Eucl_results_New_Rep6_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
dat5bb$uniqueID <- make.merge.id(dat5bb)#
dat <- merge(dat5b, dat5bb, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 500#
dat5b <- dat#
# mut rate 1000#
dat6 <- read.csv("AllStatsOutput_New_Rep1_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat6$uniqueID <- paste(dat6$species, dat6$samp.size, dat6$search.algo, dat6$part.IC, sep="_")#
dat6b <- read.table("RF_Eucl_results_New_Rep1_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat6b$uniqueID <- make.merge.id(dat6b)#
dat <- merge(dat6, dat6b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat6 <- dat#
#
dat7 <- read.csv("AllStatsOutput_New_Rep2_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat7$uniqueID <- paste(dat7$species, dat7$samp.size, dat7$search.algo, dat7$part.IC, sep="_")#
dat7b <- read.table("RF_Eucl_results_New_Rep2_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat7b$uniqueID <- make.merge.id(dat7b)#
dat <- merge(dat7, dat7b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat7 <- dat#
#
dat8 <- read.csv("AllStatsOutput_New_Rep3_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat8$uniqueID <- paste(dat8$species, dat8$samp.size, dat8$search.algo, dat8$part.IC, sep="_")#
dat8b <- read.table("RF_Eucl_results_New_Rep3_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat8b$uniqueID <- make.merge.id(dat8b)#
dat <- merge(dat8, dat8b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat8 <- dat#
#
dat9 <- read.csv("AllStatsOutput_New_Rep4_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat9$uniqueID <- paste(dat9$species, dat9$samp.size, dat9$search.algo, dat9$part.IC, sep="_")#
dat9b <- read.table("RF_Eucl_results_New_Rep4_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat9b$uniqueID <- make.merge.id(dat9b)#
dat <- merge(dat9, dat9b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat9 <- dat#
#
dat10 <- read.csv("AllStatsOutput_New_Rep5_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat10$uniqueID <- paste(dat10$species, dat10$samp.size, dat10$search.algo, dat10$part.IC, sep="_")#
dat10b <- read.table("RF_Eucl_results_New_Rep5_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat10b$uniqueID <- make.merge.id(dat10b)#
dat <- merge(dat10, dat10b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat10 <- dat#
#
dat11 <- read.csv("AllStatsOutput_New_Rep6_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat11$uniqueID <- paste(dat11$species, dat11$samp.size, dat11$search.algo, dat11$part.IC, sep="_")#
dat11b <- read.table("RF_Eucl_results_New_Rep6_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat11b$uniqueID <- make.merge.id(dat11b)#
dat <- merge(dat11, dat11b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat11 <- dat#
#
dat12 <- read.csv("AllStatsOutput_Newest_Rep7_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat12$uniqueID <- paste(dat12$species, dat12$samp.size, dat12$search.algo, dat12$part.IC, sep="_")#
dat12b <- read.table("RF_Eucl_results_New_Rep7_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat12b$uniqueID <- make.merge.id(dat12b)#
dat <- merge(dat12, dat12b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat12 <- dat#
#
dat13 <- read.csv("AllStatsOutput_Newest_Rep8_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat13$uniqueID <- paste(dat13$species, dat13$samp.size, dat13$search.algo, dat13$part.IC, sep="_")#
dat13b <- read.table("RF_Eucl_results_New_Rep8_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat13b$uniqueID <- make.merge.id(dat13b)#
dat <- merge(dat13, dat13b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat13 <- dat#
#########
#########
plot.stat <- "max.log.lik"#
part.text1 <- -35#
part.text2 <- 0.65#
part.text3 <- -0.65#
pdf("Results_Plots/Flipped_CompareLogLikelihoods_BICpartitioning.pdf", width=4, height=8)#
# par(mfrow=c(3,1), mar=c(4,4,1.5,0.5)) # if doing all three information criteria for partitionfinder#
par(mfrow=c(2,1), mar=c(4,4,1.5,0.5)) # if just looking at BIC for partitionfinder#
opac <- 0.75#
pt.lwd <- 2#
xlimits <- c(-55,2.5)#
ylimits <- c(-0.75,0.75)#
# plot(0, type="n", xlim=xlimits, ylim=ylimits, ylab="", xlab="", main="partitioning w/ AIC")#
# abline(h=0, col="gray75", lty=2); abline(v=0, col="gray75", lty=2)#
# #analyze.euc.datset(dat1, "AIC")#
# text(part.text1, part.text2, expression(italic("partitioning better")), cex=1, col="green4")#
# text(part.text1, part.text3, expression(italic("no partitioning better")), cex=1, col="red3")#
# # euc.size.by.partitions(dat1, "AIC", stat=plot.stat)#
# # euc.size.by.partitions(dat2, "AIC", stat=plot.stat)#
# # euc.size.by.partitions(dat3, "AIC", stat=plot.stat)#
# # euc.size.by.partitions(dat4, "AIC", stat=plot.stat)#
# # euc.size.by.partitions(dat5, "AIC", stat=plot.stat)#
# # euc.size.by.partitions(dat5b, "AIC", stat=plot.stat)#
# euc.size.by.partitions(dat6, "AIC", stat=plot.stat)#
# euc.size.by.partitions(dat7, "AIC", stat=plot.stat)#
# euc.size.by.partitions(dat8, "AIC", stat=plot.stat)#
# euc.size.by.partitions(dat9, "AIC", stat=plot.stat)#
# euc.size.by.partitions(dat10, "AIC", stat=plot.stat)#
# euc.size.by.partitions(dat11, "AIC", stat=plot.stat)#
# euc.size.by.partitions(dat12, "AIC", stat=plot.stat)#
# euc.size.by.partitions(dat13, "AIC", stat=plot.stat)#
#
plot(0, type="n", xlim=xlimits, ylim=ylimits, ylab="", xlab="", main="partitioning w/ BIC")#
mtext(side=2, at=0, line=2.5, "difference in euclidean distance from true tree for 'no partitioning' - 'partitioning'")#
abline(h=0, col="gray75", lty=2); abline(v=0, col="gray75", lty=2)#
text(part.text1, part.text2, expression(italic("partitioning better")), cex=1, col="green4")#
text(part.text1, part.text3, expression(italic("no partitioning better")), cex=1, col="red3")#
# euc.size.by.partitions(dat1, "BIC", stat=plot.stat)#
# euc.size.by.partitions(dat2, "BIC", stat=plot.stat)#
# euc.size.by.partitions(dat3, "BIC", stat=plot.stat)#
# euc.size.by.partitions(dat4, "BIC", stat=plot.stat)#
# euc.size.by.partitions(dat5, "BIC", stat=plot.stat)#
# euc.size.by.partitions(dat5b, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat6, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat7, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat8, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat9, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat10, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat11, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat12, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat13, "BIC", stat=plot.stat)#
legend("bottomleft", c("lopho", "myria"), species, pch=spp.pch, col="black", bg="white", bty="n")#
#
# plot(0, type="n", xlim=xlimits, ylim=ylimits, ylab="", xlab="difference in IQtree max log likelihood of 'no partitioning' - 'partitioning'", main="partitioning w/ AICc")#
# abline(h=0, col="gray75", lty=2); abline(v=0, col="gray75", lty=2)#
# text(part.text1, part.text2, expression(italic("partitioning better")), cex=1, col="green4")#
# text(part.text1, part.text3, expression(italic("no partitioning better")), cex=1, col="red3")#
# # euc.size.by.partitions(dat1, "AICc", stat=plot.stat)#
# # euc.size.by.partitions(dat2, "AICc", stat=plot.stat)#
# # euc.size.by.partitions(dat3, "AICc", stat=plot.stat)#
# # euc.size.by.partitions(dat4, "AICc", stat=plot.stat)#
# # euc.size.by.partitions(dat5, "AICc", stat=plot.stat)#
# # euc.size.by.partitions(dat5b, "AICc", stat=plot.stat)#
# euc.size.by.partitions(dat6, "AICc", stat=plot.stat)#
# euc.size.by.partitions(dat7, "AICc", stat=plot.stat)#
# euc.size.by.partitions(dat8, "AICc", stat=plot.stat)#
# euc.size.by.partitions(dat9, "AICc", stat=plot.stat)#
# euc.size.by.partitions(dat10, "AICc", stat=plot.stat)#
# euc.size.by.partitions(dat11, "AICc", stat=plot.stat)#
# euc.size.by.partitions(dat12, "AICc", stat=plot.stat)#
# euc.size.by.partitions(dat13, "AICc", stat=plot.stat)#
#
legend("bottomleft", c("10", "20", "40", "80"), pch=15, col=samp.size.col, title = "num. genes", bg="white", cex=0.9, pt.cex=1.5)#
#__________________________________________________________________________________________##
#
# robinson foulds distance difference#
ylimits <- c(-0.19,0.14)#
# plot(0, type="n", xlim=xlimits, ylim=ylimits, ylab="", xlab="", main="partitioning w/ AIC")#
# abline(h=0, col="gray75", lty=2); abline(v=0, col="gray75", lty=2)#
# #analyze.euc.datset(dat1, "AIC")#
# text(part.text1, part.text2, expression(italic("partitioning better")), cex=1, col="green4")#
# text(part.text1, part.text3, expression(italic("no partitioning better")), cex=1, col="red3")#
# # rf_dist.size.by.partitions(dat1, "AIC", stat=plot.stat)#
# # rf_dist.size.by.partitions(dat2, "AIC", stat=plot.stat)#
# # rf_dist.size.by.partitions(dat3, "AIC", stat=plot.stat)#
# # rf_dist.size.by.partitions(dat4, "AIC", stat=plot.stat)#
# # rf_dist.size.by.partitions(dat5, "AIC", stat=plot.stat)#
# # rf_dist.size.by.partitions(dat5b, "AIC", stat=plot.stat)#
# rf_dist.size.by.partitions(dat6, "AIC", stat=plot.stat)#
# rf_dist.size.by.partitions(dat7, "AIC", stat=plot.stat)#
# rf_dist.size.by.partitions(dat8, "AIC", stat=plot.stat)#
# rf_dist.size.by.partitions(dat9, "AIC", stat=plot.stat)#
# rf_dist.size.by.partitions(dat10, "AIC", stat=plot.stat)#
# rf_dist.size.by.partitions(dat11, "AIC", stat=plot.stat)#
# rf_dist.size.by.partitions(dat12, "AIC", stat=plot.stat)#
# rf_dist.size.by.partitions(dat13, "AIC", stat=plot.stat)#
#
plot(0, type="n", xlim=xlimits, ylim=ylimits, ylab="", xlab="", main="partitioning w/ BIC")#
mtext(side=2, at=0, line=2.5, "difference in RF distance from true tree for 'no partitioning' - 'partitioning'")#
abline(h=0, col="gray75", lty=2); abline(v=0, col="gray75", lty=2)#
text(part.text1, part.text2, expression(italic("partitioning better")), cex=1, col="green4")#
text(part.text1, part.text3, expression(italic("no partitioning better")), cex=1, col="red3")#
# rf_dist.size.by.partitions(dat1, "BIC", stat=plot.stat)#
# rf_dist.size.by.partitions(dat2, "BIC", stat=plot.stat)#
# rf_dist.size.by.partitions(dat3, "BIC", stat=plot.stat)#
# rf_dist.size.by.partitions(dat4, "BIC", stat=plot.stat)#
# rf_dist.size.by.partitions(dat5, "BIC", stat=plot.stat)#
# rf_dist.size.by.partitions(dat5b, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat6, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat7, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat8, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat9, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat10, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat11, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat12, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat13, "BIC", stat=plot.stat)#
legend("bottomleft", c("lopho", "myria"), species, pch=spp.pch, col="black", bg="white", bty="n")#
#
# plot(0, type="n", xlim=xlimits, ylim=ylimits, ylab="", xlab="difference in IQtree max log likelihood of 'no partitioning' - 'partitioning'", main="partitioning w/ AICc")#
# abline(h=0, col="gray75", lty=2); abline(v=0, col="gray75", lty=2)#
# text(part.text1, part.text2, expression(italic("partitioning better")), cex=1, col="green4")#
# text(part.text1, part.text3, expression(italic("no partitioning better")), cex=1, col="red3")#
# # rf_dist.size.by.partitions(dat1, "AICc", stat=plot.stat)#
# # rf_dist.size.by.partitions(dat2, "AICc", stat=plot.stat)#
# # rf_dist.size.by.partitions(dat3, "AICc", stat=plot.stat)#
# # rf_dist.size.by.partitions(dat4, "AICc", stat=plot.stat)#
# # rf_dist.size.by.partitions(dat5, "AICc", stat=plot.stat)#
# # rf_dist.size.by.partitions(dat5b, "AICc", stat=plot.stat)#
# rf_dist.size.by.partitions(dat6, "AICc", stat=plot.stat)#
# rf_dist.size.by.partitions(dat7, "AICc", stat=plot.stat)#
# rf_dist.size.by.partitions(dat8, "AICc", stat=plot.stat)#
# rf_dist.size.by.partitions(dat9, "AICc", stat=plot.stat)#
# rf_dist.size.by.partitions(dat10, "AICc", stat=plot.stat)#
# rf_dist.size.by.partitions(dat11, "AICc", stat=plot.stat)#
# rf_dist.size.by.partitions(dat12, "AICc", stat=plot.stat)#
# rf_dist.size.by.partitions(dat13, "AICc", stat=plot.stat)#
#
legend("bottomleft", c("10", "20", "40", "80"), pch=15, col=samp.size.col, title = "num. genes", bg="white", cex=0.9, pt.cex=1.5)#
#
dev.off()
library(scales)#
setwd("~/Documents/UNIL/PartitioningMethods_SimulationProject/FunctioningPipeline/AnalysisResults")#
make.merge.id <- function(dat){#
	id.col <- rep(NA, dim(dat)[1])#
	for(i in 1:dim(dat)[1]){#
		if(length(grep("lopho", dat$file[i])) > 0) spp <- "lopho_"#
		if(length(grep("myria", dat$file[i])) > 0) spp <- "myria_"#
		if(length(grep("10", dat$file[i])) > 0) samp <- "10_"#
		if(length(grep("20", dat$file[i])) > 0) samp <- "20_"#
		if(length(grep("40", dat$file[i])) > 0) samp <- "40_"#
		if(length(grep("80", dat$file[i])) > 0) samp <- "80_"#
		if(length(grep("rcluster", dat$file[i])) > 0) algo <- "rcluster_"#
		if(length(grep("greedy", dat$file[i])) > 0) algo <- "greedy_"#
		if(length(grep("noPart", dat$file[i])) > 0) algo <- "noPart_"#
		if(length(grep("AIC", dat$file[i])) > 0) crit <- "AIC"#
		if(length(grep("AICc", dat$file[i])) > 0) crit <- "AICc"#
		if(length(grep("BIC", dat$file[i])) > 0) crit <- "BIC"#
		if(length(grep("noPart", dat$file[i])) > 0) crit <- "noPart"#
		id.col[i] <- paste(c(spp, samp, algo, crit), collapse="")#
	}#
	return(id.col)#
}#
#####################################
species <- c("lopho", "myria")#
spp.pch <- c(1,2)#
samp.sizes <- c(10,20,40,80)#
samp.size.col <- c("steelblue4", "darkorange2", "green4", "red3")#
pt.wid <- 2#
opac <- 0.95#
#
analyze.rf.datset <- function(dat, criterion){#
	spp.it <- 1#
	for(i in species){#
		col.it <- 1#
		for(j in samp.sizes){#
			no.part.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "noPart" ,]#
			rclust.AIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AIC" ,]#
			rclust.BIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "BIC" ,]#
			rclust.AICc.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AICc",]#
			if(criterion == "AIC") points(no.part.result$rf_dist - rclust.AIC.result$rf_dist, no.part.result$max.log.lik - rclust.AIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)#
			if(criterion == "BIC") points(no.part.result$rf_dist - rclust.BIC.result$rf_dist, no.part.result$max.log.lik - rclust.BIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)#
			if(criterion == "AICc") points(no.part.result$rf_dist - rclust.AICc.result$rf_dist, no.part.result$max.log.lik - rclust.AICc.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)			#
			col.it <- col.it + 1	#
		}#
		spp.it <- spp.it + 1	#
	}#
}#
analyze.euc.datset <- function(dat, criterion){#
	spp.it <- 1#
	for(i in species){#
		col.it <- 1#
		for(j in samp.sizes){#
			no.part.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "noPart" ,]#
			rclust.AIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AIC" ,]#
			rclust.BIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "BIC" ,]#
			rclust.AICc.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AICc",]#
			if(criterion == "AIC") points(no.part.result$eucl_dist - rclust.AIC.result$eucl_dist, no.part.result$max.log.lik - rclust.AIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)#
			if(criterion == "BIC") points(no.part.result$eucl_dist - rclust.BIC.result$eucl_dist, no.part.result$max.log.lik - rclust.BIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)#
			if(criterion == "AICc") points(no.part.result$eucl_dist - rclust.AICc.result$eucl_dist, no.part.result$max.log.lik - rclust.AICc.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)			#
			col.it <- col.it + 1	#
		}#
		spp.it <- spp.it + 1	#
	}#
}#
#
# can use any of these scores from the treebuilding in IQtree:#
#   max.log.lik#
#   uncon.log.lik#
#   AIC#
#   BIC#
#   AICc#
#   cons.log.lik (consensus tree LL)#
#   sum.branch.lens#
#   sum.int.branch.lens#
euc.size.by.partitions <- function(dat, criterion, stat="max.log.lik"){#
	spp.it <- 1#
	for(i in species){#
		col.it <- 1#
		for(j in samp.sizes){#
			no.part.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "noPart" ,]#
			rclust.AIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AIC" ,]#
			rclust.BIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "BIC" ,]#
			rclust.AICc.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AICc",]#
			if(stat == "max.log.lik"){#
				if(criterion == "AIC") points(no.part.result$max.log.lik - rclust.AIC.result$max.log.lik, no.part.result$eucl_dist - rclust.AIC.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AIC.result$num.partitions/2)#
				if(criterion == "BIC") points(no.part.result$max.log.lik - rclust.BIC.result$max.log.lik, no.part.result$eucl_dist - rclust.BIC.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.BIC.result$num.partitions/2)#
				if(criterion == "AICc") points(no.part.result$max.log.lik - rclust.AICc.result$max.log.lik, no.part.result$eucl_dist - rclust.AICc.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AICc.result$num.partitions/2)			#
			}#
			if(stat == "uncon.log.lik"){#
				if(criterion == "AIC") points(no.part.result$uncon.log.lik - rclust.AIC.result$uncon.log.lik, no.part.result$eucl_dist - rclust.AIC.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AIC.result$num.partitions/2)#
				if(criterion == "BIC") points(no.part.result$uncon.log.lik - rclust.BIC.result$uncon.log.lik, no.part.result$eucl_dist - rclust.BIC.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.BIC.result$num.partitions/2)#
				if(criterion == "AICc") points(no.part.result$uncon.log.lik - rclust.AICc.result$uncon.log.lik, no.part.result$eucl_dist - rclust.AICc.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AICc.result$num.partitions/2)			#
			}		#
			col.it <- col.it + 1	#
		}#
		spp.it <- spp.it + 1	#
	}#
}#
rf_dist.size.by.partitions <- function(dat, criterion, stat="max.log.lik"){#
	spp.it <- 1#
	for(i in species){#
		col.it <- 1#
		for(j in samp.sizes){#
			no.part.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "noPart" ,]#
			rclust.AIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AIC" ,]#
			rclust.BIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "BIC" ,]#
			rclust.AICc.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AICc",]#
			if(stat == "max.log.lik"){#
				if(criterion == "AIC") points(no.part.result$max.log.lik - rclust.AIC.result$max.log.lik, no.part.result$rf_dist - rclust.AIC.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AIC.result$num.partitions/2)#
				if(criterion == "BIC") points(no.part.result$max.log.lik - rclust.BIC.result$max.log.lik, no.part.result$rf_dist - rclust.BIC.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.BIC.result$num.partitions/2)#
				if(criterion == "AICc") points(no.part.result$max.log.lik - rclust.AICc.result$max.log.lik, no.part.result$rf_dist - rclust.AICc.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AICc.result$num.partitions/2)			#
			}#
			if(stat == "uncon.log.lik"){#
				if(criterion == "AIC") points(no.part.result$uncon.log.lik - rclust.AIC.result$uncon.log.lik, no.part.result$rf_dist - rclust.AIC.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AIC.result$num.partitions/2)#
				if(criterion == "BIC") points(no.part.result$uncon.log.lik - rclust.BIC.result$uncon.log.lik, no.part.result$rf_dist - rclust.BIC.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.BIC.result$num.partitions/2)#
				if(criterion == "AICc") points(no.part.result$uncon.log.lik - rclust.AICc.result$uncon.log.lik, no.part.result$rf_dist - rclust.AICc.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AICc.result$num.partitions/2)			#
			}		#
			col.it <- col.it + 1	#
		}#
		spp.it <- spp.it + 1	#
	}#
}#
#####################################
# mut rate 500#
dat1 <- read.csv("AllStatsOutput_New_Rep1_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
dat1$uniqueID <- paste(dat1$species, dat1$samp.size, dat1$search.algo, dat1$part.IC, sep="_")#
dat1b <- read.table("RF_Eucl_results_New_Rep1_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
dat1b$uniqueID <- make.merge.id(dat1b)#
dat <- merge(dat1, dat1b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 500#
dat1 <- dat#
#
dat2 <- read.csv("AllStatsOutput_New_Rep2_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
dat2$uniqueID <- paste(dat2$species, dat2$samp.size, dat2$search.algo, dat2$part.IC, sep="_")#
dat2b <- read.table("RF_Eucl_results_New_Rep2_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
dat2b$uniqueID <- make.merge.id(dat2b)#
dat <- merge(dat2, dat2b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 500#
dat2 <- dat#
#
dat3 <- read.csv("AllStatsOutput_New_Rep3_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
dat3$uniqueID <- paste(dat3$species, dat3$samp.size, dat3$search.algo, dat3$part.IC, sep="_")#
dat3b <- read.table("RF_Eucl_results_New_Rep3_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
dat3b$uniqueID <- make.merge.id(dat3b)#
dat <- merge(dat3, dat3b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 500#
dat3 <- dat#
#
dat4 <- read.csv("AllStatsOutput_New_Rep4_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
dat4$uniqueID <- paste(dat4$species, dat4$samp.size, dat4$search.algo, dat4$part.IC, sep="_")#
dat4b <- read.table("RF_Eucl_results_New_Rep4_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
dat4b$uniqueID <- make.merge.id(dat4b)#
dat <- merge(dat4, dat4b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 500#
dat4 <- dat#
#
dat5 <- read.csv("AllStatsOutput_New_Rep5_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
dat5$uniqueID <- paste(dat5$species, dat5$samp.size, dat5$search.algo, dat5$part.IC, sep="_")#
dat5b <- read.table("RF_Eucl_results_New_Rep5_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
dat5b$uniqueID <- make.merge.id(dat5b)#
dat <- merge(dat5, dat5b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 500#
dat5 <- dat#
#
dat5b <- read.csv("AllStatsOutput_New_Rep6_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
dat5b$uniqueID <- paste(dat5b$species, dat5b$samp.size, dat5b$search.algo, dat5b$part.IC, sep="_")#
dat5bb <- read.table("RF_Eucl_results_New_Rep6_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
dat5bb$uniqueID <- make.merge.id(dat5bb)#
dat <- merge(dat5b, dat5bb, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 500#
dat5b <- dat#
# mut rate 1000#
dat6 <- read.csv("AllStatsOutput_New_Rep1_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat6$uniqueID <- paste(dat6$species, dat6$samp.size, dat6$search.algo, dat6$part.IC, sep="_")#
dat6b <- read.table("RF_Eucl_results_New_Rep1_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat6b$uniqueID <- make.merge.id(dat6b)#
dat <- merge(dat6, dat6b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat6 <- dat#
#
dat7 <- read.csv("AllStatsOutput_New_Rep2_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat7$uniqueID <- paste(dat7$species, dat7$samp.size, dat7$search.algo, dat7$part.IC, sep="_")#
dat7b <- read.table("RF_Eucl_results_New_Rep2_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat7b$uniqueID <- make.merge.id(dat7b)#
dat <- merge(dat7, dat7b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat7 <- dat#
#
dat8 <- read.csv("AllStatsOutput_New_Rep3_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat8$uniqueID <- paste(dat8$species, dat8$samp.size, dat8$search.algo, dat8$part.IC, sep="_")#
dat8b <- read.table("RF_Eucl_results_New_Rep3_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat8b$uniqueID <- make.merge.id(dat8b)#
dat <- merge(dat8, dat8b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat8 <- dat#
#
dat9 <- read.csv("AllStatsOutput_New_Rep4_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat9$uniqueID <- paste(dat9$species, dat9$samp.size, dat9$search.algo, dat9$part.IC, sep="_")#
dat9b <- read.table("RF_Eucl_results_New_Rep4_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat9b$uniqueID <- make.merge.id(dat9b)#
dat <- merge(dat9, dat9b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat9 <- dat#
#
dat10 <- read.csv("AllStatsOutput_New_Rep5_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat10$uniqueID <- paste(dat10$species, dat10$samp.size, dat10$search.algo, dat10$part.IC, sep="_")#
dat10b <- read.table("RF_Eucl_results_New_Rep5_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat10b$uniqueID <- make.merge.id(dat10b)#
dat <- merge(dat10, dat10b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat10 <- dat#
#
dat11 <- read.csv("AllStatsOutput_New_Rep6_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat11$uniqueID <- paste(dat11$species, dat11$samp.size, dat11$search.algo, dat11$part.IC, sep="_")#
dat11b <- read.table("RF_Eucl_results_New_Rep6_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat11b$uniqueID <- make.merge.id(dat11b)#
dat <- merge(dat11, dat11b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat11 <- dat#
#
dat12 <- read.csv("AllStatsOutput_Newest_Rep7_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat12$uniqueID <- paste(dat12$species, dat12$samp.size, dat12$search.algo, dat12$part.IC, sep="_")#
dat12b <- read.table("RF_Eucl_results_New_Rep7_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat12b$uniqueID <- make.merge.id(dat12b)#
dat <- merge(dat12, dat12b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat12 <- dat#
#
dat13 <- read.csv("AllStatsOutput_Newest_Rep8_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat13$uniqueID <- paste(dat13$species, dat13$samp.size, dat13$search.algo, dat13$part.IC, sep="_")#
dat13b <- read.table("RF_Eucl_results_New_Rep8_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat13b$uniqueID <- make.merge.id(dat13b)#
dat <- merge(dat13, dat13b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat13 <- dat#
#########
#########
plot.stat <- "max.log.lik"#
part.text1 <- -35#
part.text2 <- 0.65#
part.text3 <- -0.65#
pdf("Results_Plots/Flipped_CompareLogLikelihoods_BICpartitioning.pdf", width=4, height=8)#
# par(mfrow=c(3,1), mar=c(4,4,1.5,0.5)) # if doing all three information criteria for partitionfinder#
par(mfrow=c(2,1), mar=c(4,4,1.5,0.5)) # if just looking at BIC for partitionfinder#
opac <- 0.75#
pt.lwd <- 2#
xlimits <- c(-55,2.5)#
ylimits <- c(-0.75,0.75)#
# plot(0, type="n", xlim=xlimits, ylim=ylimits, ylab="", xlab="", main="partitioning w/ AIC")#
# abline(h=0, col="gray75", lty=2); abline(v=0, col="gray75", lty=2)#
# #analyze.euc.datset(dat1, "AIC")#
# text(part.text1, part.text2, expression(italic("partitioning better")), cex=1, col="green4")#
# text(part.text1, part.text3, expression(italic("no partitioning better")), cex=1, col="red3")#
# # euc.size.by.partitions(dat1, "AIC", stat=plot.stat)#
# # euc.size.by.partitions(dat2, "AIC", stat=plot.stat)#
# # euc.size.by.partitions(dat3, "AIC", stat=plot.stat)#
# # euc.size.by.partitions(dat4, "AIC", stat=plot.stat)#
# # euc.size.by.partitions(dat5, "AIC", stat=plot.stat)#
# # euc.size.by.partitions(dat5b, "AIC", stat=plot.stat)#
# euc.size.by.partitions(dat6, "AIC", stat=plot.stat)#
# euc.size.by.partitions(dat7, "AIC", stat=plot.stat)#
# euc.size.by.partitions(dat8, "AIC", stat=plot.stat)#
# euc.size.by.partitions(dat9, "AIC", stat=plot.stat)#
# euc.size.by.partitions(dat10, "AIC", stat=plot.stat)#
# euc.size.by.partitions(dat11, "AIC", stat=plot.stat)#
# euc.size.by.partitions(dat12, "AIC", stat=plot.stat)#
# euc.size.by.partitions(dat13, "AIC", stat=plot.stat)#
#
plot(0, type="n", xlim=xlimits, ylim=ylimits, ylab="", xlab="", main="partitioning w/ BIC")#
mtext(side=2, at=0, line=2.5, "difference in euclidean distance from true tree for 'no partitioning' - 'partitioning'")#
abline(h=0, col="gray75", lty=2); abline(v=0, col="gray75", lty=2)#
text(part.text1, part.text2, expression(italic("partitioning better")), cex=1, col="green4")#
text(part.text1, part.text3, expression(italic("no partitioning better")), cex=1, col="red3")#
# euc.size.by.partitions(dat1, "BIC", stat=plot.stat)#
# euc.size.by.partitions(dat2, "BIC", stat=plot.stat)#
# euc.size.by.partitions(dat3, "BIC", stat=plot.stat)#
# euc.size.by.partitions(dat4, "BIC", stat=plot.stat)#
# euc.size.by.partitions(dat5, "BIC", stat=plot.stat)#
# euc.size.by.partitions(dat5b, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat6, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat7, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat8, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat9, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat10, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat11, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat12, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat13, "BIC", stat=plot.stat)#
legend("bottomleft", c("lopho", "myria"), species, pch=spp.pch, col="black", bg="white", bty="n")#
#
# plot(0, type="n", xlim=xlimits, ylim=ylimits, ylab="", xlab="difference in IQtree max log likelihood of 'no partitioning' - 'partitioning'", main="partitioning w/ AICc")#
# abline(h=0, col="gray75", lty=2); abline(v=0, col="gray75", lty=2)#
# text(part.text1, part.text2, expression(italic("partitioning better")), cex=1, col="green4")#
# text(part.text1, part.text3, expression(italic("no partitioning better")), cex=1, col="red3")#
# # euc.size.by.partitions(dat1, "AICc", stat=plot.stat)#
# # euc.size.by.partitions(dat2, "AICc", stat=plot.stat)#
# # euc.size.by.partitions(dat3, "AICc", stat=plot.stat)#
# # euc.size.by.partitions(dat4, "AICc", stat=plot.stat)#
# # euc.size.by.partitions(dat5, "AICc", stat=plot.stat)#
# # euc.size.by.partitions(dat5b, "AICc", stat=plot.stat)#
# euc.size.by.partitions(dat6, "AICc", stat=plot.stat)#
# euc.size.by.partitions(dat7, "AICc", stat=plot.stat)#
# euc.size.by.partitions(dat8, "AICc", stat=plot.stat)#
# euc.size.by.partitions(dat9, "AICc", stat=plot.stat)#
# euc.size.by.partitions(dat10, "AICc", stat=plot.stat)#
# euc.size.by.partitions(dat11, "AICc", stat=plot.stat)#
# euc.size.by.partitions(dat12, "AICc", stat=plot.stat)#
# euc.size.by.partitions(dat13, "AICc", stat=plot.stat)#
#
##legend("bottomleft", c("10", "20", "40", "80"), pch=15, col=samp.size.col, title = "num. genes", bg="white", cex=0.9, pt.cex=1.5)#
#__________________________________________________________________________________________##
#
# robinson foulds distance difference#
ylimits <- c(-0.19,0.14)#
# plot(0, type="n", xlim=xlimits, ylim=ylimits, ylab="", xlab="", main="partitioning w/ AIC")#
# abline(h=0, col="gray75", lty=2); abline(v=0, col="gray75", lty=2)#
# #analyze.euc.datset(dat1, "AIC")#
# text(part.text1, part.text2, expression(italic("partitioning better")), cex=1, col="green4")#
# text(part.text1, part.text3, expression(italic("no partitioning better")), cex=1, col="red3")#
# # rf_dist.size.by.partitions(dat1, "AIC", stat=plot.stat)#
# # rf_dist.size.by.partitions(dat2, "AIC", stat=plot.stat)#
# # rf_dist.size.by.partitions(dat3, "AIC", stat=plot.stat)#
# # rf_dist.size.by.partitions(dat4, "AIC", stat=plot.stat)#
# # rf_dist.size.by.partitions(dat5, "AIC", stat=plot.stat)#
# # rf_dist.size.by.partitions(dat5b, "AIC", stat=plot.stat)#
# rf_dist.size.by.partitions(dat6, "AIC", stat=plot.stat)#
# rf_dist.size.by.partitions(dat7, "AIC", stat=plot.stat)#
# rf_dist.size.by.partitions(dat8, "AIC", stat=plot.stat)#
# rf_dist.size.by.partitions(dat9, "AIC", stat=plot.stat)#
# rf_dist.size.by.partitions(dat10, "AIC", stat=plot.stat)#
# rf_dist.size.by.partitions(dat11, "AIC", stat=plot.stat)#
# rf_dist.size.by.partitions(dat12, "AIC", stat=plot.stat)#
# rf_dist.size.by.partitions(dat13, "AIC", stat=plot.stat)#
#
plot(0, type="n", xlim=xlimits, ylim=ylimits, ylab="", xlab="", main="partitioning w/ BIC")#
mtext(side=2, at=0, line=2.5, "difference in RF distance from true tree for 'no partitioning' - 'partitioning'")#
abline(h=0, col="gray75", lty=2); abline(v=0, col="gray75", lty=2)#
text(part.text1, part.text2, expression(italic("partitioning better")), cex=1, col="green4")#
text(part.text1, part.text3, expression(italic("no partitioning better")), cex=1, col="red3")#
# rf_dist.size.by.partitions(dat1, "BIC", stat=plot.stat)#
# rf_dist.size.by.partitions(dat2, "BIC", stat=plot.stat)#
# rf_dist.size.by.partitions(dat3, "BIC", stat=plot.stat)#
# rf_dist.size.by.partitions(dat4, "BIC", stat=plot.stat)#
# rf_dist.size.by.partitions(dat5, "BIC", stat=plot.stat)#
# rf_dist.size.by.partitions(dat5b, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat6, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat7, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat8, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat9, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat10, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat11, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat12, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat13, "BIC", stat=plot.stat)#
legend("bottomleft", c("lopho", "myria"), species, pch=spp.pch, col="black", bg="white", bty="n")#
#
# plot(0, type="n", xlim=xlimits, ylim=ylimits, ylab="", xlab="difference in IQtree max log likelihood of 'no partitioning' - 'partitioning'", main="partitioning w/ AICc")#
# abline(h=0, col="gray75", lty=2); abline(v=0, col="gray75", lty=2)#
# text(part.text1, part.text2, expression(italic("partitioning better")), cex=1, col="green4")#
# text(part.text1, part.text3, expression(italic("no partitioning better")), cex=1, col="red3")#
# # rf_dist.size.by.partitions(dat1, "AICc", stat=plot.stat)#
# # rf_dist.size.by.partitions(dat2, "AICc", stat=plot.stat)#
# # rf_dist.size.by.partitions(dat3, "AICc", stat=plot.stat)#
# # rf_dist.size.by.partitions(dat4, "AICc", stat=plot.stat)#
# # rf_dist.size.by.partitions(dat5, "AICc", stat=plot.stat)#
# # rf_dist.size.by.partitions(dat5b, "AICc", stat=plot.stat)#
# rf_dist.size.by.partitions(dat6, "AICc", stat=plot.stat)#
# rf_dist.size.by.partitions(dat7, "AICc", stat=plot.stat)#
# rf_dist.size.by.partitions(dat8, "AICc", stat=plot.stat)#
# rf_dist.size.by.partitions(dat9, "AICc", stat=plot.stat)#
# rf_dist.size.by.partitions(dat10, "AICc", stat=plot.stat)#
# rf_dist.size.by.partitions(dat11, "AICc", stat=plot.stat)#
# rf_dist.size.by.partitions(dat12, "AICc", stat=plot.stat)#
# rf_dist.size.by.partitions(dat13, "AICc", stat=plot.stat)#
#
legend("bottomleft", c("10", "20", "40", "80"), pch=15, col=samp.size.col, title = "num. genes", bg="white", cex=0.9, pt.cex=1.5)#
#
dev.off()
library(scales)#
setwd("~/Documents/UNIL/PartitioningMethods_SimulationProject/FunctioningPipeline/AnalysisResults")#
make.merge.id <- function(dat){#
	id.col <- rep(NA, dim(dat)[1])#
	for(i in 1:dim(dat)[1]){#
		if(length(grep("lopho", dat$file[i])) > 0) spp <- "lopho_"#
		if(length(grep("myria", dat$file[i])) > 0) spp <- "myria_"#
		if(length(grep("10", dat$file[i])) > 0) samp <- "10_"#
		if(length(grep("20", dat$file[i])) > 0) samp <- "20_"#
		if(length(grep("40", dat$file[i])) > 0) samp <- "40_"#
		if(length(grep("80", dat$file[i])) > 0) samp <- "80_"#
		if(length(grep("rcluster", dat$file[i])) > 0) algo <- "rcluster_"#
		if(length(grep("greedy", dat$file[i])) > 0) algo <- "greedy_"#
		if(length(grep("noPart", dat$file[i])) > 0) algo <- "noPart_"#
		if(length(grep("AIC", dat$file[i])) > 0) crit <- "AIC"#
		if(length(grep("AICc", dat$file[i])) > 0) crit <- "AICc"#
		if(length(grep("BIC", dat$file[i])) > 0) crit <- "BIC"#
		if(length(grep("noPart", dat$file[i])) > 0) crit <- "noPart"#
		id.col[i] <- paste(c(spp, samp, algo, crit), collapse="")#
	}#
	return(id.col)#
}#
#####################################
species <- c("lopho", "myria")#
spp.pch <- c(1,2)#
samp.sizes <- c(10,20,40,80)#
samp.size.col <- c("steelblue4", "darkorange2", "green4", "red3")#
pt.wid <- 2#
opac <- 0.95#
#
analyze.rf.datset <- function(dat, criterion){#
	spp.it <- 1#
	for(i in species){#
		col.it <- 1#
		for(j in samp.sizes){#
			no.part.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "noPart" ,]#
			rclust.AIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AIC" ,]#
			rclust.BIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "BIC" ,]#
			rclust.AICc.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AICc",]#
			if(criterion == "AIC") points(no.part.result$rf_dist - rclust.AIC.result$rf_dist, no.part.result$max.log.lik - rclust.AIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)#
			if(criterion == "BIC") points(no.part.result$rf_dist - rclust.BIC.result$rf_dist, no.part.result$max.log.lik - rclust.BIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)#
			if(criterion == "AICc") points(no.part.result$rf_dist - rclust.AICc.result$rf_dist, no.part.result$max.log.lik - rclust.AICc.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)			#
			col.it <- col.it + 1	#
		}#
		spp.it <- spp.it + 1	#
	}#
}#
analyze.euc.datset <- function(dat, criterion){#
	spp.it <- 1#
	for(i in species){#
		col.it <- 1#
		for(j in samp.sizes){#
			no.part.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "noPart" ,]#
			rclust.AIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AIC" ,]#
			rclust.BIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "BIC" ,]#
			rclust.AICc.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AICc",]#
			if(criterion == "AIC") points(no.part.result$eucl_dist - rclust.AIC.result$eucl_dist, no.part.result$max.log.lik - rclust.AIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)#
			if(criterion == "BIC") points(no.part.result$eucl_dist - rclust.BIC.result$eucl_dist, no.part.result$max.log.lik - rclust.BIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)#
			if(criterion == "AICc") points(no.part.result$eucl_dist - rclust.AICc.result$eucl_dist, no.part.result$max.log.lik - rclust.AICc.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)			#
			col.it <- col.it + 1	#
		}#
		spp.it <- spp.it + 1	#
	}#
}#
#
# can use any of these scores from the treebuilding in IQtree:#
#   max.log.lik#
#   uncon.log.lik#
#   AIC#
#   BIC#
#   AICc#
#   cons.log.lik (consensus tree LL)#
#   sum.branch.lens#
#   sum.int.branch.lens#
euc.size.by.partitions <- function(dat, criterion, stat="max.log.lik"){#
	spp.it <- 1#
	for(i in species){#
		col.it <- 1#
		for(j in samp.sizes){#
			no.part.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "noPart" ,]#
			rclust.AIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AIC" ,]#
			rclust.BIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "BIC" ,]#
			rclust.AICc.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AICc",]#
			if(stat == "max.log.lik"){#
				if(criterion == "AIC") points(no.part.result$max.log.lik - rclust.AIC.result$max.log.lik, no.part.result$eucl_dist - rclust.AIC.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AIC.result$num.partitions/2)#
				if(criterion == "BIC") points(no.part.result$max.log.lik - rclust.BIC.result$max.log.lik, no.part.result$eucl_dist - rclust.BIC.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.BIC.result$num.partitions/2)#
				if(criterion == "AICc") points(no.part.result$max.log.lik - rclust.AICc.result$max.log.lik, no.part.result$eucl_dist - rclust.AICc.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AICc.result$num.partitions/2)			#
			}#
			if(stat == "uncon.log.lik"){#
				if(criterion == "AIC") points(no.part.result$uncon.log.lik - rclust.AIC.result$uncon.log.lik, no.part.result$eucl_dist - rclust.AIC.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AIC.result$num.partitions/2)#
				if(criterion == "BIC") points(no.part.result$uncon.log.lik - rclust.BIC.result$uncon.log.lik, no.part.result$eucl_dist - rclust.BIC.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.BIC.result$num.partitions/2)#
				if(criterion == "AICc") points(no.part.result$uncon.log.lik - rclust.AICc.result$uncon.log.lik, no.part.result$eucl_dist - rclust.AICc.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AICc.result$num.partitions/2)			#
			}		#
			col.it <- col.it + 1	#
		}#
		spp.it <- spp.it + 1	#
	}#
}#
rf_dist.size.by.partitions <- function(dat, criterion, stat="max.log.lik"){#
	spp.it <- 1#
	for(i in species){#
		col.it <- 1#
		for(j in samp.sizes){#
			no.part.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "noPart" ,]#
			rclust.AIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AIC" ,]#
			rclust.BIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "BIC" ,]#
			rclust.AICc.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AICc",]#
			if(stat == "max.log.lik"){#
				if(criterion == "AIC") points(no.part.result$max.log.lik - rclust.AIC.result$max.log.lik, no.part.result$rf_dist - rclust.AIC.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AIC.result$num.partitions/2)#
				if(criterion == "BIC") points(no.part.result$max.log.lik - rclust.BIC.result$max.log.lik, no.part.result$rf_dist - rclust.BIC.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.BIC.result$num.partitions/2)#
				if(criterion == "AICc") points(no.part.result$max.log.lik - rclust.AICc.result$max.log.lik, no.part.result$rf_dist - rclust.AICc.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AICc.result$num.partitions/2)			#
			}#
			if(stat == "uncon.log.lik"){#
				if(criterion == "AIC") points(no.part.result$uncon.log.lik - rclust.AIC.result$uncon.log.lik, no.part.result$rf_dist - rclust.AIC.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AIC.result$num.partitions/2)#
				if(criterion == "BIC") points(no.part.result$uncon.log.lik - rclust.BIC.result$uncon.log.lik, no.part.result$rf_dist - rclust.BIC.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.BIC.result$num.partitions/2)#
				if(criterion == "AICc") points(no.part.result$uncon.log.lik - rclust.AICc.result$uncon.log.lik, no.part.result$rf_dist - rclust.AICc.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AICc.result$num.partitions/2)			#
			}		#
			col.it <- col.it + 1	#
		}#
		spp.it <- spp.it + 1	#
	}#
}#
#####################################
# mut rate 1000#
dat6 <- read.csv("AllStatsOutput_New_Rep1_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat6$uniqueID <- paste(dat6$species, dat6$samp.size, dat6$search.algo, dat6$part.IC, sep="_")#
dat6b <- read.table("RF_Eucl_results_New_Rep1_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat6b$uniqueID <- make.merge.id(dat6b)#
dat <- merge(dat6, dat6b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat6 <- dat#
#
dat7 <- read.csv("AllStatsOutput_New_Rep2_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat7$uniqueID <- paste(dat7$species, dat7$samp.size, dat7$search.algo, dat7$part.IC, sep="_")#
dat7b <- read.table("RF_Eucl_results_New_Rep2_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat7b$uniqueID <- make.merge.id(dat7b)#
dat <- merge(dat7, dat7b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat7 <- dat#
#
dat8 <- read.csv("AllStatsOutput_New_Rep3_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat8$uniqueID <- paste(dat8$species, dat8$samp.size, dat8$search.algo, dat8$part.IC, sep="_")#
dat8b <- read.table("RF_Eucl_results_New_Rep3_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat8b$uniqueID <- make.merge.id(dat8b)#
dat <- merge(dat8, dat8b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat8 <- dat#
#
dat9 <- read.csv("AllStatsOutput_New_Rep4_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat9$uniqueID <- paste(dat9$species, dat9$samp.size, dat9$search.algo, dat9$part.IC, sep="_")#
dat9b <- read.table("RF_Eucl_results_New_Rep4_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat9b$uniqueID <- make.merge.id(dat9b)#
dat <- merge(dat9, dat9b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat9 <- dat#
#
dat10 <- read.csv("AllStatsOutput_New_Rep5_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat10$uniqueID <- paste(dat10$species, dat10$samp.size, dat10$search.algo, dat10$part.IC, sep="_")#
dat10b <- read.table("RF_Eucl_results_New_Rep5_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat10b$uniqueID <- make.merge.id(dat10b)#
dat <- merge(dat10, dat10b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat10 <- dat#
#
dat11 <- read.csv("AllStatsOutput_New_Rep6_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat11$uniqueID <- paste(dat11$species, dat11$samp.size, dat11$search.algo, dat11$part.IC, sep="_")#
dat11b <- read.table("RF_Eucl_results_New_Rep6_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat11b$uniqueID <- make.merge.id(dat11b)#
dat <- merge(dat11, dat11b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat11 <- dat#
#
dat12 <- read.csv("AllStatsOutput_Newest_Rep7_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat12$uniqueID <- paste(dat12$species, dat12$samp.size, dat12$search.algo, dat12$part.IC, sep="_")#
dat12b <- read.table("RF_Eucl_results_New_Rep7_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat12b$uniqueID <- make.merge.id(dat12b)#
dat <- merge(dat12, dat12b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat12 <- dat#
#
dat13 <- read.csv("AllStatsOutput_Newest_Rep8_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat13$uniqueID <- paste(dat13$species, dat13$samp.size, dat13$search.algo, dat13$part.IC, sep="_")#
dat13b <- read.table("RF_Eucl_results_New_Rep8_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat13b$uniqueID <- make.merge.id(dat13b)#
dat <- merge(dat13, dat13b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat13 <- dat#
#########
#########
plot.stat <- "max.log.lik"#
part.text1 <- -35#
part.text2 <- 0.65#
part.text3 <- -0.65#
pdf("Results_Plots/Flipped_CompareLogLikelihoods_BICpartitioning.pdf", width=8, height=4)#
par(mfrow=c(1,2), mar=c(4,4,1.5,0.5)) # if just looking at BIC for partitionfinder#
opac <- 0.75#
pt.lwd <- 2#
xlimits <- c(-55,2.5)#
# robinson foulds distance difference#
#
ylimits <- c(-0.19,0.19)#
#
plot(0, type="n", xlim=xlimits, ylim=ylimits, ylab="", xlab="", main="partitioning w/ BIC")#
mtext(side=2, at=0, line=2.5, "difference in RF distance from true tree for 'no partitioning' - 'partitioning'")#
abline(h=0, col="gray75", lty=2); abline(v=0, col="gray75", lty=2)#
text(part.text1, part.text2, expression(italic("partitioning better")), cex=1, col="green4")#
text(part.text1, part.text3, expression(italic("no partitioning better")), cex=1, col="red3")#
rf_dist.size.by.partitions(dat6, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat7, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat8, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat9, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat10, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat11, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat12, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat13, "BIC", stat=plot.stat)#
#
legend("bottomleft", c("10", "20", "40", "80"), pch=15, col=samp.size.col, title = "num. genes", bg="white", cex=0.9, pt.cex=1.5)#
#
#__________________________________________________________________________________________##
# euclidean distance difference#
#
ylimits <- c(-0.75,0.75)#
#
plot(0, type="n", xlim=xlimits, ylim=ylimits, ylab="", xlab="", main="partitioning w/ BIC")#
mtext(side=2, at=0, line=2.5, "difference in euclidean distance from true tree for 'no partitioning' - 'partitioning'")#
abline(h=0, col="gray75", lty=2); abline(v=0, col="gray75", lty=2)#
text(part.text1, part.text2, expression(italic("partitioning better")), cex=1, col="green4")#
text(part.text1, part.text3, expression(italic("no partitioning better")), cex=1, col="red3")#
euc.size.by.partitions(dat6, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat7, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat8, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat9, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat10, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat11, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat12, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat13, "BIC", stat=plot.stat)#
#
legend("bottomleft", c("lopho", "myria"), species, pch=spp.pch, col="black", bg="white", bty="n")#
dev.off()
library(scales)#
setwd("~/Documents/UNIL/PartitioningMethods_SimulationProject/FunctioningPipeline/AnalysisResults")#
make.merge.id <- function(dat){#
	id.col <- rep(NA, dim(dat)[1])#
	for(i in 1:dim(dat)[1]){#
		if(length(grep("lopho", dat$file[i])) > 0) spp <- "lopho_"#
		if(length(grep("myria", dat$file[i])) > 0) spp <- "myria_"#
		if(length(grep("10", dat$file[i])) > 0) samp <- "10_"#
		if(length(grep("20", dat$file[i])) > 0) samp <- "20_"#
		if(length(grep("40", dat$file[i])) > 0) samp <- "40_"#
		if(length(grep("80", dat$file[i])) > 0) samp <- "80_"#
		if(length(grep("rcluster", dat$file[i])) > 0) algo <- "rcluster_"#
		if(length(grep("greedy", dat$file[i])) > 0) algo <- "greedy_"#
		if(length(grep("noPart", dat$file[i])) > 0) algo <- "noPart_"#
		if(length(grep("AIC", dat$file[i])) > 0) crit <- "AIC"#
		if(length(grep("AICc", dat$file[i])) > 0) crit <- "AICc"#
		if(length(grep("BIC", dat$file[i])) > 0) crit <- "BIC"#
		if(length(grep("noPart", dat$file[i])) > 0) crit <- "noPart"#
		id.col[i] <- paste(c(spp, samp, algo, crit), collapse="")#
	}#
	return(id.col)#
}#
#####################################
species <- c("lopho", "myria")#
spp.pch <- c(1,2)#
samp.sizes <- c(10,20,40,80)#
samp.size.col <- c("steelblue4", "darkorange2", "green4", "red3")#
pt.wid <- 2#
opac <- 0.95#
#
analyze.rf.datset <- function(dat, criterion){#
	spp.it <- 1#
	for(i in species){#
		col.it <- 1#
		for(j in samp.sizes){#
			no.part.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "noPart" ,]#
			rclust.AIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AIC" ,]#
			rclust.BIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "BIC" ,]#
			rclust.AICc.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AICc",]#
			if(criterion == "AIC") points(no.part.result$rf_dist - rclust.AIC.result$rf_dist, no.part.result$max.log.lik - rclust.AIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)#
			if(criterion == "BIC") points(no.part.result$rf_dist - rclust.BIC.result$rf_dist, no.part.result$max.log.lik - rclust.BIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)#
			if(criterion == "AICc") points(no.part.result$rf_dist - rclust.AICc.result$rf_dist, no.part.result$max.log.lik - rclust.AICc.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)			#
			col.it <- col.it + 1	#
		}#
		spp.it <- spp.it + 1	#
	}#
}#
analyze.euc.datset <- function(dat, criterion){#
	spp.it <- 1#
	for(i in species){#
		col.it <- 1#
		for(j in samp.sizes){#
			no.part.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "noPart" ,]#
			rclust.AIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AIC" ,]#
			rclust.BIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "BIC" ,]#
			rclust.AICc.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AICc",]#
			if(criterion == "AIC") points(no.part.result$eucl_dist - rclust.AIC.result$eucl_dist, no.part.result$max.log.lik - rclust.AIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)#
			if(criterion == "BIC") points(no.part.result$eucl_dist - rclust.BIC.result$eucl_dist, no.part.result$max.log.lik - rclust.BIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)#
			if(criterion == "AICc") points(no.part.result$eucl_dist - rclust.AICc.result$eucl_dist, no.part.result$max.log.lik - rclust.AICc.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)			#
			col.it <- col.it + 1	#
		}#
		spp.it <- spp.it + 1	#
	}#
}#
#
# can use any of these scores from the treebuilding in IQtree:#
#   max.log.lik#
#   uncon.log.lik#
#   AIC#
#   BIC#
#   AICc#
#   cons.log.lik (consensus tree LL)#
#   sum.branch.lens#
#   sum.int.branch.lens#
euc.size.by.partitions <- function(dat, criterion, stat="max.log.lik"){#
	spp.it <- 1#
	for(i in species){#
		col.it <- 1#
		for(j in samp.sizes){#
			no.part.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "noPart" ,]#
			rclust.AIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AIC" ,]#
			rclust.BIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "BIC" ,]#
			rclust.AICc.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AICc",]#
			if(stat == "max.log.lik"){#
				if(criterion == "AIC") points(no.part.result$max.log.lik - rclust.AIC.result$max.log.lik, no.part.result$eucl_dist - rclust.AIC.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AIC.result$num.partitions/2)#
				if(criterion == "BIC") points(no.part.result$max.log.lik - rclust.BIC.result$max.log.lik, no.part.result$eucl_dist - rclust.BIC.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.BIC.result$num.partitions/2)#
				if(criterion == "AICc") points(no.part.result$max.log.lik - rclust.AICc.result$max.log.lik, no.part.result$eucl_dist - rclust.AICc.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AICc.result$num.partitions/2)			#
			}#
			if(stat == "uncon.log.lik"){#
				if(criterion == "AIC") points(no.part.result$uncon.log.lik - rclust.AIC.result$uncon.log.lik, no.part.result$eucl_dist - rclust.AIC.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AIC.result$num.partitions/2)#
				if(criterion == "BIC") points(no.part.result$uncon.log.lik - rclust.BIC.result$uncon.log.lik, no.part.result$eucl_dist - rclust.BIC.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.BIC.result$num.partitions/2)#
				if(criterion == "AICc") points(no.part.result$uncon.log.lik - rclust.AICc.result$uncon.log.lik, no.part.result$eucl_dist - rclust.AICc.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AICc.result$num.partitions/2)			#
			}		#
			col.it <- col.it + 1	#
		}#
		spp.it <- spp.it + 1	#
	}#
}#
rf_dist.size.by.partitions <- function(dat, criterion, stat="max.log.lik"){#
	spp.it <- 1#
	for(i in species){#
		col.it <- 1#
		for(j in samp.sizes){#
			no.part.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "noPart" ,]#
			rclust.AIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AIC" ,]#
			rclust.BIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "BIC" ,]#
			rclust.AICc.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AICc",]#
			if(stat == "max.log.lik"){#
				if(criterion == "AIC") points(no.part.result$max.log.lik - rclust.AIC.result$max.log.lik, no.part.result$rf_dist - rclust.AIC.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AIC.result$num.partitions/2)#
				if(criterion == "BIC") points(no.part.result$max.log.lik - rclust.BIC.result$max.log.lik, no.part.result$rf_dist - rclust.BIC.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.BIC.result$num.partitions/2)#
				if(criterion == "AICc") points(no.part.result$max.log.lik - rclust.AICc.result$max.log.lik, no.part.result$rf_dist - rclust.AICc.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AICc.result$num.partitions/2)			#
			}#
			if(stat == "uncon.log.lik"){#
				if(criterion == "AIC") points(no.part.result$uncon.log.lik - rclust.AIC.result$uncon.log.lik, no.part.result$rf_dist - rclust.AIC.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AIC.result$num.partitions/2)#
				if(criterion == "BIC") points(no.part.result$uncon.log.lik - rclust.BIC.result$uncon.log.lik, no.part.result$rf_dist - rclust.BIC.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.BIC.result$num.partitions/2)#
				if(criterion == "AICc") points(no.part.result$uncon.log.lik - rclust.AICc.result$uncon.log.lik, no.part.result$rf_dist - rclust.AICc.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AICc.result$num.partitions/2)			#
			}		#
			col.it <- col.it + 1	#
		}#
		spp.it <- spp.it + 1	#
	}#
}#
#####################################
# mut rate 1000#
dat6 <- read.csv("AllStatsOutput_New_Rep1_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat6$uniqueID <- paste(dat6$species, dat6$samp.size, dat6$search.algo, dat6$part.IC, sep="_")#
dat6b <- read.table("RF_Eucl_results_New_Rep1_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat6b$uniqueID <- make.merge.id(dat6b)#
dat <- merge(dat6, dat6b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat6 <- dat#
#
dat7 <- read.csv("AllStatsOutput_New_Rep2_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat7$uniqueID <- paste(dat7$species, dat7$samp.size, dat7$search.algo, dat7$part.IC, sep="_")#
dat7b <- read.table("RF_Eucl_results_New_Rep2_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat7b$uniqueID <- make.merge.id(dat7b)#
dat <- merge(dat7, dat7b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat7 <- dat#
#
dat8 <- read.csv("AllStatsOutput_New_Rep3_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat8$uniqueID <- paste(dat8$species, dat8$samp.size, dat8$search.algo, dat8$part.IC, sep="_")#
dat8b <- read.table("RF_Eucl_results_New_Rep3_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat8b$uniqueID <- make.merge.id(dat8b)#
dat <- merge(dat8, dat8b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat8 <- dat#
#
dat9 <- read.csv("AllStatsOutput_New_Rep4_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat9$uniqueID <- paste(dat9$species, dat9$samp.size, dat9$search.algo, dat9$part.IC, sep="_")#
dat9b <- read.table("RF_Eucl_results_New_Rep4_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat9b$uniqueID <- make.merge.id(dat9b)#
dat <- merge(dat9, dat9b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat9 <- dat#
#
dat10 <- read.csv("AllStatsOutput_New_Rep5_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat10$uniqueID <- paste(dat10$species, dat10$samp.size, dat10$search.algo, dat10$part.IC, sep="_")#
dat10b <- read.table("RF_Eucl_results_New_Rep5_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat10b$uniqueID <- make.merge.id(dat10b)#
dat <- merge(dat10, dat10b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat10 <- dat#
#
dat11 <- read.csv("AllStatsOutput_New_Rep6_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat11$uniqueID <- paste(dat11$species, dat11$samp.size, dat11$search.algo, dat11$part.IC, sep="_")#
dat11b <- read.table("RF_Eucl_results_New_Rep6_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat11b$uniqueID <- make.merge.id(dat11b)#
dat <- merge(dat11, dat11b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat11 <- dat#
#
dat12 <- read.csv("AllStatsOutput_Newest_Rep7_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat12$uniqueID <- paste(dat12$species, dat12$samp.size, dat12$search.algo, dat12$part.IC, sep="_")#
dat12b <- read.table("RF_Eucl_results_New_Rep7_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat12b$uniqueID <- make.merge.id(dat12b)#
dat <- merge(dat12, dat12b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat12 <- dat#
#
dat13 <- read.csv("AllStatsOutput_Newest_Rep8_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat13$uniqueID <- paste(dat13$species, dat13$samp.size, dat13$search.algo, dat13$part.IC, sep="_")#
dat13b <- read.table("RF_Eucl_results_New_Rep8_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat13b$uniqueID <- make.merge.id(dat13b)#
dat <- merge(dat13, dat13b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat13 <- dat#
#########
#########
plot.stat <- "max.log.lik"#
part.text1 <- -35#
part.text2 <- 0.65#
part.text3 <- -0.65#
pdf("Results_Plots/Flipped_CompareLogLikelihoods_BICpartitioning.pdf", width=8, height=4)#
par(mfrow=c(1,2), mar=c(4,4,1.5,0.5)) # if just looking at BIC for partitionfinder#
opac <- 0.75#
pt.lwd <- 2#
xlimits <- c(-55,2.5)#
# robinson foulds distance difference#
#
ylimits <- c(-0.19,0.19)#
#
plot(0, type="n", xlim=xlimits, ylim=ylimits, ylab="", xlab="", main="partitioning w/ BIC")#
mtext(side=2, at=0, line=2.5, "diff in RF dist from true tree for 'no partitioning' - 'partitioning'")#
abline(h=0, col="gray75", lty=2); abline(v=0, col="gray75", lty=2)#
text(part.text1, part.text2, expression(italic("partitioning better")), cex=1, col="green4")#
text(part.text1, part.text3, expression(italic("no partitioning better")), cex=1, col="red3")#
rf_dist.size.by.partitions(dat6, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat7, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat8, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat9, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat10, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat11, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat12, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat13, "BIC", stat=plot.stat)#
#
legend("bottomleft", c("10", "20", "40", "80"), pch=15, col=samp.size.col, title = "num. genes", bg="white", cex=0.9, pt.cex=1.5)#
#
#__________________________________________________________________________________________##
# euclidean distance difference#
#
ylimits <- c(-0.75,0.75)#
#
plot(0, type="n", xlim=xlimits, ylim=ylimits, ylab="", xlab="", main="partitioning w/ BIC")#
mtext(side=2, at=0, line=2.5, "diff in eucl dist from true tree for 'no partitioning' - 'partitioning'")#
abline(h=0, col="gray75", lty=2); abline(v=0, col="gray75", lty=2)#
text(part.text1, part.text2, expression(italic("partitioning better")), cex=1, col="green4")#
text(part.text1, part.text3, expression(italic("no partitioning better")), cex=1, col="red3")#
euc.size.by.partitions(dat6, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat7, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat8, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat9, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat10, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat11, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat12, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat13, "BIC", stat=plot.stat)#
#
legend("bottomleft", c("lopho", "myria"), species, pch=spp.pch, col="black", bg="white", bty="n")#
dev.off()
library(scales)#
setwd("~/Documents/UNIL/PartitioningMethods_SimulationProject/FunctioningPipeline/AnalysisResults")#
make.merge.id <- function(dat){#
	id.col <- rep(NA, dim(dat)[1])#
	for(i in 1:dim(dat)[1]){#
		if(length(grep("lopho", dat$file[i])) > 0) spp <- "lopho_"#
		if(length(grep("myria", dat$file[i])) > 0) spp <- "myria_"#
		if(length(grep("10", dat$file[i])) > 0) samp <- "10_"#
		if(length(grep("20", dat$file[i])) > 0) samp <- "20_"#
		if(length(grep("40", dat$file[i])) > 0) samp <- "40_"#
		if(length(grep("80", dat$file[i])) > 0) samp <- "80_"#
		if(length(grep("rcluster", dat$file[i])) > 0) algo <- "rcluster_"#
		if(length(grep("greedy", dat$file[i])) > 0) algo <- "greedy_"#
		if(length(grep("noPart", dat$file[i])) > 0) algo <- "noPart_"#
		if(length(grep("AIC", dat$file[i])) > 0) crit <- "AIC"#
		if(length(grep("AICc", dat$file[i])) > 0) crit <- "AICc"#
		if(length(grep("BIC", dat$file[i])) > 0) crit <- "BIC"#
		if(length(grep("noPart", dat$file[i])) > 0) crit <- "noPart"#
		id.col[i] <- paste(c(spp, samp, algo, crit), collapse="")#
	}#
	return(id.col)#
}#
#####################################
species <- c("lopho", "myria")#
spp.pch <- c(1,2)#
samp.sizes <- c(10,20,40,80)#
samp.size.col <- c("steelblue4", "darkorange2", "green4", "red3")#
pt.wid <- 2#
opac <- 0.95#
#
analyze.rf.datset <- function(dat, criterion){#
	spp.it <- 1#
	for(i in species){#
		col.it <- 1#
		for(j in samp.sizes){#
			no.part.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "noPart" ,]#
			rclust.AIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AIC" ,]#
			rclust.BIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "BIC" ,]#
			rclust.AICc.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AICc",]#
			if(criterion == "AIC") points(no.part.result$rf_dist - rclust.AIC.result$rf_dist, no.part.result$max.log.lik - rclust.AIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)#
			if(criterion == "BIC") points(no.part.result$rf_dist - rclust.BIC.result$rf_dist, no.part.result$max.log.lik - rclust.BIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)#
			if(criterion == "AICc") points(no.part.result$rf_dist - rclust.AICc.result$rf_dist, no.part.result$max.log.lik - rclust.AICc.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)			#
			col.it <- col.it + 1	#
		}#
		spp.it <- spp.it + 1	#
	}#
}#
analyze.euc.datset <- function(dat, criterion){#
	spp.it <- 1#
	for(i in species){#
		col.it <- 1#
		for(j in samp.sizes){#
			no.part.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "noPart" ,]#
			rclust.AIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AIC" ,]#
			rclust.BIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "BIC" ,]#
			rclust.AICc.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AICc",]#
			if(criterion == "AIC") points(no.part.result$eucl_dist - rclust.AIC.result$eucl_dist, no.part.result$max.log.lik - rclust.AIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)#
			if(criterion == "BIC") points(no.part.result$eucl_dist - rclust.BIC.result$eucl_dist, no.part.result$max.log.lik - rclust.BIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)#
			if(criterion == "AICc") points(no.part.result$eucl_dist - rclust.AICc.result$eucl_dist, no.part.result$max.log.lik - rclust.AICc.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)			#
			col.it <- col.it + 1	#
		}#
		spp.it <- spp.it + 1	#
	}#
}#
#
# can use any of these scores from the treebuilding in IQtree:#
#   max.log.lik#
#   uncon.log.lik#
#   AIC#
#   BIC#
#   AICc#
#   cons.log.lik (consensus tree LL)#
#   sum.branch.lens#
#   sum.int.branch.lens#
euc.size.by.partitions <- function(dat, criterion, stat="max.log.lik"){#
	spp.it <- 1#
	for(i in species){#
		col.it <- 1#
		for(j in samp.sizes){#
			no.part.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "noPart" ,]#
			rclust.AIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AIC" ,]#
			rclust.BIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "BIC" ,]#
			rclust.AICc.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AICc",]#
			if(stat == "max.log.lik"){#
				if(criterion == "AIC") points(no.part.result$max.log.lik - rclust.AIC.result$max.log.lik, no.part.result$eucl_dist - rclust.AIC.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AIC.result$num.partitions/2)#
				if(criterion == "BIC") points(no.part.result$max.log.lik - rclust.BIC.result$max.log.lik, no.part.result$eucl_dist - rclust.BIC.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.BIC.result$num.partitions/2)#
				if(criterion == "AICc") points(no.part.result$max.log.lik - rclust.AICc.result$max.log.lik, no.part.result$eucl_dist - rclust.AICc.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AICc.result$num.partitions/2)			#
			}#
			if(stat == "uncon.log.lik"){#
				if(criterion == "AIC") points(no.part.result$uncon.log.lik - rclust.AIC.result$uncon.log.lik, no.part.result$eucl_dist - rclust.AIC.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AIC.result$num.partitions/2)#
				if(criterion == "BIC") points(no.part.result$uncon.log.lik - rclust.BIC.result$uncon.log.lik, no.part.result$eucl_dist - rclust.BIC.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.BIC.result$num.partitions/2)#
				if(criterion == "AICc") points(no.part.result$uncon.log.lik - rclust.AICc.result$uncon.log.lik, no.part.result$eucl_dist - rclust.AICc.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AICc.result$num.partitions/2)			#
			}		#
			col.it <- col.it + 1	#
		}#
		spp.it <- spp.it + 1	#
	}#
}#
rf_dist.size.by.partitions <- function(dat, criterion, stat="max.log.lik"){#
	spp.it <- 1#
	for(i in species){#
		col.it <- 1#
		for(j in samp.sizes){#
			no.part.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "noPart" ,]#
			rclust.AIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AIC" ,]#
			rclust.BIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "BIC" ,]#
			rclust.AICc.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AICc",]#
			if(stat == "max.log.lik"){#
				if(criterion == "AIC") points(no.part.result$max.log.lik - rclust.AIC.result$max.log.lik, no.part.result$rf_dist - rclust.AIC.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AIC.result$num.partitions/2)#
				if(criterion == "BIC") points(no.part.result$max.log.lik - rclust.BIC.result$max.log.lik, no.part.result$rf_dist - rclust.BIC.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.BIC.result$num.partitions/2)#
				if(criterion == "AICc") points(no.part.result$max.log.lik - rclust.AICc.result$max.log.lik, no.part.result$rf_dist - rclust.AICc.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AICc.result$num.partitions/2)			#
			}#
			if(stat == "uncon.log.lik"){#
				if(criterion == "AIC") points(no.part.result$uncon.log.lik - rclust.AIC.result$uncon.log.lik, no.part.result$rf_dist - rclust.AIC.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AIC.result$num.partitions/2)#
				if(criterion == "BIC") points(no.part.result$uncon.log.lik - rclust.BIC.result$uncon.log.lik, no.part.result$rf_dist - rclust.BIC.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.BIC.result$num.partitions/2)#
				if(criterion == "AICc") points(no.part.result$uncon.log.lik - rclust.AICc.result$uncon.log.lik, no.part.result$rf_dist - rclust.AICc.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AICc.result$num.partitions/2)			#
			}		#
			col.it <- col.it + 1	#
		}#
		spp.it <- spp.it + 1	#
	}#
}#
#####################################
# mut rate 1000#
dat6 <- read.csv("AllStatsOutput_New_Rep1_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat6$uniqueID <- paste(dat6$species, dat6$samp.size, dat6$search.algo, dat6$part.IC, sep="_")#
dat6b <- read.table("RF_Eucl_results_New_Rep1_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat6b$uniqueID <- make.merge.id(dat6b)#
dat <- merge(dat6, dat6b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat6 <- dat#
#
dat7 <- read.csv("AllStatsOutput_New_Rep2_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat7$uniqueID <- paste(dat7$species, dat7$samp.size, dat7$search.algo, dat7$part.IC, sep="_")#
dat7b <- read.table("RF_Eucl_results_New_Rep2_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat7b$uniqueID <- make.merge.id(dat7b)#
dat <- merge(dat7, dat7b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat7 <- dat#
#
dat8 <- read.csv("AllStatsOutput_New_Rep3_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat8$uniqueID <- paste(dat8$species, dat8$samp.size, dat8$search.algo, dat8$part.IC, sep="_")#
dat8b <- read.table("RF_Eucl_results_New_Rep3_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat8b$uniqueID <- make.merge.id(dat8b)#
dat <- merge(dat8, dat8b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat8 <- dat#
#
dat9 <- read.csv("AllStatsOutput_New_Rep4_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat9$uniqueID <- paste(dat9$species, dat9$samp.size, dat9$search.algo, dat9$part.IC, sep="_")#
dat9b <- read.table("RF_Eucl_results_New_Rep4_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat9b$uniqueID <- make.merge.id(dat9b)#
dat <- merge(dat9, dat9b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat9 <- dat#
#
dat10 <- read.csv("AllStatsOutput_New_Rep5_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat10$uniqueID <- paste(dat10$species, dat10$samp.size, dat10$search.algo, dat10$part.IC, sep="_")#
dat10b <- read.table("RF_Eucl_results_New_Rep5_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat10b$uniqueID <- make.merge.id(dat10b)#
dat <- merge(dat10, dat10b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat10 <- dat#
#
dat11 <- read.csv("AllStatsOutput_New_Rep6_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat11$uniqueID <- paste(dat11$species, dat11$samp.size, dat11$search.algo, dat11$part.IC, sep="_")#
dat11b <- read.table("RF_Eucl_results_New_Rep6_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat11b$uniqueID <- make.merge.id(dat11b)#
dat <- merge(dat11, dat11b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat11 <- dat#
#
dat12 <- read.csv("AllStatsOutput_Newest_Rep7_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat12$uniqueID <- paste(dat12$species, dat12$samp.size, dat12$search.algo, dat12$part.IC, sep="_")#
dat12b <- read.table("RF_Eucl_results_New_Rep7_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat12b$uniqueID <- make.merge.id(dat12b)#
dat <- merge(dat12, dat12b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat12 <- dat#
#
dat13 <- read.csv("AllStatsOutput_Newest_Rep8_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat13$uniqueID <- paste(dat13$species, dat13$samp.size, dat13$search.algo, dat13$part.IC, sep="_")#
dat13b <- read.table("RF_Eucl_results_New_Rep8_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat13b$uniqueID <- make.merge.id(dat13b)#
dat <- merge(dat13, dat13b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat13 <- dat#
#########
#########
plot.stat <- "max.log.lik"#
part.text1 <- -35#
part.text2 <- 0.65#
part.text3 <- -0.65#
pdf("Results_Plots/Flipped_CompareLogLikelihoods_BICpartitioning.pdf", width=8, height=4)#
par(mfrow=c(1,2), mar=c(3.5,4,1.5,0.5)) # if just looking at BIC for partitionfinder#
opac <- 0.75#
pt.lwd <- 2#
xlimits <- c(-55,2.5)#
# robinson foulds distance difference#
#
ylimits <- c(-0.19,0.19)#
#
plot(0, type="n", xlim=xlimits, ylim=ylimits, ylab="", xlab="", main="partitioning w/ BIC")#
mtext(side=2, at=0, line=2.5, "diff in RF dist from true tree for 'no part' - 'partitioning'")#
abline(h=0, col="gray75", lty=2); abline(v=0, col="gray75", lty=2)#
text(part.text1, part.text2, expression(italic("partitioning better")), cex=1, col="green4")#
text(part.text1, part.text3, expression(italic("no partitioning better")), cex=1, col="red3")#
rf_dist.size.by.partitions(dat6, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat7, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat8, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat9, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat10, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat11, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat12, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat13, "BIC", stat=plot.stat)#
#
legend("bottomleft", c("10", "20", "40", "80"), pch=15, col=samp.size.col, title = "num. genes", bg="white", cex=0.9, pt.cex=1.5)#
#
#__________________________________________________________________________________________##
# euclidean distance difference#
#
ylimits <- c(-0.75,0.75)#
#
plot(0, type="n", xlim=xlimits, ylim=ylimits, ylab="", xlab="", main="partitioning w/ BIC")#
mtext(side=2, at=0, line=2.5, "diff in eucl dist from true tree for 'no part' - 'partitioning'")#
abline(h=0, col="gray75", lty=2); abline(v=0, col="gray75", lty=2)#
text(part.text1, part.text2, expression(italic("partitioning better")), cex=1, col="green4")#
text(part.text1, part.text3, expression(italic("no partitioning better")), cex=1, col="red3")#
euc.size.by.partitions(dat6, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat7, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat8, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat9, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat10, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat11, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat12, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat13, "BIC", stat=plot.stat)#
#
legend("bottomleft", c("lopho", "myria"), species, pch=spp.pch, col="black", bg="white", bty="n")#
dev.off()
library(scales)#
setwd("~/Documents/UNIL/PartitioningMethods_SimulationProject/FunctioningPipeline/AnalysisResults")#
make.merge.id <- function(dat){#
	id.col <- rep(NA, dim(dat)[1])#
	for(i in 1:dim(dat)[1]){#
		if(length(grep("lopho", dat$file[i])) > 0) spp <- "lopho_"#
		if(length(grep("myria", dat$file[i])) > 0) spp <- "myria_"#
		if(length(grep("10", dat$file[i])) > 0) samp <- "10_"#
		if(length(grep("20", dat$file[i])) > 0) samp <- "20_"#
		if(length(grep("40", dat$file[i])) > 0) samp <- "40_"#
		if(length(grep("80", dat$file[i])) > 0) samp <- "80_"#
		if(length(grep("rcluster", dat$file[i])) > 0) algo <- "rcluster_"#
		if(length(grep("greedy", dat$file[i])) > 0) algo <- "greedy_"#
		if(length(grep("noPart", dat$file[i])) > 0) algo <- "noPart_"#
		if(length(grep("AIC", dat$file[i])) > 0) crit <- "AIC"#
		if(length(grep("AICc", dat$file[i])) > 0) crit <- "AICc"#
		if(length(grep("BIC", dat$file[i])) > 0) crit <- "BIC"#
		if(length(grep("noPart", dat$file[i])) > 0) crit <- "noPart"#
		id.col[i] <- paste(c(spp, samp, algo, crit), collapse="")#
	}#
	return(id.col)#
}#
#####################################
species <- c("lopho", "myria")#
spp.pch <- c(1,2)#
samp.sizes <- c(10,20,40,80)#
samp.size.col <- c("steelblue4", "darkorange2", "green4", "red3")#
pt.wid <- 2#
opac <- 0.95#
#
analyze.rf.datset <- function(dat, criterion){#
	spp.it <- 1#
	for(i in species){#
		col.it <- 1#
		for(j in samp.sizes){#
			no.part.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "noPart" ,]#
			rclust.AIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AIC" ,]#
			rclust.BIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "BIC" ,]#
			rclust.AICc.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AICc",]#
			if(criterion == "AIC") points(no.part.result$rf_dist - rclust.AIC.result$rf_dist, no.part.result$max.log.lik - rclust.AIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)#
			if(criterion == "BIC") points(no.part.result$rf_dist - rclust.BIC.result$rf_dist, no.part.result$max.log.lik - rclust.BIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)#
			if(criterion == "AICc") points(no.part.result$rf_dist - rclust.AICc.result$rf_dist, no.part.result$max.log.lik - rclust.AICc.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)			#
			col.it <- col.it + 1	#
		}#
		spp.it <- spp.it + 1	#
	}#
}#
analyze.euc.datset <- function(dat, criterion){#
	spp.it <- 1#
	for(i in species){#
		col.it <- 1#
		for(j in samp.sizes){#
			no.part.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "noPart" ,]#
			rclust.AIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AIC" ,]#
			rclust.BIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "BIC" ,]#
			rclust.AICc.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AICc",]#
			if(criterion == "AIC") points(no.part.result$eucl_dist - rclust.AIC.result$eucl_dist, no.part.result$max.log.lik - rclust.AIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)#
			if(criterion == "BIC") points(no.part.result$eucl_dist - rclust.BIC.result$eucl_dist, no.part.result$max.log.lik - rclust.BIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)#
			if(criterion == "AICc") points(no.part.result$eucl_dist - rclust.AICc.result$eucl_dist, no.part.result$max.log.lik - rclust.AICc.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)			#
			col.it <- col.it + 1	#
		}#
		spp.it <- spp.it + 1	#
	}#
}#
#
# can use any of these scores from the treebuilding in IQtree:#
#   max.log.lik#
#   uncon.log.lik#
#   AIC#
#   BIC#
#   AICc#
#   cons.log.lik (consensus tree LL)#
#   sum.branch.lens#
#   sum.int.branch.lens#
euc.size.by.partitions <- function(dat, criterion, stat="max.log.lik"){#
	spp.it <- 1#
	for(i in species){#
		col.it <- 1#
		for(j in samp.sizes){#
			no.part.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "noPart" ,]#
			rclust.AIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AIC" ,]#
			rclust.BIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "BIC" ,]#
			rclust.AICc.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AICc",]#
			if(stat == "max.log.lik"){#
				if(criterion == "AIC") points(no.part.result$max.log.lik - rclust.AIC.result$max.log.lik, no.part.result$eucl_dist - rclust.AIC.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AIC.result$num.partitions/2)#
				if(criterion == "BIC") points(no.part.result$max.log.lik - rclust.BIC.result$max.log.lik, no.part.result$eucl_dist - rclust.BIC.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.BIC.result$num.partitions/2)#
				if(criterion == "AICc") points(no.part.result$max.log.lik - rclust.AICc.result$max.log.lik, no.part.result$eucl_dist - rclust.AICc.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AICc.result$num.partitions/2)			#
			}#
			if(stat == "uncon.log.lik"){#
				if(criterion == "AIC") points(no.part.result$uncon.log.lik - rclust.AIC.result$uncon.log.lik, no.part.result$eucl_dist - rclust.AIC.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AIC.result$num.partitions/2)#
				if(criterion == "BIC") points(no.part.result$uncon.log.lik - rclust.BIC.result$uncon.log.lik, no.part.result$eucl_dist - rclust.BIC.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.BIC.result$num.partitions/2)#
				if(criterion == "AICc") points(no.part.result$uncon.log.lik - rclust.AICc.result$uncon.log.lik, no.part.result$eucl_dist - rclust.AICc.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AICc.result$num.partitions/2)			#
			}		#
			col.it <- col.it + 1	#
		}#
		spp.it <- spp.it + 1	#
	}#
}#
rf_dist.size.by.partitions <- function(dat, criterion, stat="max.log.lik"){#
	spp.it <- 1#
	for(i in species){#
		col.it <- 1#
		for(j in samp.sizes){#
			no.part.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "noPart" ,]#
			rclust.AIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AIC" ,]#
			rclust.BIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "BIC" ,]#
			rclust.AICc.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AICc",]#
			if(stat == "max.log.lik"){#
				if(criterion == "AIC") points(no.part.result$max.log.lik - rclust.AIC.result$max.log.lik, no.part.result$rf_dist - rclust.AIC.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AIC.result$num.partitions/2)#
				if(criterion == "BIC") points(no.part.result$max.log.lik - rclust.BIC.result$max.log.lik, no.part.result$rf_dist - rclust.BIC.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.BIC.result$num.partitions/2)#
				if(criterion == "AICc") points(no.part.result$max.log.lik - rclust.AICc.result$max.log.lik, no.part.result$rf_dist - rclust.AICc.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AICc.result$num.partitions/2)			#
			}#
			if(stat == "uncon.log.lik"){#
				if(criterion == "AIC") points(no.part.result$uncon.log.lik - rclust.AIC.result$uncon.log.lik, no.part.result$rf_dist - rclust.AIC.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AIC.result$num.partitions/2)#
				if(criterion == "BIC") points(no.part.result$uncon.log.lik - rclust.BIC.result$uncon.log.lik, no.part.result$rf_dist - rclust.BIC.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.BIC.result$num.partitions/2)#
				if(criterion == "AICc") points(no.part.result$uncon.log.lik - rclust.AICc.result$uncon.log.lik, no.part.result$rf_dist - rclust.AICc.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AICc.result$num.partitions/2)			#
			}		#
			col.it <- col.it + 1	#
		}#
		spp.it <- spp.it + 1	#
	}#
}#
#####################################
# mut rate 1000#
dat6 <- read.csv("AllStatsOutput_New_Rep1_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat6$uniqueID <- paste(dat6$species, dat6$samp.size, dat6$search.algo, dat6$part.IC, sep="_")#
dat6b <- read.table("RF_Eucl_results_New_Rep1_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat6b$uniqueID <- make.merge.id(dat6b)#
dat <- merge(dat6, dat6b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat6 <- dat#
#
dat7 <- read.csv("AllStatsOutput_New_Rep2_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat7$uniqueID <- paste(dat7$species, dat7$samp.size, dat7$search.algo, dat7$part.IC, sep="_")#
dat7b <- read.table("RF_Eucl_results_New_Rep2_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat7b$uniqueID <- make.merge.id(dat7b)#
dat <- merge(dat7, dat7b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat7 <- dat#
#
dat8 <- read.csv("AllStatsOutput_New_Rep3_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat8$uniqueID <- paste(dat8$species, dat8$samp.size, dat8$search.algo, dat8$part.IC, sep="_")#
dat8b <- read.table("RF_Eucl_results_New_Rep3_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat8b$uniqueID <- make.merge.id(dat8b)#
dat <- merge(dat8, dat8b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat8 <- dat#
#
dat9 <- read.csv("AllStatsOutput_New_Rep4_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat9$uniqueID <- paste(dat9$species, dat9$samp.size, dat9$search.algo, dat9$part.IC, sep="_")#
dat9b <- read.table("RF_Eucl_results_New_Rep4_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat9b$uniqueID <- make.merge.id(dat9b)#
dat <- merge(dat9, dat9b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat9 <- dat#
#
dat10 <- read.csv("AllStatsOutput_New_Rep5_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat10$uniqueID <- paste(dat10$species, dat10$samp.size, dat10$search.algo, dat10$part.IC, sep="_")#
dat10b <- read.table("RF_Eucl_results_New_Rep5_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat10b$uniqueID <- make.merge.id(dat10b)#
dat <- merge(dat10, dat10b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat10 <- dat#
#
dat11 <- read.csv("AllStatsOutput_New_Rep6_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat11$uniqueID <- paste(dat11$species, dat11$samp.size, dat11$search.algo, dat11$part.IC, sep="_")#
dat11b <- read.table("RF_Eucl_results_New_Rep6_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat11b$uniqueID <- make.merge.id(dat11b)#
dat <- merge(dat11, dat11b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat11 <- dat#
#
dat12 <- read.csv("AllStatsOutput_Newest_Rep7_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat12$uniqueID <- paste(dat12$species, dat12$samp.size, dat12$search.algo, dat12$part.IC, sep="_")#
dat12b <- read.table("RF_Eucl_results_New_Rep7_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat12b$uniqueID <- make.merge.id(dat12b)#
dat <- merge(dat12, dat12b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat12 <- dat#
#
dat13 <- read.csv("AllStatsOutput_Newest_Rep8_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat13$uniqueID <- paste(dat13$species, dat13$samp.size, dat13$search.algo, dat13$part.IC, sep="_")#
dat13b <- read.table("RF_Eucl_results_New_Rep8_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat13b$uniqueID <- make.merge.id(dat13b)#
dat <- merge(dat13, dat13b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat13 <- dat#
#########
#########
plot.stat <- "max.log.lik"#
part.text1 <- -35#
part.text2 <- 0.65#
part.text3 <- -0.65#
pdf("Results_Plots/Flipped_CompareLogLikelihoods_BICpartitioning.pdf", width=8, height=4)#
par(mfrow=c(1,2), mar=c(3.5,4,1.5,0.5)) # if just looking at BIC for partitionfinder#
opac <- 0.75#
pt.lwd <- 2#
xlimits <- c(-55,2.5)#
# robinson foulds distance difference#
#
ylimits <- c(-0.19,0.19)#
#
plot(0, type="n", xlim=xlimits, ylim=ylimits, ylab="", xlab="", main="partitioning w/ BIC")#
mtext(side=2, at=0, line=2.5, "diff in RF dist from true tree for 'no part' - 'part'")#
abline(h=0, col="gray75", lty=2); abline(v=0, col="gray75", lty=2)#
text(part.text1, part.text2, expression(italic("partitioning better")), cex=1, col="green4")#
text(part.text1, part.text3, expression(italic("no partitioning better")), cex=1, col="red3")#
rf_dist.size.by.partitions(dat6, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat7, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat8, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat9, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat10, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat11, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat12, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat13, "BIC", stat=plot.stat)#
#
legend("bottomleft", c("10", "20", "40", "80"), pch=15, col=samp.size.col, title = "num. genes", bg="white", cex=0.9, pt.cex=1.5)#
#
#__________________________________________________________________________________________##
# euclidean distance difference#
#
ylimits <- c(-0.75,0.75)#
#
plot(0, type="n", xlim=xlimits, ylim=ylimits, ylab="", xlab="", main="partitioning w/ BIC")#
mtext(side=2, at=0, line=2.5, "diff in eucl dist from true tree for 'no part' - 'part'")#
abline(h=0, col="gray75", lty=2); abline(v=0, col="gray75", lty=2)#
text(part.text1, part.text2, expression(italic("partitioning better")), cex=1, col="green4")#
text(part.text1, part.text3, expression(italic("no partitioning better")), cex=1, col="red3")#
euc.size.by.partitions(dat6, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat7, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat8, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat9, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat10, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat11, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat12, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat13, "BIC", stat=plot.stat)#
#
legend("bottomleft", c("lopho", "myria"), species, pch=spp.pch, col="black", bg="white", bty="n")#
dev.off()
library(scales)#
setwd("~/Documents/UNIL/PartitioningMethods_SimulationProject/FunctioningPipeline/AnalysisResults")#
make.merge.id <- function(dat){#
	id.col <- rep(NA, dim(dat)[1])#
	for(i in 1:dim(dat)[1]){#
		if(length(grep("lopho", dat$file[i])) > 0) spp <- "lopho_"#
		if(length(grep("myria", dat$file[i])) > 0) spp <- "myria_"#
		if(length(grep("10", dat$file[i])) > 0) samp <- "10_"#
		if(length(grep("20", dat$file[i])) > 0) samp <- "20_"#
		if(length(grep("40", dat$file[i])) > 0) samp <- "40_"#
		if(length(grep("80", dat$file[i])) > 0) samp <- "80_"#
		if(length(grep("rcluster", dat$file[i])) > 0) algo <- "rcluster_"#
		if(length(grep("greedy", dat$file[i])) > 0) algo <- "greedy_"#
		if(length(grep("noPart", dat$file[i])) > 0) algo <- "noPart_"#
		if(length(grep("AIC", dat$file[i])) > 0) crit <- "AIC"#
		if(length(grep("AICc", dat$file[i])) > 0) crit <- "AICc"#
		if(length(grep("BIC", dat$file[i])) > 0) crit <- "BIC"#
		if(length(grep("noPart", dat$file[i])) > 0) crit <- "noPart"#
		id.col[i] <- paste(c(spp, samp, algo, crit), collapse="")#
	}#
	return(id.col)#
}#
#####################################
species <- c("lopho", "myria")#
spp.pch <- c(1,2)#
samp.sizes <- c(10,20,40,80)#
samp.size.col <- c("steelblue4", "darkorange2", "green4", "red3")#
pt.wid <- 2#
opac <- 0.95#
#
analyze.rf.datset <- function(dat, criterion){#
	spp.it <- 1#
	for(i in species){#
		col.it <- 1#
		for(j in samp.sizes){#
			no.part.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "noPart" ,]#
			rclust.AIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AIC" ,]#
			rclust.BIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "BIC" ,]#
			rclust.AICc.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AICc",]#
			if(criterion == "AIC") points(no.part.result$rf_dist - rclust.AIC.result$rf_dist, no.part.result$max.log.lik - rclust.AIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)#
			if(criterion == "BIC") points(no.part.result$rf_dist - rclust.BIC.result$rf_dist, no.part.result$max.log.lik - rclust.BIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)#
			if(criterion == "AICc") points(no.part.result$rf_dist - rclust.AICc.result$rf_dist, no.part.result$max.log.lik - rclust.AICc.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)			#
			col.it <- col.it + 1	#
		}#
		spp.it <- spp.it + 1	#
	}#
}#
analyze.euc.datset <- function(dat, criterion){#
	spp.it <- 1#
	for(i in species){#
		col.it <- 1#
		for(j in samp.sizes){#
			no.part.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "noPart" ,]#
			rclust.AIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AIC" ,]#
			rclust.BIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "BIC" ,]#
			rclust.AICc.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AICc",]#
			if(criterion == "AIC") points(no.part.result$eucl_dist - rclust.AIC.result$eucl_dist, no.part.result$max.log.lik - rclust.AIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)#
			if(criterion == "BIC") points(no.part.result$eucl_dist - rclust.BIC.result$eucl_dist, no.part.result$max.log.lik - rclust.BIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)#
			if(criterion == "AICc") points(no.part.result$eucl_dist - rclust.AICc.result$eucl_dist, no.part.result$max.log.lik - rclust.AICc.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)			#
			col.it <- col.it + 1	#
		}#
		spp.it <- spp.it + 1	#
	}#
}#
#
# can use any of these scores from the treebuilding in IQtree:#
#   max.log.lik#
#   uncon.log.lik#
#   AIC#
#   BIC#
#   AICc#
#   cons.log.lik (consensus tree LL)#
#   sum.branch.lens#
#   sum.int.branch.lens#
euc.size.by.partitions <- function(dat, criterion, stat="max.log.lik"){#
	spp.it <- 1#
	for(i in species){#
		col.it <- 1#
		for(j in samp.sizes){#
			no.part.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "noPart" ,]#
			rclust.AIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AIC" ,]#
			rclust.BIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "BIC" ,]#
			rclust.AICc.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AICc",]#
			if(stat == "max.log.lik"){#
				if(criterion == "AIC") points(no.part.result$max.log.lik - rclust.AIC.result$max.log.lik, no.part.result$eucl_dist - rclust.AIC.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AIC.result$num.partitions/2)#
				if(criterion == "BIC") points(no.part.result$max.log.lik - rclust.BIC.result$max.log.lik, no.part.result$eucl_dist - rclust.BIC.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.BIC.result$num.partitions/2)#
				if(criterion == "AICc") points(no.part.result$max.log.lik - rclust.AICc.result$max.log.lik, no.part.result$eucl_dist - rclust.AICc.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AICc.result$num.partitions/2)			#
			}#
			if(stat == "uncon.log.lik"){#
				if(criterion == "AIC") points(no.part.result$uncon.log.lik - rclust.AIC.result$uncon.log.lik, no.part.result$eucl_dist - rclust.AIC.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AIC.result$num.partitions/2)#
				if(criterion == "BIC") points(no.part.result$uncon.log.lik - rclust.BIC.result$uncon.log.lik, no.part.result$eucl_dist - rclust.BIC.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.BIC.result$num.partitions/2)#
				if(criterion == "AICc") points(no.part.result$uncon.log.lik - rclust.AICc.result$uncon.log.lik, no.part.result$eucl_dist - rclust.AICc.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AICc.result$num.partitions/2)			#
			}		#
			col.it <- col.it + 1	#
		}#
		spp.it <- spp.it + 1	#
	}#
}#
rf_dist.size.by.partitions <- function(dat, criterion, stat="max.log.lik"){#
	spp.it <- 1#
	for(i in species){#
		col.it <- 1#
		for(j in samp.sizes){#
			no.part.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "noPart" ,]#
			rclust.AIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AIC" ,]#
			rclust.BIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "BIC" ,]#
			rclust.AICc.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AICc",]#
			if(stat == "max.log.lik"){#
				if(criterion == "AIC") points(no.part.result$max.log.lik - rclust.AIC.result$max.log.lik, no.part.result$rf_dist - rclust.AIC.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AIC.result$num.partitions/2)#
				if(criterion == "BIC") points(no.part.result$max.log.lik - rclust.BIC.result$max.log.lik, no.part.result$rf_dist - rclust.BIC.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.BIC.result$num.partitions/2)#
				if(criterion == "AICc") points(no.part.result$max.log.lik - rclust.AICc.result$max.log.lik, no.part.result$rf_dist - rclust.AICc.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AICc.result$num.partitions/2)			#
			}#
			if(stat == "uncon.log.lik"){#
				if(criterion == "AIC") points(no.part.result$uncon.log.lik - rclust.AIC.result$uncon.log.lik, no.part.result$rf_dist - rclust.AIC.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AIC.result$num.partitions/2)#
				if(criterion == "BIC") points(no.part.result$uncon.log.lik - rclust.BIC.result$uncon.log.lik, no.part.result$rf_dist - rclust.BIC.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.BIC.result$num.partitions/2)#
				if(criterion == "AICc") points(no.part.result$uncon.log.lik - rclust.AICc.result$uncon.log.lik, no.part.result$rf_dist - rclust.AICc.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AICc.result$num.partitions/2)			#
			}		#
			col.it <- col.it + 1	#
		}#
		spp.it <- spp.it + 1	#
	}#
}#
#####################################
# mut rate 1000#
dat6 <- read.csv("AllStatsOutput_New_Rep1_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat6$uniqueID <- paste(dat6$species, dat6$samp.size, dat6$search.algo, dat6$part.IC, sep="_")#
dat6b <- read.table("RF_Eucl_results_New_Rep1_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat6b$uniqueID <- make.merge.id(dat6b)#
dat <- merge(dat6, dat6b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat6 <- dat#
#
dat7 <- read.csv("AllStatsOutput_New_Rep2_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat7$uniqueID <- paste(dat7$species, dat7$samp.size, dat7$search.algo, dat7$part.IC, sep="_")#
dat7b <- read.table("RF_Eucl_results_New_Rep2_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat7b$uniqueID <- make.merge.id(dat7b)#
dat <- merge(dat7, dat7b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat7 <- dat#
#
dat8 <- read.csv("AllStatsOutput_New_Rep3_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat8$uniqueID <- paste(dat8$species, dat8$samp.size, dat8$search.algo, dat8$part.IC, sep="_")#
dat8b <- read.table("RF_Eucl_results_New_Rep3_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat8b$uniqueID <- make.merge.id(dat8b)#
dat <- merge(dat8, dat8b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat8 <- dat#
#
dat9 <- read.csv("AllStatsOutput_New_Rep4_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat9$uniqueID <- paste(dat9$species, dat9$samp.size, dat9$search.algo, dat9$part.IC, sep="_")#
dat9b <- read.table("RF_Eucl_results_New_Rep4_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat9b$uniqueID <- make.merge.id(dat9b)#
dat <- merge(dat9, dat9b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat9 <- dat#
#
dat10 <- read.csv("AllStatsOutput_New_Rep5_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat10$uniqueID <- paste(dat10$species, dat10$samp.size, dat10$search.algo, dat10$part.IC, sep="_")#
dat10b <- read.table("RF_Eucl_results_New_Rep5_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat10b$uniqueID <- make.merge.id(dat10b)#
dat <- merge(dat10, dat10b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat10 <- dat#
#
dat11 <- read.csv("AllStatsOutput_New_Rep6_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat11$uniqueID <- paste(dat11$species, dat11$samp.size, dat11$search.algo, dat11$part.IC, sep="_")#
dat11b <- read.table("RF_Eucl_results_New_Rep6_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat11b$uniqueID <- make.merge.id(dat11b)#
dat <- merge(dat11, dat11b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat11 <- dat#
#
dat12 <- read.csv("AllStatsOutput_Newest_Rep7_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat12$uniqueID <- paste(dat12$species, dat12$samp.size, dat12$search.algo, dat12$part.IC, sep="_")#
dat12b <- read.table("RF_Eucl_results_New_Rep7_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat12b$uniqueID <- make.merge.id(dat12b)#
dat <- merge(dat12, dat12b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat12 <- dat#
#
dat13 <- read.csv("AllStatsOutput_Newest_Rep8_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat13$uniqueID <- paste(dat13$species, dat13$samp.size, dat13$search.algo, dat13$part.IC, sep="_")#
dat13b <- read.table("RF_Eucl_results_New_Rep8_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat13b$uniqueID <- make.merge.id(dat13b)#
dat <- merge(dat13, dat13b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat13 <- dat#
#########
#########
plot.stat <- "max.log.lik"#
part.text1 <- -35#
part.text2 <- 0.65#
part.text3 <- -0.65#
pdf("Results_Plots/Flipped_CompareLogLikelihoods_BICpartitioning.pdf", width=8, height=4)#
par(mfrow=c(1,2), mar=c(3.5,4,1.5,0.5)) # if just looking at BIC for partitionfinder#
opac <- 0.75#
pt.lwd <- 2#
xlimits <- c(-55,2.5)#
# robinson foulds distance difference#
#
ylimits <- c(-0.19,0.19)#
#
plot(0, type="n", xlim=xlimits, ylim=ylimits, ylab="", xlab="", main="partitioning w/ BIC")#
mtext(side=2, at=0, line=2.5, "diff in RF dist from true tree for 'no part' - 'part'")#
abline(h=0, col="gray75", lty=2); abline(v=0, col="gray75", lty=2)#
text(part.text1, part.text2, expression(italic("partitioning better")), cex=1, col="green4")#
text(part.text1, part.text3, expression(italic("no partitioning better")), cex=1, col="red3")#
rf_dist.size.by.partitions(dat6, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat7, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat8, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat9, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat10, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat11, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat12, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat13, "BIC", stat=plot.stat)#
#
legend("bottomleft", c("10", "20", "40", "80"), pch=15, col=samp.size.col, title = "num. genes", bg="white", cex=0.9, pt.cex=1.5)#
legend("topleft", c("lopho", "myria"), species, pch=spp.pch, col="black", bg="white", bty="n")#
#__________________________________________________________________________________________##
# euclidean distance difference#
#
ylimits <- c(-0.75,0.75)#
#
plot(0, type="n", xlim=xlimits, ylim=ylimits, ylab="", xlab="", main="partitioning w/ BIC")#
mtext(side=2, at=0, line=2.5, "diff in eucl dist from true tree for 'no part' - 'part'")#
abline(h=0, col="gray75", lty=2); abline(v=0, col="gray75", lty=2)#
text(part.text1, part.text2, expression(italic("partitioning better")), cex=1, col="green4")#
text(part.text1, part.text3, expression(italic("no partitioning better")), cex=1, col="red3")#
euc.size.by.partitions(dat6, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat7, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat8, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat9, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat10, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat11, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat12, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat13, "BIC", stat=plot.stat)#
dev.off()
library(scales)#
setwd("~/Documents/UNIL/PartitioningMethods_SimulationProject/FunctioningPipeline/AnalysisResults")#
make.merge.id <- function(dat){#
	id.col <- rep(NA, dim(dat)[1])#
	for(i in 1:dim(dat)[1]){#
		if(length(grep("lopho", dat$file[i])) > 0) spp <- "lopho_"#
		if(length(grep("myria", dat$file[i])) > 0) spp <- "myria_"#
		if(length(grep("10", dat$file[i])) > 0) samp <- "10_"#
		if(length(grep("20", dat$file[i])) > 0) samp <- "20_"#
		if(length(grep("40", dat$file[i])) > 0) samp <- "40_"#
		if(length(grep("80", dat$file[i])) > 0) samp <- "80_"#
		if(length(grep("rcluster", dat$file[i])) > 0) algo <- "rcluster_"#
		if(length(grep("greedy", dat$file[i])) > 0) algo <- "greedy_"#
		if(length(grep("noPart", dat$file[i])) > 0) algo <- "noPart_"#
		if(length(grep("AIC", dat$file[i])) > 0) crit <- "AIC"#
		if(length(grep("AICc", dat$file[i])) > 0) crit <- "AICc"#
		if(length(grep("BIC", dat$file[i])) > 0) crit <- "BIC"#
		if(length(grep("noPart", dat$file[i])) > 0) crit <- "noPart"#
		id.col[i] <- paste(c(spp, samp, algo, crit), collapse="")#
	}#
	return(id.col)#
}#
#####################################
species <- c("lopho", "myria")#
spp.pch <- c(1,2)#
samp.sizes <- c(10,20,40,80)#
samp.size.col <- c("steelblue4", "darkorange2", "green4", "red3")#
pt.wid <- 2#
opac <- 0.95#
#
analyze.rf.datset <- function(dat, criterion){#
	spp.it <- 1#
	for(i in species){#
		col.it <- 1#
		for(j in samp.sizes){#
			no.part.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "noPart" ,]#
			rclust.AIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AIC" ,]#
			rclust.BIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "BIC" ,]#
			rclust.AICc.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AICc",]#
			if(criterion == "AIC") points(no.part.result$rf_dist - rclust.AIC.result$rf_dist, no.part.result$max.log.lik - rclust.AIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)#
			if(criterion == "BIC") points(no.part.result$rf_dist - rclust.BIC.result$rf_dist, no.part.result$max.log.lik - rclust.BIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)#
			if(criterion == "AICc") points(no.part.result$rf_dist - rclust.AICc.result$rf_dist, no.part.result$max.log.lik - rclust.AICc.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)			#
			col.it <- col.it + 1	#
		}#
		spp.it <- spp.it + 1	#
	}#
}#
analyze.euc.datset <- function(dat, criterion){#
	spp.it <- 1#
	for(i in species){#
		col.it <- 1#
		for(j in samp.sizes){#
			no.part.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "noPart" ,]#
			rclust.AIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AIC" ,]#
			rclust.BIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "BIC" ,]#
			rclust.AICc.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AICc",]#
			if(criterion == "AIC") points(no.part.result$eucl_dist - rclust.AIC.result$eucl_dist, no.part.result$max.log.lik - rclust.AIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)#
			if(criterion == "BIC") points(no.part.result$eucl_dist - rclust.BIC.result$eucl_dist, no.part.result$max.log.lik - rclust.BIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)#
			if(criterion == "AICc") points(no.part.result$eucl_dist - rclust.AICc.result$eucl_dist, no.part.result$max.log.lik - rclust.AICc.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)			#
			col.it <- col.it + 1	#
		}#
		spp.it <- spp.it + 1	#
	}#
}#
#
# can use any of these scores from the treebuilding in IQtree:#
#   max.log.lik#
#   uncon.log.lik#
#   AIC#
#   BIC#
#   AICc#
#   cons.log.lik (consensus tree LL)#
#   sum.branch.lens#
#   sum.int.branch.lens#
euc.size.by.partitions <- function(dat, criterion, stat="max.log.lik"){#
	spp.it <- 1#
	for(i in species){#
		col.it <- 1#
		for(j in samp.sizes){#
			no.part.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "noPart" ,]#
			rclust.AIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AIC" ,]#
			rclust.BIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "BIC" ,]#
			rclust.AICc.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AICc",]#
			if(stat == "max.log.lik"){#
				if(criterion == "AIC") points(no.part.result$max.log.lik - rclust.AIC.result$max.log.lik, no.part.result$eucl_dist - rclust.AIC.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AIC.result$num.partitions/2)#
				if(criterion == "BIC") points(no.part.result$max.log.lik - rclust.BIC.result$max.log.lik, no.part.result$eucl_dist - rclust.BIC.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.BIC.result$num.partitions/2)#
				if(criterion == "AICc") points(no.part.result$max.log.lik - rclust.AICc.result$max.log.lik, no.part.result$eucl_dist - rclust.AICc.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AICc.result$num.partitions/2)			#
			}#
			if(stat == "uncon.log.lik"){#
				if(criterion == "AIC") points(no.part.result$uncon.log.lik - rclust.AIC.result$uncon.log.lik, no.part.result$eucl_dist - rclust.AIC.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AIC.result$num.partitions/2)#
				if(criterion == "BIC") points(no.part.result$uncon.log.lik - rclust.BIC.result$uncon.log.lik, no.part.result$eucl_dist - rclust.BIC.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.BIC.result$num.partitions/2)#
				if(criterion == "AICc") points(no.part.result$uncon.log.lik - rclust.AICc.result$uncon.log.lik, no.part.result$eucl_dist - rclust.AICc.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AICc.result$num.partitions/2)			#
			}		#
			col.it <- col.it + 1	#
		}#
		spp.it <- spp.it + 1	#
	}#
}#
rf_dist.size.by.partitions <- function(dat, criterion, stat="max.log.lik"){#
	spp.it <- 1#
	for(i in species){#
		col.it <- 1#
		for(j in samp.sizes){#
			no.part.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "noPart" ,]#
			rclust.AIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AIC" ,]#
			rclust.BIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "BIC" ,]#
			rclust.AICc.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AICc",]#
			if(stat == "max.log.lik"){#
				if(criterion == "AIC") points(no.part.result$max.log.lik - rclust.AIC.result$max.log.lik, no.part.result$rf_dist - rclust.AIC.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AIC.result$num.partitions/2)#
				if(criterion == "BIC") points(no.part.result$max.log.lik - rclust.BIC.result$max.log.lik, no.part.result$rf_dist - rclust.BIC.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.BIC.result$num.partitions/2)#
				if(criterion == "AICc") points(no.part.result$max.log.lik - rclust.AICc.result$max.log.lik, no.part.result$rf_dist - rclust.AICc.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AICc.result$num.partitions/2)			#
			}#
			if(stat == "uncon.log.lik"){#
				if(criterion == "AIC") points(no.part.result$uncon.log.lik - rclust.AIC.result$uncon.log.lik, no.part.result$rf_dist - rclust.AIC.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AIC.result$num.partitions/2)#
				if(criterion == "BIC") points(no.part.result$uncon.log.lik - rclust.BIC.result$uncon.log.lik, no.part.result$rf_dist - rclust.BIC.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.BIC.result$num.partitions/2)#
				if(criterion == "AICc") points(no.part.result$uncon.log.lik - rclust.AICc.result$uncon.log.lik, no.part.result$rf_dist - rclust.AICc.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AICc.result$num.partitions/2)			#
			}		#
			col.it <- col.it + 1	#
		}#
		spp.it <- spp.it + 1	#
	}#
}#
#####################################
# mut rate 1000#
dat6 <- read.csv("AllStatsOutput_New_Rep1_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat6$uniqueID <- paste(dat6$species, dat6$samp.size, dat6$search.algo, dat6$part.IC, sep="_")#
dat6b <- read.table("RF_Eucl_results_New_Rep1_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat6b$uniqueID <- make.merge.id(dat6b)#
dat <- merge(dat6, dat6b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat6 <- dat#
#
dat7 <- read.csv("AllStatsOutput_New_Rep2_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat7$uniqueID <- paste(dat7$species, dat7$samp.size, dat7$search.algo, dat7$part.IC, sep="_")#
dat7b <- read.table("RF_Eucl_results_New_Rep2_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat7b$uniqueID <- make.merge.id(dat7b)#
dat <- merge(dat7, dat7b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat7 <- dat#
#
dat8 <- read.csv("AllStatsOutput_New_Rep3_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat8$uniqueID <- paste(dat8$species, dat8$samp.size, dat8$search.algo, dat8$part.IC, sep="_")#
dat8b <- read.table("RF_Eucl_results_New_Rep3_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat8b$uniqueID <- make.merge.id(dat8b)#
dat <- merge(dat8, dat8b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat8 <- dat#
#
dat9 <- read.csv("AllStatsOutput_New_Rep4_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat9$uniqueID <- paste(dat9$species, dat9$samp.size, dat9$search.algo, dat9$part.IC, sep="_")#
dat9b <- read.table("RF_Eucl_results_New_Rep4_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat9b$uniqueID <- make.merge.id(dat9b)#
dat <- merge(dat9, dat9b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat9 <- dat#
#
dat10 <- read.csv("AllStatsOutput_New_Rep5_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat10$uniqueID <- paste(dat10$species, dat10$samp.size, dat10$search.algo, dat10$part.IC, sep="_")#
dat10b <- read.table("RF_Eucl_results_New_Rep5_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat10b$uniqueID <- make.merge.id(dat10b)#
dat <- merge(dat10, dat10b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat10 <- dat#
#
dat11 <- read.csv("AllStatsOutput_New_Rep6_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat11$uniqueID <- paste(dat11$species, dat11$samp.size, dat11$search.algo, dat11$part.IC, sep="_")#
dat11b <- read.table("RF_Eucl_results_New_Rep6_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat11b$uniqueID <- make.merge.id(dat11b)#
dat <- merge(dat11, dat11b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat11 <- dat#
#
dat12 <- read.csv("AllStatsOutput_Newest_Rep7_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat12$uniqueID <- paste(dat12$species, dat12$samp.size, dat12$search.algo, dat12$part.IC, sep="_")#
dat12b <- read.table("RF_Eucl_results_New_Rep7_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat12b$uniqueID <- make.merge.id(dat12b)#
dat <- merge(dat12, dat12b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat12 <- dat#
#
dat13 <- read.csv("AllStatsOutput_Newest_Rep8_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat13$uniqueID <- paste(dat13$species, dat13$samp.size, dat13$search.algo, dat13$part.IC, sep="_")#
dat13b <- read.table("RF_Eucl_results_New_Rep8_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat13b$uniqueID <- make.merge.id(dat13b)#
dat <- merge(dat13, dat13b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat13 <- dat#
#########
#########
plot.stat <- "max.log.lik"#
part.text1 <- -35#
part.text2 <- 0.65#
part.text3 <- -0.65#
pdf("Results_Plots/Flipped_CompareLogLikelihoods_BICpartitioning.pdf", width=8, height=4)#
par(mfrow=c(1,2), mar=c(3.5,4,1.5,0.5)) # if just looking at BIC for partitionfinder#
opac <- 0.75#
pt.lwd <- 2#
xlimits <- c(-55,2.5)#
# robinson foulds distance difference#
#
ylimits <- c(-0.19,0.19)#
#
plot(0, type="n", xlim=xlimits, ylim=ylimits, ylab="", xlab="diff in IQtree max log lik of 'no part' - 'part'", main="partitioning w/ BIC")#
mtext(side=2, at=0, line=2.5, "diff in RF dist from true tree for 'no part' - 'part'")#
abline(h=0, col="gray75", lty=2); abline(v=0, col="gray75", lty=2)#
text(part.text1, part.text2, expression(italic("partitioning better")), cex=1, col="green4")#
text(part.text1, part.text3, expression(italic("no partitioning better")), cex=1, col="red3")#
rf_dist.size.by.partitions(dat6, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat7, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat8, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat9, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat10, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat11, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat12, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat13, "BIC", stat=plot.stat)#
#
legend("bottomleft", c("10", "20", "40", "80"), pch=15, col=samp.size.col, title = "num. genes", bg="white", cex=0.9, pt.cex=1.5)#
legend("topleft", c("lopho", "myria"), species, pch=spp.pch, col="black", bg="white", bty="n")#
#__________________________________________________________________________________________##
# euclidean distance difference#
#
ylimits <- c(-0.75,0.75)#
#
plot(0, type="n", xlim=xlimits, ylim=ylimits, ylab="", xlab="diff in IQtree max log lik of 'no part' - 'part'", main="partitioning w/ BIC")#
mtext(side=2, at=0, line=2.5, "diff in eucl dist from true tree for 'no part' - 'part'")#
abline(h=0, col="gray75", lty=2); abline(v=0, col="gray75", lty=2)#
text(part.text1, part.text2, expression(italic("partitioning better")), cex=1, col="green4")#
text(part.text1, part.text3, expression(italic("no partitioning better")), cex=1, col="red3")#
euc.size.by.partitions(dat6, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat7, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat8, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat9, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat10, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat11, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat12, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat13, "BIC", stat=plot.stat)#
dev.off()
library(scales)#
setwd("~/Documents/UNIL/PartitioningMethods_SimulationProject/FunctioningPipeline/AnalysisResults")#
make.merge.id <- function(dat){#
	id.col <- rep(NA, dim(dat)[1])#
	for(i in 1:dim(dat)[1]){#
		if(length(grep("lopho", dat$file[i])) > 0) spp <- "lopho_"#
		if(length(grep("myria", dat$file[i])) > 0) spp <- "myria_"#
		if(length(grep("10", dat$file[i])) > 0) samp <- "10_"#
		if(length(grep("20", dat$file[i])) > 0) samp <- "20_"#
		if(length(grep("40", dat$file[i])) > 0) samp <- "40_"#
		if(length(grep("80", dat$file[i])) > 0) samp <- "80_"#
		if(length(grep("rcluster", dat$file[i])) > 0) algo <- "rcluster_"#
		if(length(grep("greedy", dat$file[i])) > 0) algo <- "greedy_"#
		if(length(grep("noPart", dat$file[i])) > 0) algo <- "noPart_"#
		if(length(grep("AIC", dat$file[i])) > 0) crit <- "AIC"#
		if(length(grep("AICc", dat$file[i])) > 0) crit <- "AICc"#
		if(length(grep("BIC", dat$file[i])) > 0) crit <- "BIC"#
		if(length(grep("noPart", dat$file[i])) > 0) crit <- "noPart"#
		id.col[i] <- paste(c(spp, samp, algo, crit), collapse="")#
	}#
	return(id.col)#
}#
#####################################
species <- c("lopho", "myria")#
spp.pch <- c(1,2)#
samp.sizes <- c(10,20,40,80)#
samp.size.col <- c("steelblue4", "darkorange2", "green4", "red3")#
pt.wid <- 2#
opac <- 0.95#
#
analyze.rf.datset <- function(dat, criterion){#
	spp.it <- 1#
	for(i in species){#
		col.it <- 1#
		for(j in samp.sizes){#
			no.part.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "noPart" ,]#
			rclust.AIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AIC" ,]#
			rclust.BIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "BIC" ,]#
			rclust.AICc.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AICc",]#
			if(criterion == "AIC") points(no.part.result$rf_dist - rclust.AIC.result$rf_dist, no.part.result$max.log.lik - rclust.AIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)#
			if(criterion == "BIC") points(no.part.result$rf_dist - rclust.BIC.result$rf_dist, no.part.result$max.log.lik - rclust.BIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)#
			if(criterion == "AICc") points(no.part.result$rf_dist - rclust.AICc.result$rf_dist, no.part.result$max.log.lik - rclust.AICc.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)			#
			col.it <- col.it + 1	#
		}#
		spp.it <- spp.it + 1	#
	}#
}#
analyze.euc.datset <- function(dat, criterion){#
	spp.it <- 1#
	for(i in species){#
		col.it <- 1#
		for(j in samp.sizes){#
			no.part.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "noPart" ,]#
			rclust.AIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AIC" ,]#
			rclust.BIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "BIC" ,]#
			rclust.AICc.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AICc",]#
			if(criterion == "AIC") points(no.part.result$eucl_dist - rclust.AIC.result$eucl_dist, no.part.result$max.log.lik - rclust.AIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)#
			if(criterion == "BIC") points(no.part.result$eucl_dist - rclust.BIC.result$eucl_dist, no.part.result$max.log.lik - rclust.BIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)#
			if(criterion == "AICc") points(no.part.result$eucl_dist - rclust.AICc.result$eucl_dist, no.part.result$max.log.lik - rclust.AICc.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)			#
			col.it <- col.it + 1	#
		}#
		spp.it <- spp.it + 1	#
	}#
}#
#
# can use any of these scores from the treebuilding in IQtree:#
#   max.log.lik#
#   uncon.log.lik#
#   AIC#
#   BIC#
#   AICc#
#   cons.log.lik (consensus tree LL)#
#   sum.branch.lens#
#   sum.int.branch.lens#
euc.size.by.partitions <- function(dat, criterion, stat="max.log.lik"){#
	spp.it <- 1#
	for(i in species){#
		col.it <- 1#
		for(j in samp.sizes){#
			no.part.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "noPart" ,]#
			rclust.AIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AIC" ,]#
			rclust.BIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "BIC" ,]#
			rclust.AICc.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AICc",]#
			if(stat == "max.log.lik"){#
				if(criterion == "AIC") points(no.part.result$max.log.lik - rclust.AIC.result$max.log.lik, no.part.result$eucl_dist - rclust.AIC.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AIC.result$num.partitions/2)#
				if(criterion == "BIC") points(no.part.result$max.log.lik - rclust.BIC.result$max.log.lik, no.part.result$eucl_dist - rclust.BIC.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.BIC.result$num.partitions/2)#
				if(criterion == "AICc") points(no.part.result$max.log.lik - rclust.AICc.result$max.log.lik, no.part.result$eucl_dist - rclust.AICc.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AICc.result$num.partitions/2)			#
			}#
			if(stat == "uncon.log.lik"){#
				if(criterion == "AIC") points(no.part.result$uncon.log.lik - rclust.AIC.result$uncon.log.lik, no.part.result$eucl_dist - rclust.AIC.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AIC.result$num.partitions/2)#
				if(criterion == "BIC") points(no.part.result$uncon.log.lik - rclust.BIC.result$uncon.log.lik, no.part.result$eucl_dist - rclust.BIC.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.BIC.result$num.partitions/2)#
				if(criterion == "AICc") points(no.part.result$uncon.log.lik - rclust.AICc.result$uncon.log.lik, no.part.result$eucl_dist - rclust.AICc.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AICc.result$num.partitions/2)			#
			}		#
			col.it <- col.it + 1	#
		}#
		spp.it <- spp.it + 1	#
	}#
}#
rf_dist.size.by.partitions <- function(dat, criterion, stat="max.log.lik"){#
	spp.it <- 1#
	for(i in species){#
		col.it <- 1#
		for(j in samp.sizes){#
			no.part.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "noPart" ,]#
			rclust.AIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AIC" ,]#
			rclust.BIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "BIC" ,]#
			rclust.AICc.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AICc",]#
			if(stat == "max.log.lik"){#
				if(criterion == "AIC") points(no.part.result$max.log.lik - rclust.AIC.result$max.log.lik, no.part.result$rf_dist - rclust.AIC.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AIC.result$num.partitions/2)#
				if(criterion == "BIC") points(no.part.result$max.log.lik - rclust.BIC.result$max.log.lik, no.part.result$rf_dist - rclust.BIC.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.BIC.result$num.partitions/2)#
				if(criterion == "AICc") points(no.part.result$max.log.lik - rclust.AICc.result$max.log.lik, no.part.result$rf_dist - rclust.AICc.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AICc.result$num.partitions/2)			#
			}#
			if(stat == "uncon.log.lik"){#
				if(criterion == "AIC") points(no.part.result$uncon.log.lik - rclust.AIC.result$uncon.log.lik, no.part.result$rf_dist - rclust.AIC.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AIC.result$num.partitions/2)#
				if(criterion == "BIC") points(no.part.result$uncon.log.lik - rclust.BIC.result$uncon.log.lik, no.part.result$rf_dist - rclust.BIC.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.BIC.result$num.partitions/2)#
				if(criterion == "AICc") points(no.part.result$uncon.log.lik - rclust.AICc.result$uncon.log.lik, no.part.result$rf_dist - rclust.AICc.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AICc.result$num.partitions/2)			#
			}		#
			col.it <- col.it + 1	#
		}#
		spp.it <- spp.it + 1	#
	}#
}#
#####################################
# mut rate 1000#
dat6 <- read.csv("AllStatsOutput_New_Rep1_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat6$uniqueID <- paste(dat6$species, dat6$samp.size, dat6$search.algo, dat6$part.IC, sep="_")#
dat6b <- read.table("RF_Eucl_results_New_Rep1_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat6b$uniqueID <- make.merge.id(dat6b)#
dat <- merge(dat6, dat6b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat6 <- dat#
#
dat7 <- read.csv("AllStatsOutput_New_Rep2_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat7$uniqueID <- paste(dat7$species, dat7$samp.size, dat7$search.algo, dat7$part.IC, sep="_")#
dat7b <- read.table("RF_Eucl_results_New_Rep2_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat7b$uniqueID <- make.merge.id(dat7b)#
dat <- merge(dat7, dat7b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat7 <- dat#
#
dat8 <- read.csv("AllStatsOutput_New_Rep3_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat8$uniqueID <- paste(dat8$species, dat8$samp.size, dat8$search.algo, dat8$part.IC, sep="_")#
dat8b <- read.table("RF_Eucl_results_New_Rep3_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat8b$uniqueID <- make.merge.id(dat8b)#
dat <- merge(dat8, dat8b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat8 <- dat#
#
dat9 <- read.csv("AllStatsOutput_New_Rep4_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat9$uniqueID <- paste(dat9$species, dat9$samp.size, dat9$search.algo, dat9$part.IC, sep="_")#
dat9b <- read.table("RF_Eucl_results_New_Rep4_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat9b$uniqueID <- make.merge.id(dat9b)#
dat <- merge(dat9, dat9b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat9 <- dat#
#
dat10 <- read.csv("AllStatsOutput_New_Rep5_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat10$uniqueID <- paste(dat10$species, dat10$samp.size, dat10$search.algo, dat10$part.IC, sep="_")#
dat10b <- read.table("RF_Eucl_results_New_Rep5_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat10b$uniqueID <- make.merge.id(dat10b)#
dat <- merge(dat10, dat10b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat10 <- dat#
#
dat11 <- read.csv("AllStatsOutput_New_Rep6_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat11$uniqueID <- paste(dat11$species, dat11$samp.size, dat11$search.algo, dat11$part.IC, sep="_")#
dat11b <- read.table("RF_Eucl_results_New_Rep6_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat11b$uniqueID <- make.merge.id(dat11b)#
dat <- merge(dat11, dat11b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat11 <- dat#
#
dat12 <- read.csv("AllStatsOutput_Newest_Rep7_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat12$uniqueID <- paste(dat12$species, dat12$samp.size, dat12$search.algo, dat12$part.IC, sep="_")#
dat12b <- read.table("RF_Eucl_results_New_Rep7_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat12b$uniqueID <- make.merge.id(dat12b)#
dat <- merge(dat12, dat12b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat12 <- dat#
#
dat13 <- read.csv("AllStatsOutput_Newest_Rep8_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat13$uniqueID <- paste(dat13$species, dat13$samp.size, dat13$search.algo, dat13$part.IC, sep="_")#
dat13b <- read.table("RF_Eucl_results_New_Rep8_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat13b$uniqueID <- make.merge.id(dat13b)#
dat <- merge(dat13, dat13b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat13 <- dat#
#########
#########
plot.stat <- "max.log.lik"#
part.text1 <- -35#
part.text2 <- 0.65#
part.text3 <- -0.65#
pdf("Results_Plots/Flipped_CompareLogLikelihoods_BICpartitioning.pdf", width=8, height=4)#
par(mfrow=c(1,2), mar=c(4,4,1.5,0.5)) # if just looking at BIC for partitionfinder#
opac <- 0.75#
pt.lwd <- 2#
xlimits <- c(-55,2.5)#
# robinson foulds distance difference#
#
ylimits <- c(-0.19,0.19)#
#
plot(0, type="n", xlim=xlimits, ylim=ylimits, ylab="", xlab="diff in IQtree max log lik of 'no part' - 'part'", main="partitioning w/ BIC")#
mtext(side=2, at=0, line=2.5, "diff in RF dist from true tree for 'no part' - 'part'")#
abline(h=0, col="gray75", lty=2); abline(v=0, col="gray75", lty=2)#
text(part.text1, part.text2, expression(italic("partitioning better")), cex=1, col="green4")#
text(part.text1, part.text3, expression(italic("no partitioning better")), cex=1, col="red3")#
rf_dist.size.by.partitions(dat6, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat7, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat8, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat9, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat10, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat11, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat12, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat13, "BIC", stat=plot.stat)#
#
legend("bottomleft", c("10", "20", "40", "80"), pch=15, col=samp.size.col, title = "num. genes", bg="white", cex=0.9, pt.cex=1.5)#
legend("topleft", c("lopho", "myria"), species, pch=spp.pch, col="black", bg="white", bty="n")#
#__________________________________________________________________________________________##
# euclidean distance difference#
#
ylimits <- c(-0.75,0.75)#
#
plot(0, type="n", xlim=xlimits, ylim=ylimits, ylab="", xlab="diff in IQtree max log lik of 'no part' - 'part'", main="partitioning w/ BIC")#
mtext(side=2, at=0, line=2.5, "diff in eucl dist from true tree for 'no part' - 'part'")#
abline(h=0, col="gray75", lty=2); abline(v=0, col="gray75", lty=2)#
text(part.text1, part.text2, expression(italic("partitioning better")), cex=1, col="green4")#
text(part.text1, part.text3, expression(italic("no partitioning better")), cex=1, col="red3")#
euc.size.by.partitions(dat6, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat7, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat8, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat9, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat10, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat11, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat12, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat13, "BIC", stat=plot.stat)#
dev.off()
library(scales)#
setwd("~/Documents/UNIL/PartitioningMethods_SimulationProject/FunctioningPipeline/AnalysisResults")#
make.merge.id <- function(dat){#
	id.col <- rep(NA, dim(dat)[1])#
	for(i in 1:dim(dat)[1]){#
		if(length(grep("lopho", dat$file[i])) > 0) spp <- "lopho_"#
		if(length(grep("myria", dat$file[i])) > 0) spp <- "myria_"#
		if(length(grep("10", dat$file[i])) > 0) samp <- "10_"#
		if(length(grep("20", dat$file[i])) > 0) samp <- "20_"#
		if(length(grep("40", dat$file[i])) > 0) samp <- "40_"#
		if(length(grep("80", dat$file[i])) > 0) samp <- "80_"#
		if(length(grep("rcluster", dat$file[i])) > 0) algo <- "rcluster_"#
		if(length(grep("greedy", dat$file[i])) > 0) algo <- "greedy_"#
		if(length(grep("noPart", dat$file[i])) > 0) algo <- "noPart_"#
		if(length(grep("AIC", dat$file[i])) > 0) crit <- "AIC"#
		if(length(grep("AICc", dat$file[i])) > 0) crit <- "AICc"#
		if(length(grep("BIC", dat$file[i])) > 0) crit <- "BIC"#
		if(length(grep("noPart", dat$file[i])) > 0) crit <- "noPart"#
		id.col[i] <- paste(c(spp, samp, algo, crit), collapse="")#
	}#
	return(id.col)#
}#
#####################################
species <- c("lopho", "myria")#
spp.pch <- c(1,2)#
samp.sizes <- c(10,20,40,80)#
samp.size.col <- c("steelblue4", "darkorange2", "green4", "red3")#
pt.wid <- 2#
opac <- 0.95#
#
analyze.rf.datset <- function(dat, criterion){#
	spp.it <- 1#
	for(i in species){#
		col.it <- 1#
		for(j in samp.sizes){#
			no.part.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "noPart" ,]#
			rclust.AIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AIC" ,]#
			rclust.BIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "BIC" ,]#
			rclust.AICc.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AICc",]#
			if(criterion == "AIC") points(no.part.result$rf_dist - rclust.AIC.result$rf_dist, no.part.result$max.log.lik - rclust.AIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)#
			if(criterion == "BIC") points(no.part.result$rf_dist - rclust.BIC.result$rf_dist, no.part.result$max.log.lik - rclust.BIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)#
			if(criterion == "AICc") points(no.part.result$rf_dist - rclust.AICc.result$rf_dist, no.part.result$max.log.lik - rclust.AICc.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)			#
			col.it <- col.it + 1	#
		}#
		spp.it <- spp.it + 1	#
	}#
}#
analyze.euc.datset <- function(dat, criterion){#
	spp.it <- 1#
	for(i in species){#
		col.it <- 1#
		for(j in samp.sizes){#
			no.part.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "noPart" ,]#
			rclust.AIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AIC" ,]#
			rclust.BIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "BIC" ,]#
			rclust.AICc.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AICc",]#
			if(criterion == "AIC") points(no.part.result$eucl_dist - rclust.AIC.result$eucl_dist, no.part.result$max.log.lik - rclust.AIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)#
			if(criterion == "BIC") points(no.part.result$eucl_dist - rclust.BIC.result$eucl_dist, no.part.result$max.log.lik - rclust.BIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)#
			if(criterion == "AICc") points(no.part.result$eucl_dist - rclust.AICc.result$eucl_dist, no.part.result$max.log.lik - rclust.AICc.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)			#
			col.it <- col.it + 1	#
		}#
		spp.it <- spp.it + 1	#
	}#
}#
#
# can use any of these scores from the treebuilding in IQtree:#
#   max.log.lik#
#   uncon.log.lik#
#   AIC#
#   BIC#
#   AICc#
#   cons.log.lik (consensus tree LL)#
#   sum.branch.lens#
#   sum.int.branch.lens#
euc.size.by.partitions <- function(dat, criterion, stat="max.log.lik"){#
	spp.it <- 1#
	for(i in species){#
		col.it <- 1#
		for(j in samp.sizes){#
			no.part.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "noPart" ,]#
			rclust.AIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AIC" ,]#
			rclust.BIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "BIC" ,]#
			rclust.AICc.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AICc",]#
			if(stat == "max.log.lik"){#
				if(criterion == "AIC") points(no.part.result$max.log.lik - rclust.AIC.result$max.log.lik, no.part.result$eucl_dist - rclust.AIC.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AIC.result$num.partitions/2)#
				if(criterion == "BIC") points(no.part.result$max.log.lik - rclust.BIC.result$max.log.lik, no.part.result$eucl_dist - rclust.BIC.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.BIC.result$num.partitions/2)#
				if(criterion == "AICc") points(no.part.result$max.log.lik - rclust.AICc.result$max.log.lik, no.part.result$eucl_dist - rclust.AICc.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AICc.result$num.partitions/2)			#
			}#
			if(stat == "uncon.log.lik"){#
				if(criterion == "AIC") points(no.part.result$uncon.log.lik - rclust.AIC.result$uncon.log.lik, no.part.result$eucl_dist - rclust.AIC.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AIC.result$num.partitions/2)#
				if(criterion == "BIC") points(no.part.result$uncon.log.lik - rclust.BIC.result$uncon.log.lik, no.part.result$eucl_dist - rclust.BIC.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.BIC.result$num.partitions/2)#
				if(criterion == "AICc") points(no.part.result$uncon.log.lik - rclust.AICc.result$uncon.log.lik, no.part.result$eucl_dist - rclust.AICc.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AICc.result$num.partitions/2)			#
			}		#
			col.it <- col.it + 1	#
		}#
		spp.it <- spp.it + 1	#
	}#
}#
rf_dist.size.by.partitions <- function(dat, criterion, stat="max.log.lik"){#
	spp.it <- 1#
	for(i in species){#
		col.it <- 1#
		for(j in samp.sizes){#
			no.part.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "noPart" ,]#
			rclust.AIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AIC" ,]#
			rclust.BIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "BIC" ,]#
			rclust.AICc.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AICc",]#
			if(stat == "max.log.lik"){#
				if(criterion == "AIC") points(no.part.result$max.log.lik - rclust.AIC.result$max.log.lik, no.part.result$rf_dist - rclust.AIC.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AIC.result$num.partitions/2)#
				if(criterion == "BIC") points(no.part.result$max.log.lik - rclust.BIC.result$max.log.lik, no.part.result$rf_dist - rclust.BIC.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.BIC.result$num.partitions/2)#
				if(criterion == "AICc") points(no.part.result$max.log.lik - rclust.AICc.result$max.log.lik, no.part.result$rf_dist - rclust.AICc.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AICc.result$num.partitions/2)			#
			}#
			if(stat == "uncon.log.lik"){#
				if(criterion == "AIC") points(no.part.result$uncon.log.lik - rclust.AIC.result$uncon.log.lik, no.part.result$rf_dist - rclust.AIC.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AIC.result$num.partitions/2)#
				if(criterion == "BIC") points(no.part.result$uncon.log.lik - rclust.BIC.result$uncon.log.lik, no.part.result$rf_dist - rclust.BIC.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.BIC.result$num.partitions/2)#
				if(criterion == "AICc") points(no.part.result$uncon.log.lik - rclust.AICc.result$uncon.log.lik, no.part.result$rf_dist - rclust.AICc.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AICc.result$num.partitions/2)			#
			}		#
			col.it <- col.it + 1	#
		}#
		spp.it <- spp.it + 1	#
	}#
}#
#####################################
# mut rate 1000#
dat6 <- read.csv("AllStatsOutput_New_Rep1_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat6$uniqueID <- paste(dat6$species, dat6$samp.size, dat6$search.algo, dat6$part.IC, sep="_")#
dat6b <- read.table("RF_Eucl_results_New_Rep1_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat6b$uniqueID <- make.merge.id(dat6b)#
dat <- merge(dat6, dat6b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat6 <- dat#
#
dat7 <- read.csv("AllStatsOutput_New_Rep2_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat7$uniqueID <- paste(dat7$species, dat7$samp.size, dat7$search.algo, dat7$part.IC, sep="_")#
dat7b <- read.table("RF_Eucl_results_New_Rep2_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat7b$uniqueID <- make.merge.id(dat7b)#
dat <- merge(dat7, dat7b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat7 <- dat#
#
dat8 <- read.csv("AllStatsOutput_New_Rep3_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat8$uniqueID <- paste(dat8$species, dat8$samp.size, dat8$search.algo, dat8$part.IC, sep="_")#
dat8b <- read.table("RF_Eucl_results_New_Rep3_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat8b$uniqueID <- make.merge.id(dat8b)#
dat <- merge(dat8, dat8b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat8 <- dat#
#
dat9 <- read.csv("AllStatsOutput_New_Rep4_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat9$uniqueID <- paste(dat9$species, dat9$samp.size, dat9$search.algo, dat9$part.IC, sep="_")#
dat9b <- read.table("RF_Eucl_results_New_Rep4_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat9b$uniqueID <- make.merge.id(dat9b)#
dat <- merge(dat9, dat9b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat9 <- dat#
#
dat10 <- read.csv("AllStatsOutput_New_Rep5_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat10$uniqueID <- paste(dat10$species, dat10$samp.size, dat10$search.algo, dat10$part.IC, sep="_")#
dat10b <- read.table("RF_Eucl_results_New_Rep5_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat10b$uniqueID <- make.merge.id(dat10b)#
dat <- merge(dat10, dat10b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat10 <- dat#
#
dat11 <- read.csv("AllStatsOutput_New_Rep6_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat11$uniqueID <- paste(dat11$species, dat11$samp.size, dat11$search.algo, dat11$part.IC, sep="_")#
dat11b <- read.table("RF_Eucl_results_New_Rep6_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat11b$uniqueID <- make.merge.id(dat11b)#
dat <- merge(dat11, dat11b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat11 <- dat#
#
dat12 <- read.csv("AllStatsOutput_Newest_Rep7_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat12$uniqueID <- paste(dat12$species, dat12$samp.size, dat12$search.algo, dat12$part.IC, sep="_")#
dat12b <- read.table("RF_Eucl_results_New_Rep7_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat12b$uniqueID <- make.merge.id(dat12b)#
dat <- merge(dat12, dat12b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat12 <- dat#
#
dat13 <- read.csv("AllStatsOutput_Newest_Rep8_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat13$uniqueID <- paste(dat13$species, dat13$samp.size, dat13$search.algo, dat13$part.IC, sep="_")#
dat13b <- read.table("RF_Eucl_results_New_Rep8_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat13b$uniqueID <- make.merge.id(dat13b)#
dat <- merge(dat13, dat13b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat13 <- dat#
#########
#########
plot.stat <- "max.log.lik"#
part.text1 <- -35#
part.text2 <- 0.65#
part.text3 <- -0.65#
pdf("Results_Plots/Flipped_CompareLogLikelihoods_BICpartitioning.pdf", width=8, height=4)#
par(mfrow=c(1,2), mar=c(4,4,1.5,0.5)) # if just looking at BIC for partitionfinder#
opac <- 0.75#
pt.lwd <- 2#
xlimits <- c(-60,3)#
# robinson foulds distance difference#
#
ylimits <- c(-0.25,0.25)#
#
plot(0, type="n", xlim=xlimits, ylim=ylimits, ylab="", xlab="diff in IQtree max log lik of 'no part' - 'part'", main="partitioning w/ BIC")#
mtext(side=2, at=0, line=2.5, "diff in RF dist from true tree for 'no part' - 'part'")#
abline(h=0, col="gray75", lty=2); abline(v=0, col="gray75", lty=2)#
text(part.text1, part.text2, expression(italic("partitioning better")), cex=1, col="green4")#
text(part.text1, part.text3, expression(italic("no partitioning better")), cex=1, col="red3")#
rf_dist.size.by.partitions(dat6, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat7, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat8, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat9, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat10, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat11, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat12, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat13, "BIC", stat=plot.stat)#
#
legend("bottomleft", c("10", "20", "40", "80"), pch=15, col=samp.size.col, title = "num. genes", bg="white", cex=0.9, pt.cex=1.5)#
legend("topleft", c("lopho", "myria"), species, pch=spp.pch, col="black", bg="white", bty="n")#
#__________________________________________________________________________________________##
# euclidean distance difference#
#
ylimits <- c(-0.8,0.8)#
#
plot(0, type="n", xlim=xlimits, ylim=ylimits, ylab="", xlab="diff in IQtree max log lik of 'no part' - 'part'", main="partitioning w/ BIC")#
mtext(side=2, at=0, line=2.5, "diff in eucl dist from true tree for 'no part' - 'part'")#
abline(h=0, col="gray75", lty=2); abline(v=0, col="gray75", lty=2)#
text(part.text1, part.text2, expression(italic("partitioning better")), cex=1, col="green4")#
text(part.text1, part.text3, expression(italic("no partitioning better")), cex=1, col="red3")#
euc.size.by.partitions(dat6, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat7, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat8, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat9, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat10, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat11, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat12, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat13, "BIC", stat=plot.stat)#
dev.off()
library(scales)#
setwd("~/Documents/UNIL/PartitioningMethods_SimulationProject/FunctioningPipeline/AnalysisResults")#
make.merge.id <- function(dat){#
	id.col <- rep(NA, dim(dat)[1])#
	for(i in 1:dim(dat)[1]){#
		if(length(grep("lopho", dat$file[i])) > 0) spp <- "lopho_"#
		if(length(grep("myria", dat$file[i])) > 0) spp <- "myria_"#
		if(length(grep("10", dat$file[i])) > 0) samp <- "10_"#
		if(length(grep("20", dat$file[i])) > 0) samp <- "20_"#
		if(length(grep("40", dat$file[i])) > 0) samp <- "40_"#
		if(length(grep("80", dat$file[i])) > 0) samp <- "80_"#
		if(length(grep("rcluster", dat$file[i])) > 0) algo <- "rcluster_"#
		if(length(grep("greedy", dat$file[i])) > 0) algo <- "greedy_"#
		if(length(grep("noPart", dat$file[i])) > 0) algo <- "noPart_"#
		if(length(grep("AIC", dat$file[i])) > 0) crit <- "AIC"#
		if(length(grep("AICc", dat$file[i])) > 0) crit <- "AICc"#
		if(length(grep("BIC", dat$file[i])) > 0) crit <- "BIC"#
		if(length(grep("noPart", dat$file[i])) > 0) crit <- "noPart"#
		id.col[i] <- paste(c(spp, samp, algo, crit), collapse="")#
	}#
	return(id.col)#
}#
#####################################
species <- c("lopho", "myria")#
spp.pch <- c(1,2)#
samp.sizes <- c(10,20,40,80)#
samp.size.col <- c("steelblue4", "darkorange2", "green4", "red3")#
pt.wid <- 2#
opac <- 0.95#
#
analyze.rf.datset <- function(dat, criterion){#
	spp.it <- 1#
	for(i in species){#
		col.it <- 1#
		for(j in samp.sizes){#
			no.part.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "noPart" ,]#
			rclust.AIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AIC" ,]#
			rclust.BIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "BIC" ,]#
			rclust.AICc.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AICc",]#
			if(criterion == "AIC") points(no.part.result$rf_dist - rclust.AIC.result$rf_dist, no.part.result$max.log.lik - rclust.AIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)#
			if(criterion == "BIC") points(no.part.result$rf_dist - rclust.BIC.result$rf_dist, no.part.result$max.log.lik - rclust.BIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)#
			if(criterion == "AICc") points(no.part.result$rf_dist - rclust.AICc.result$rf_dist, no.part.result$max.log.lik - rclust.AICc.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)			#
			col.it <- col.it + 1	#
		}#
		spp.it <- spp.it + 1	#
	}#
}#
analyze.euc.datset <- function(dat, criterion){#
	spp.it <- 1#
	for(i in species){#
		col.it <- 1#
		for(j in samp.sizes){#
			no.part.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "noPart" ,]#
			rclust.AIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AIC" ,]#
			rclust.BIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "BIC" ,]#
			rclust.AICc.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AICc",]#
			if(criterion == "AIC") points(no.part.result$eucl_dist - rclust.AIC.result$eucl_dist, no.part.result$max.log.lik - rclust.AIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)#
			if(criterion == "BIC") points(no.part.result$eucl_dist - rclust.BIC.result$eucl_dist, no.part.result$max.log.lik - rclust.BIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)#
			if(criterion == "AICc") points(no.part.result$eucl_dist - rclust.AICc.result$eucl_dist, no.part.result$max.log.lik - rclust.AICc.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)			#
			col.it <- col.it + 1	#
		}#
		spp.it <- spp.it + 1	#
	}#
}#
#
# can use any of these scores from the treebuilding in IQtree:#
#   max.log.lik#
#   uncon.log.lik#
#   AIC#
#   BIC#
#   AICc#
#   cons.log.lik (consensus tree LL)#
#   sum.branch.lens#
#   sum.int.branch.lens#
euc.size.by.partitions <- function(dat, criterion, stat="max.log.lik"){#
	spp.it <- 1#
	for(i in species){#
		col.it <- 1#
		for(j in samp.sizes){#
			no.part.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "noPart" ,]#
			rclust.AIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AIC" ,]#
			rclust.BIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "BIC" ,]#
			rclust.AICc.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AICc",]#
			if(stat == "max.log.lik"){#
				if(criterion == "AIC") points(no.part.result$max.log.lik - rclust.AIC.result$max.log.lik, no.part.result$eucl_dist - rclust.AIC.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AIC.result$num.partitions/2)#
				if(criterion == "BIC") points(no.part.result$max.log.lik - rclust.BIC.result$max.log.lik, no.part.result$eucl_dist - rclust.BIC.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.BIC.result$num.partitions/2)#
				if(criterion == "AICc") points(no.part.result$max.log.lik - rclust.AICc.result$max.log.lik, no.part.result$eucl_dist - rclust.AICc.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AICc.result$num.partitions/2)			#
			}#
			if(stat == "uncon.log.lik"){#
				if(criterion == "AIC") points(no.part.result$uncon.log.lik - rclust.AIC.result$uncon.log.lik, no.part.result$eucl_dist - rclust.AIC.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AIC.result$num.partitions/2)#
				if(criterion == "BIC") points(no.part.result$uncon.log.lik - rclust.BIC.result$uncon.log.lik, no.part.result$eucl_dist - rclust.BIC.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.BIC.result$num.partitions/2)#
				if(criterion == "AICc") points(no.part.result$uncon.log.lik - rclust.AICc.result$uncon.log.lik, no.part.result$eucl_dist - rclust.AICc.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AICc.result$num.partitions/2)			#
			}		#
			col.it <- col.it + 1	#
		}#
		spp.it <- spp.it + 1	#
	}#
}#
rf_dist.size.by.partitions <- function(dat, criterion, stat="max.log.lik"){#
	spp.it <- 1#
	for(i in species){#
		col.it <- 1#
		for(j in samp.sizes){#
			no.part.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "noPart" ,]#
			rclust.AIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AIC" ,]#
			rclust.BIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "BIC" ,]#
			rclust.AICc.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AICc",]#
			if(stat == "max.log.lik"){#
				if(criterion == "AIC") points(no.part.result$max.log.lik - rclust.AIC.result$max.log.lik, no.part.result$rf_dist - rclust.AIC.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AIC.result$num.partitions/2)#
				if(criterion == "BIC") points(no.part.result$max.log.lik - rclust.BIC.result$max.log.lik, no.part.result$rf_dist - rclust.BIC.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.BIC.result$num.partitions/2)#
				if(criterion == "AICc") points(no.part.result$max.log.lik - rclust.AICc.result$max.log.lik, no.part.result$rf_dist - rclust.AICc.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AICc.result$num.partitions/2)			#
			}#
			if(stat == "uncon.log.lik"){#
				if(criterion == "AIC") points(no.part.result$uncon.log.lik - rclust.AIC.result$uncon.log.lik, no.part.result$rf_dist - rclust.AIC.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AIC.result$num.partitions/2)#
				if(criterion == "BIC") points(no.part.result$uncon.log.lik - rclust.BIC.result$uncon.log.lik, no.part.result$rf_dist - rclust.BIC.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.BIC.result$num.partitions/2)#
				if(criterion == "AICc") points(no.part.result$uncon.log.lik - rclust.AICc.result$uncon.log.lik, no.part.result$rf_dist - rclust.AICc.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AICc.result$num.partitions/2)			#
			}		#
			col.it <- col.it + 1	#
		}#
		spp.it <- spp.it + 1	#
	}#
}#
#####################################
# mut rate 1000#
dat6 <- read.csv("AllStatsOutput_New_Rep1_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat6$uniqueID <- paste(dat6$species, dat6$samp.size, dat6$search.algo, dat6$part.IC, sep="_")#
dat6b <- read.table("RF_Eucl_results_New_Rep1_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat6b$uniqueID <- make.merge.id(dat6b)#
dat <- merge(dat6, dat6b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat6 <- dat#
#
dat7 <- read.csv("AllStatsOutput_New_Rep2_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat7$uniqueID <- paste(dat7$species, dat7$samp.size, dat7$search.algo, dat7$part.IC, sep="_")#
dat7b <- read.table("RF_Eucl_results_New_Rep2_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat7b$uniqueID <- make.merge.id(dat7b)#
dat <- merge(dat7, dat7b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat7 <- dat#
#
dat8 <- read.csv("AllStatsOutput_New_Rep3_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat8$uniqueID <- paste(dat8$species, dat8$samp.size, dat8$search.algo, dat8$part.IC, sep="_")#
dat8b <- read.table("RF_Eucl_results_New_Rep3_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat8b$uniqueID <- make.merge.id(dat8b)#
dat <- merge(dat8, dat8b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat8 <- dat#
#
dat9 <- read.csv("AllStatsOutput_New_Rep4_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat9$uniqueID <- paste(dat9$species, dat9$samp.size, dat9$search.algo, dat9$part.IC, sep="_")#
dat9b <- read.table("RF_Eucl_results_New_Rep4_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat9b$uniqueID <- make.merge.id(dat9b)#
dat <- merge(dat9, dat9b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat9 <- dat#
#
dat10 <- read.csv("AllStatsOutput_New_Rep5_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat10$uniqueID <- paste(dat10$species, dat10$samp.size, dat10$search.algo, dat10$part.IC, sep="_")#
dat10b <- read.table("RF_Eucl_results_New_Rep5_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat10b$uniqueID <- make.merge.id(dat10b)#
dat <- merge(dat10, dat10b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat10 <- dat#
#
dat11 <- read.csv("AllStatsOutput_New_Rep6_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat11$uniqueID <- paste(dat11$species, dat11$samp.size, dat11$search.algo, dat11$part.IC, sep="_")#
dat11b <- read.table("RF_Eucl_results_New_Rep6_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat11b$uniqueID <- make.merge.id(dat11b)#
dat <- merge(dat11, dat11b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat11 <- dat#
#
dat12 <- read.csv("AllStatsOutput_Newest_Rep7_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat12$uniqueID <- paste(dat12$species, dat12$samp.size, dat12$search.algo, dat12$part.IC, sep="_")#
dat12b <- read.table("RF_Eucl_results_New_Rep7_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat12b$uniqueID <- make.merge.id(dat12b)#
dat <- merge(dat12, dat12b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat12 <- dat#
#
dat13 <- read.csv("AllStatsOutput_Newest_Rep8_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat13$uniqueID <- paste(dat13$species, dat13$samp.size, dat13$search.algo, dat13$part.IC, sep="_")#
dat13b <- read.table("RF_Eucl_results_New_Rep8_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat13b$uniqueID <- make.merge.id(dat13b)#
dat <- merge(dat13, dat13b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat13 <- dat#
#########
#########
plot.stat <- "max.log.lik"#
part.text1 <- -35#
part.text2 <- 0.65#
part.text3 <- -0.65#
pdf("Results_Plots/Flipped_CompareLogLikelihoods_BICpartitioning.pdf", width=8, height=4)#
par(mfrow=c(1,2), mar=c(4,4,1,0.5)) # if just looking at BIC for partitionfinder#
opac <- 0.75#
pt.lwd <- 2#
xlimits <- c(-60,3)#
# robinson foulds distance difference#
#
ylimits <- c(-0.25,0.25)#
#
plot(0, type="n", xlim=xlimits, ylim=ylimits, ylab="", xlab="diff in IQtree max log lik of 'no part' - 'part'", main="")#
mtext(side=2, at=0, line=2.5, "diff in RF dist from true tree: 'no part' - 'part'")#
abline(h=0, col="gray75", lty=2); abline(v=0, col="gray75", lty=2)#
text(part.text1, part.text2, expression(italic("partitioning better")), cex=1, col="green4")#
text(part.text1, part.text3, expression(italic("no partitioning better")), cex=1, col="red3")#
rf_dist.size.by.partitions(dat6, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat7, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat8, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat9, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat10, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat11, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat12, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat13, "BIC", stat=plot.stat)#
#
legend("bottomleft", c("10", "20", "40", "80"), pch=15, col=samp.size.col, title = "num. genes", bg="white", cex=0.9, pt.cex=1.5)#
legend("topleft", c("lopho", "myria"), species, pch=spp.pch, col="black", bg="white", bty="n")#
#__________________________________________________________________________________________##
# euclidean distance difference#
#
ylimits <- c(-0.8,0.8)#
#
plot(0, type="n", xlim=xlimits, ylim=ylimits, ylab="", xlab="diff in IQtree max log lik of 'no part' - 'part'", main="")#
mtext(side=2, at=0, line=2.5, "diff in eucl dist from true tree: 'no part' - 'part'")#
abline(h=0, col="gray75", lty=2); abline(v=0, col="gray75", lty=2)#
text(part.text1, part.text2, expression(italic("partitioning better")), cex=1, col="green4")#
text(part.text1, part.text3, expression(italic("no partitioning better")), cex=1, col="red3")#
euc.size.by.partitions(dat6, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat7, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat8, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat9, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat10, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat11, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat12, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat13, "BIC", stat=plot.stat)#
dev.off()
?boxplot
library(scales)#
setwd("~/Documents/UNIL/PartitioningMethods_SimulationProject/FunctioningPipeline/AnalysisResults")#
make.merge.id <- function(dat){#
	id.col <- rep(NA, dim(dat)[1])#
	for(i in 1:dim(dat)[1]){#
		if(length(grep("lopho", dat$file[i])) > 0) spp <- "lopho_"#
		if(length(grep("myria", dat$file[i])) > 0) spp <- "myria_"#
		if(length(grep("10", dat$file[i])) > 0) samp <- "10_"#
		if(length(grep("20", dat$file[i])) > 0) samp <- "20_"#
		if(length(grep("40", dat$file[i])) > 0) samp <- "40_"#
		if(length(grep("80", dat$file[i])) > 0) samp <- "80_"#
		if(length(grep("rcluster", dat$file[i])) > 0) algo <- "rcluster_"#
		if(length(grep("greedy", dat$file[i])) > 0) algo <- "greedy_"#
		if(length(grep("noPart", dat$file[i])) > 0) algo <- "noPart_"#
		if(length(grep("AIC", dat$file[i])) > 0) crit <- "AIC"#
		if(length(grep("AICc", dat$file[i])) > 0) crit <- "AICc"#
		if(length(grep("BIC", dat$file[i])) > 0) crit <- "BIC"#
		if(length(grep("noPart", dat$file[i])) > 0) crit <- "noPart"#
		id.col[i] <- paste(c(spp, samp, algo, crit), collapse="")#
	}#
	return(id.col)#
}#
#####################################
#
get.rep.difference <- function(dat, rep, samp.size, spp, partitioning.criterion, distance){#
	temp.dat <- dat[dat$replicate == rep & dat$samp.size == samp.size & dat$species == spp , ]#
	no.part.result <- temp.dat[temp.dat$search.algo == "noPart" ,]#
	rclust.AIC.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "AIC" ,]#
	rclust.BIC.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "BIC" ,]#
	rclust.AICc.result <- temp.dat[temp.dat$search.algo == "rcluster" & temp.dat$part.IC == "AICc",]#
	if(partitioning.criterion == "AIC"){#
		if(dim(rclust.AIC.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.AIC.result[distance] }#
	}#
	if(partitioning.criterion == "BIC"){#
		if(dim(rclust.BIC.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.BIC.result[distance] }#
	}#
	if(partitioning.criterion == "AICc"){#
		if(dim(rclust.AICc.result[distance])[1] == 0 | dim(no.part.result[distance])[1] == 0){ difference <- NA}#
		else{ difference <- no.part.result[distance] - rclust.AICc.result[distance] }#
	}#
	return(as.numeric(difference))			#
}#
#
#####################################
#
get.boxplot.dat <- function(dat, samp.size, spp, partitioning.criterion, distance){	#
	samp.size.dists <- NULL#
	for(j in unique(dat$replicate)){#
		dist <- get.rep.difference(dat, rep=j, samp.size=samp.size, spp=spp, partitioning.criterion=partitioning.criterion, distance=distance)#
		samp.size.dists <- c(samp.size.dists, dist)#
	}#
	return(samp.size.dists)#
}#
#
#####################################
# # # mut rate 500#
# dat1 <- read.csv("AllStatsOutput_New_Rep1_100-500.csv", header=TRUE, stringsAsFactors=FALSE)#
# dat1$uniqueID <- paste(dat1$species, dat1$samp.size, dat1$search.algo, dat1$part.IC, sep="_")#
# dat1b <- read.table("RF_Eucl_results_New_Rep1_100-500.txt", header=TRUE, stringsAsFactors=FALSE)#
# dat1b$uniqueID <- make.merge.id(dat1b)#
# dat <- merge(dat1, dat1b, by="uniqueID")#
# dat$gene.size <- 100#
# dat$mut.rate <- 500#
# dat1 <- dat#
# mut rate 1000#
#
infiles.a <- c("AllStatsOutput_New_Rep1_100-1000.csv",#
				"AllStatsOutput_New_Rep2_100-1000.csv",#
				"AllStatsOutput_New_Rep3_100-1000.csv",#
				"AllStatsOutput_New_Rep4_100-1000.csv",#
				"AllStatsOutput_New_Rep5_100-1000.csv",#
				"AllStatsOutput_New_Rep6_100-1000.csv"#,#
				#"AllStatsOutput_New_Rep1_100-500.csv",#
				#"AllStatsOutput_New_Rep2_100-500.csv",#
				#"AllStatsOutput_New_Rep3_100-500.csv",#
				#"AllStatsOutput_New_Rep4_100-500.csv",#
				#"AllStatsOutput_New_Rep5_100-500.csv",#
				#"AllStatsOutput_New_Rep6_100-500.csv",#
				"AllStatsOutput_Newest_Rep7_100-1000.csv"#,#
				# "AllStatsOutput_Newest_Rep8_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep9_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep10_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep11_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep12_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep13_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep14_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep15_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep16_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep17_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep18_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep19_100-1000.csv",#
				# "AllStatsOutput_Newest_Rep20_100-1000.csv"#
				)#
infiles.b <- c("RF_Eucl_results_New_Rep1_100-1000.txt",#
				"RF_Eucl_results_New_Rep2_100-1000.txt",#
				"RF_Eucl_results_New_Rep3_100-1000.txt",#
				"RF_Eucl_results_New_Rep4_100-1000.txt",#
				"RF_Eucl_results_New_Rep5_100-1000.txt",#
				"RF_Eucl_results_New_Rep6_100-1000.txt",#
				#"RF_Eucl_results_New_Rep1_100-500.txt",#
				#"RF_Eucl_results_New_Rep2_100-500.txt",#
				#"RF_Eucl_results_New_Rep3_100-500.txt",#
				#"RF_Eucl_results_New_Rep4_100-500.txt",#
				#"RF_Eucl_results_New_Rep5_100-500.txt",#
				#"RF_Eucl_results_New_Rep6_100-500.txt",#
				"RF_Eucl_results_New_Rep7_100-1000.txt"#,#
				# "RF_Eucl_results_New_Rep8_100-1000.txt",#
				# "RF_Eucl_results_New_Rep9_100-1000.txt",#
				# "RF_Eucl_results_New_Rep10_100-1000.txt",#
				# "RF_Eucl_results_New_Rep11_100-1000.txt",#
				# "RF_Eucl_results_New_Rep12_100-1000.txt",#
				# "RF_Eucl_results_New_Rep13_100-1000.txt",#
				# "RF_Eucl_results_New_Rep14_100-1000.txt",#
				# "RF_Eucl_results_New_Rep15_100-1000.txt",#
				# "RF_Eucl_results_New_Rep16_100-1000.txt",#
				# "RF_Eucl_results_New_Rep17_100-1000.txt",#
				# "RF_Eucl_results_New_Rep18_100-1000.txt",#
				# "RF_Eucl_results_New_Rep19_100-1000.txt",#
				# "RF_Eucl_results_New_Rep20_100-1000.txt"#
				)#
#
dat <- NULL#
for(i in 1:length(infiles.a)){#
	temp.dat1 <- read.csv(infiles.a[i], header=TRUE, stringsAsFactors=FALSE)#
	temp.dat1$uniqueID <- paste(temp.dat1$species, temp.dat1$samp.size, temp.dat1$search.algo, temp.dat1$part.IC, sep="_")#
	temp.dat2 <- read.table(infiles.b[i], header=TRUE, stringsAsFactors=FALSE)#
	temp.dat2$uniqueID <- make.merge.id(temp.dat2)#
	temp.dat <- merge(temp.dat1, temp.dat2, by="uniqueID")#
	temp.dat$gene.size <- 100#
	temp.dat$mut.rate <- 1000#
	temp.dat$replicate <- i#
	dat <- rbind(dat, temp.dat)#
}#
#
#####################################
samp.size.col <- c("steelblue4", "darkorange2", "green4", "red3")#
outline.col <- "gray30"#
samp.sizes <- c(10,20,40,80)#
#####################################
ylim1 <- c(-0.05, 0.05)#
ylim2 <- c(-0.75, 0.75)#
box.width <- 1#
line.type <- 1#
line.width <- 1.75#
pdf("Results_Plots/Boxplots.pdf", width=6, height=8)#
par(mfrow=c(2,2), mar=c(4,4,1.5,0.5))#
# part.crit <- "AIC"#
# plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="diff in RF dist from true tree for 'no part' - 'part'", main="Lophotrochozoa")#
# axis(at=c(1:4), c(1:4))#
# abline(h=0, col="gray75", lty=3)#
# text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
# text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
# for(i in 1:4){#
	# plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="rf_dist")#
	# if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	# boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width, lty=line.type, lwd=line.width)#
# }#
#
# plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="", main="Myriapoda")#
# axis(at=c(1:4), c(1:4))#
# abline(h=0, col="gray75", lty=3)#
# text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
# text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
# for(i in 1:4){#
	# plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="rf_dist")#
	# if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	# boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width, lty=line.type, lwd=line.width)#
# }#
#
# plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="diff in eucl dist from true tree for 'no part' - 'part'", main="")#
# axis(at=c(1:4), c(1:4))#
# abline(h=0, col="gray75", lty=3)#
# text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
# text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
# for(i in 1:4){#
	# plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="eucl_dist")#
	# if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	# boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width, lty=line.type, lwd=line.width)#
# }#
#
# plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="", main="")#
# axis(at=c(1:4), c(1:4))#
# abline(h=0, col="gray75", lty=3)#
# text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
# text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
# for(i in 1:4){#
	# plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="eucl_dist")#
	# if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	# boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width, lty=line.type, lwd=line.width)#
# }#
part.crit <- "BIC"#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="diff in RF dist from true tree for 'no part' - 'part'", main="Lophotrochozoa")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width, lty=line.type, lwd=line.width)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="", main="Myriapoda")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="rf_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width, lty=line.type, lwd=line.width)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="diff in eucl dist from true tree for 'no part' - 'part'", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width, lty=line.type, lwd=line.width)#
}#
#
plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="", main="")#
axis(at=c(1:4), c(1:4))#
abline(h=0, col="gray75", lty=3)#
text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
for(i in 1:4){#
	plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="eucl_dist")#
	if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width, lty=line.type, lwd=line.width)#
}#
# # #
# part.crit <- "AICc"#
# plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="diff in RF dist from true tree for 'no part' - 'part'", main="Lophotrochozoa")#
# axis(at=c(1:4), c(1:4))#
# abline(h=0, col="gray75", lty=3)#
# text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
# text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
# for(i in 1:4){#
	# plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="rf_dist")#
	# if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	# boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width, lty=line.type, lwd=line.width)#
# }#
#
# plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim1, xlab="", xaxt="n", ylab="", main="Myriapoda")#
# axis(at=c(1:4), c(1:4))#
# abline(h=0, col="gray75", lty=3)#
# text(2.5,0.03, expression(italic("partitioning better")), cex=1, col="green4")#
# text(2.5,-0.03, expression(italic("no partitioning better")), cex=1, col="red3")#
# for(i in 1:4){#
	# plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="rf_dist")#
	# if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	# boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width, lty=line.type, lwd=line.width)#
# }#
#
# plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="diff in eucl dist from true tree for 'no part' - 'part'", main="")#
# axis(at=c(1:4), c(1:4))#
# abline(h=0, col="gray75", lty=3)#
# text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
# text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
# for(i in 1:4){#
	# plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="lopho", partitioning.criterion=part.crit, distance="eucl_dist")#
	# if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	# boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width, lty=line.type, lwd=line.width)#
# }#
#
# plot(0, type="n", xlim=c(0.5,4.5), ylim=ylim2, xlab="num. genes", xaxt="n", ylab="", main="")#
# axis(at=c(1:4), c(1:4))#
# abline(h=0, col="gray75", lty=3)#
# text(2.5,0.5, expression(italic("partitioning better")), cex=1, col="green4")#
# text(2.5,-0.5, expression(italic("no partitioning better")), cex=1, col="red3")#
# for(i in 1:4){#
	# plot.dat <- get.boxplot.dat(dat=dat, samp.size=samp.sizes[i], spp="myria", partitioning.criterion=part.crit, distance="eucl_dist")#
	# if(is.na(unique(plot.dat)) & length(unique(plot.dat)) == 1) next#
	# boxplot(plot.dat, add=TRUE, at=i, pch=23, col=samp.size.col[i], border=outline.col, width=box.width, lty=line.type, lwd=line.width)#
# }#
dev.off()
library(scales)#
setwd("~/Documents/UNIL/PartitioningMethods_SimulationProject/FunctioningPipeline/AnalysisResults")#
make.merge.id <- function(dat){#
	id.col <- rep(NA, dim(dat)[1])#
	for(i in 1:dim(dat)[1]){#
		if(length(grep("lopho", dat$file[i])) > 0) spp <- "lopho_"#
		if(length(grep("myria", dat$file[i])) > 0) spp <- "myria_"#
		if(length(grep("10", dat$file[i])) > 0) samp <- "10_"#
		if(length(grep("20", dat$file[i])) > 0) samp <- "20_"#
		if(length(grep("40", dat$file[i])) > 0) samp <- "40_"#
		if(length(grep("80", dat$file[i])) > 0) samp <- "80_"#
		if(length(grep("rcluster", dat$file[i])) > 0) algo <- "rcluster_"#
		if(length(grep("greedy", dat$file[i])) > 0) algo <- "greedy_"#
		if(length(grep("noPart", dat$file[i])) > 0) algo <- "noPart_"#
		if(length(grep("AIC", dat$file[i])) > 0) crit <- "AIC"#
		if(length(grep("AICc", dat$file[i])) > 0) crit <- "AICc"#
		if(length(grep("BIC", dat$file[i])) > 0) crit <- "BIC"#
		if(length(grep("noPart", dat$file[i])) > 0) crit <- "noPart"#
		id.col[i] <- paste(c(spp, samp, algo, crit), collapse="")#
	}#
	return(id.col)#
}#
#####################################
species <- c("lopho", "myria")#
spp.pch <- c(1,2)#
samp.sizes <- c(10,20,40,80)#
samp.size.col <- c("steelblue4", "darkorange2", "green4", "red3")#
pt.wid <- 2#
opac <- 0.95#
#
analyze.rf.datset <- function(dat, criterion){#
	spp.it <- 1#
	for(i in species){#
		col.it <- 1#
		for(j in samp.sizes){#
			no.part.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "noPart" ,]#
			rclust.AIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AIC" ,]#
			rclust.BIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "BIC" ,]#
			rclust.AICc.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AICc",]#
			if(criterion == "AIC") points(no.part.result$rf_dist - rclust.AIC.result$rf_dist, no.part.result$max.log.lik - rclust.AIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)#
			if(criterion == "BIC") points(no.part.result$rf_dist - rclust.BIC.result$rf_dist, no.part.result$max.log.lik - rclust.BIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)#
			if(criterion == "AICc") points(no.part.result$rf_dist - rclust.AICc.result$rf_dist, no.part.result$max.log.lik - rclust.AICc.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)			#
			col.it <- col.it + 1	#
		}#
		spp.it <- spp.it + 1	#
	}#
}#
analyze.euc.datset <- function(dat, criterion){#
	spp.it <- 1#
	for(i in species){#
		col.it <- 1#
		for(j in samp.sizes){#
			no.part.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "noPart" ,]#
			rclust.AIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AIC" ,]#
			rclust.BIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "BIC" ,]#
			rclust.AICc.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AICc",]#
			if(criterion == "AIC") points(no.part.result$eucl_dist - rclust.AIC.result$eucl_dist, no.part.result$max.log.lik - rclust.AIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)#
			if(criterion == "BIC") points(no.part.result$eucl_dist - rclust.BIC.result$eucl_dist, no.part.result$max.log.lik - rclust.BIC.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)#
			if(criterion == "AICc") points(no.part.result$eucl_dist - rclust.AICc.result$eucl_dist, no.part.result$max.log.lik - rclust.AICc.result$max.log.lik, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid)			#
			col.it <- col.it + 1	#
		}#
		spp.it <- spp.it + 1	#
	}#
}#
#
# can use any of these scores from the treebuilding in IQtree:#
#   max.log.lik#
#   uncon.log.lik#
#   AIC#
#   BIC#
#   AICc#
#   cons.log.lik (consensus tree LL)#
#   sum.branch.lens#
#   sum.int.branch.lens#
euc.size.by.partitions <- function(dat, criterion, stat="max.log.lik"){#
	spp.it <- 1#
	for(i in species){#
		col.it <- 1#
		for(j in samp.sizes){#
			no.part.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "noPart" ,]#
			rclust.AIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AIC" ,]#
			rclust.BIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "BIC" ,]#
			rclust.AICc.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AICc",]#
			if(stat == "max.log.lik"){#
				if(criterion == "AIC") points(no.part.result$max.log.lik - rclust.AIC.result$max.log.lik, no.part.result$eucl_dist - rclust.AIC.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AIC.result$num.partitions/2)#
				if(criterion == "BIC") points(no.part.result$max.log.lik - rclust.BIC.result$max.log.lik, no.part.result$eucl_dist - rclust.BIC.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.BIC.result$num.partitions/2)#
				if(criterion == "AICc") points(no.part.result$max.log.lik - rclust.AICc.result$max.log.lik, no.part.result$eucl_dist - rclust.AICc.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AICc.result$num.partitions/2)			#
			}#
			if(stat == "uncon.log.lik"){#
				if(criterion == "AIC") points(no.part.result$uncon.log.lik - rclust.AIC.result$uncon.log.lik, no.part.result$eucl_dist - rclust.AIC.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AIC.result$num.partitions/2)#
				if(criterion == "BIC") points(no.part.result$uncon.log.lik - rclust.BIC.result$uncon.log.lik, no.part.result$eucl_dist - rclust.BIC.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.BIC.result$num.partitions/2)#
				if(criterion == "AICc") points(no.part.result$uncon.log.lik - rclust.AICc.result$uncon.log.lik, no.part.result$eucl_dist - rclust.AICc.result$eucl_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AICc.result$num.partitions/2)			#
			}		#
			col.it <- col.it + 1	#
		}#
		spp.it <- spp.it + 1	#
	}#
}#
rf_dist.size.by.partitions <- function(dat, criterion, stat="max.log.lik"){#
	spp.it <- 1#
	for(i in species){#
		col.it <- 1#
		for(j in samp.sizes){#
			no.part.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "noPart" ,]#
			rclust.AIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AIC" ,]#
			rclust.BIC.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "BIC" ,]#
			rclust.AICc.result <- dat[dat$species == i & dat$samp.size == j & dat$search.algo == "rcluster" & dat$part.IC == "AICc",]#
			if(stat == "max.log.lik"){#
				if(criterion == "AIC") points(no.part.result$max.log.lik - rclust.AIC.result$max.log.lik, no.part.result$rf_dist - rclust.AIC.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AIC.result$num.partitions/2)#
				if(criterion == "BIC") points(no.part.result$max.log.lik - rclust.BIC.result$max.log.lik, no.part.result$rf_dist - rclust.BIC.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.BIC.result$num.partitions/2)#
				if(criterion == "AICc") points(no.part.result$max.log.lik - rclust.AICc.result$max.log.lik, no.part.result$rf_dist - rclust.AICc.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AICc.result$num.partitions/2)			#
			}#
			if(stat == "uncon.log.lik"){#
				if(criterion == "AIC") points(no.part.result$uncon.log.lik - rclust.AIC.result$uncon.log.lik, no.part.result$rf_dist - rclust.AIC.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AIC.result$num.partitions/2)#
				if(criterion == "BIC") points(no.part.result$uncon.log.lik - rclust.BIC.result$uncon.log.lik, no.part.result$rf_dist - rclust.BIC.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.BIC.result$num.partitions/2)#
				if(criterion == "AICc") points(no.part.result$uncon.log.lik - rclust.AICc.result$uncon.log.lik, no.part.result$rf_dist - rclust.AICc.result$rf_dist, col=alpha(samp.size.col[col.it], opac), pch=spp.pch[spp.it], lwd=pt.wid, cex=rclust.AICc.result$num.partitions/2)			#
			}		#
			col.it <- col.it + 1	#
		}#
		spp.it <- spp.it + 1	#
	}#
}#
#####################################
# mut rate 1000#
dat6 <- read.csv("AllStatsOutput_New_Rep1_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat6$uniqueID <- paste(dat6$species, dat6$samp.size, dat6$search.algo, dat6$part.IC, sep="_")#
dat6b <- read.table("RF_Eucl_results_New_Rep1_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat6b$uniqueID <- make.merge.id(dat6b)#
dat <- merge(dat6, dat6b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat6 <- dat#
#
dat7 <- read.csv("AllStatsOutput_New_Rep2_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat7$uniqueID <- paste(dat7$species, dat7$samp.size, dat7$search.algo, dat7$part.IC, sep="_")#
dat7b <- read.table("RF_Eucl_results_New_Rep2_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat7b$uniqueID <- make.merge.id(dat7b)#
dat <- merge(dat7, dat7b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat7 <- dat#
#
dat8 <- read.csv("AllStatsOutput_New_Rep3_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat8$uniqueID <- paste(dat8$species, dat8$samp.size, dat8$search.algo, dat8$part.IC, sep="_")#
dat8b <- read.table("RF_Eucl_results_New_Rep3_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat8b$uniqueID <- make.merge.id(dat8b)#
dat <- merge(dat8, dat8b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat8 <- dat#
#
dat9 <- read.csv("AllStatsOutput_New_Rep4_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat9$uniqueID <- paste(dat9$species, dat9$samp.size, dat9$search.algo, dat9$part.IC, sep="_")#
dat9b <- read.table("RF_Eucl_results_New_Rep4_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat9b$uniqueID <- make.merge.id(dat9b)#
dat <- merge(dat9, dat9b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat9 <- dat#
#
dat10 <- read.csv("AllStatsOutput_New_Rep5_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat10$uniqueID <- paste(dat10$species, dat10$samp.size, dat10$search.algo, dat10$part.IC, sep="_")#
dat10b <- read.table("RF_Eucl_results_New_Rep5_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat10b$uniqueID <- make.merge.id(dat10b)#
dat <- merge(dat10, dat10b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat10 <- dat#
#
dat11 <- read.csv("AllStatsOutput_New_Rep6_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat11$uniqueID <- paste(dat11$species, dat11$samp.size, dat11$search.algo, dat11$part.IC, sep="_")#
dat11b <- read.table("RF_Eucl_results_New_Rep6_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat11b$uniqueID <- make.merge.id(dat11b)#
dat <- merge(dat11, dat11b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat11 <- dat#
#
dat12 <- read.csv("AllStatsOutput_Newest_Rep7_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat12$uniqueID <- paste(dat12$species, dat12$samp.size, dat12$search.algo, dat12$part.IC, sep="_")#
dat12b <- read.table("RF_Eucl_results_New_Rep7_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat12b$uniqueID <- make.merge.id(dat12b)#
dat <- merge(dat12, dat12b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat12 <- dat#
#
dat13 <- read.csv("AllStatsOutput_Newest_Rep8_100-1000.csv", header=TRUE, stringsAsFactors=FALSE)#
dat13$uniqueID <- paste(dat13$species, dat13$samp.size, dat13$search.algo, dat13$part.IC, sep="_")#
dat13b <- read.table("RF_Eucl_results_New_Rep8_100-1000.txt", header=TRUE, stringsAsFactors=FALSE)#
dat13b$uniqueID <- make.merge.id(dat13b)#
dat <- merge(dat13, dat13b, by="uniqueID")#
dat$gene.size <- 100#
dat$mut.rate <- 1000#
dat13 <- dat#
#########
#########
plot.stat <- "max.log.lik"#
part.text1 <- -35#
part.text2 <- 0.65#
part.text3 <- -0.65#
pdf("Results_Plots/Flipped_CompareLogLikelihoods_BICpartitioning.pdf", width=8, height=4)#
par(mfrow=c(1,2), mar=c(4,4,1,0.5)) # if just looking at BIC for partitionfinder#
opac <- 0.75#
pt.lwd <- 2#
xlimits <- c(-60,3)#
# robinson foulds distance difference#
#
ylimits <- c(-0.25,0.25)#
#
plot(0, type="n", xlim=xlimits, ylim=ylimits, ylab="", xlab="diff in IQtree max log lik of 'no part' - 'part'", main="")#
mtext(side=2, at=0, line=2.5, "diff in RF dist from true tree: 'no part' - 'part'")#
abline(h=0, col="gray75", lty=2); abline(v=0, col="gray75", lty=2)#
text(part.text1, part.text2, expression(italic("partitioning better")), cex=1, col="green4")#
text(part.text1, part.text3, expression(italic("no partitioning better")), cex=1, col="red3")#
rf_dist.size.by.partitions(dat6, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat7, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat8, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat9, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat10, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat11, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat12, "BIC", stat=plot.stat)#
rf_dist.size.by.partitions(dat13, "BIC", stat=plot.stat)#
#
legend("bottomleft", c("10", "20", "40", "80"), pch=15, col=samp.size.col, title = "num. genes", bg="white", cex=0.9, pt.cex=1.5)#
legend("topleft", c("lopho", "myria"), species, pch=spp.pch, col="black", bg="white", bty="n")#
#__________________________________________________________________________________________##
# euclidean distance difference#
#
ylimits <- c(-0.8,0.8)#
#
plot(0, type="n", xlim=xlimits, ylim=ylimits, ylab="", xlab="diff in IQtree max log lik of 'no part' - 'part'", main="")#
mtext(side=2, at=0, line=2.5, "diff in eucl dist from true tree: 'no part' - 'part'")#
abline(h=0, col="gray75", lty=2); abline(v=0, col="gray75", lty=2)#
text(part.text1, part.text2, expression(italic("partitioning better")), cex=1, col="green4")#
text(part.text1, part.text3, expression(italic("no partitioning better")), cex=1, col="red3")#
euc.size.by.partitions(dat6, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat7, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat8, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat9, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat10, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat11, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat12, "BIC", stat=plot.stat)#
euc.size.by.partitions(dat13, "BIC", stat=plot.stat)#
dev.off()
