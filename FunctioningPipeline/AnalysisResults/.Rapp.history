migrants.in
n2 <- n2 - migrants.out + migrants.in
n2
n3 <- off.num(n2)#
migrants.out <- m*n3#
n3 <- n3 - migrants.out + migrants.in
n3
n4 <- off.num(n3)#
migrants.out <- m*n4#
n4 <- n4 - migrants.out + migrants.in
n4
n5 <- off.num(n4)
n5
migrants.out <- m*n5
migrants.out
n5 <- n5 - migrants.out + migrants.in
n5
n6 <- off.num(n5)
n6
migrants.out <- m*n6
n6 <- n6 - migrants.out + migrants.in
n6
n2
n3
n4
n5
n6
n1 <- 5											## 5#
#
# t 2#
n2 <- off.num(n1)
n2
migrants.out <- m*n2#
migrants.in <- 5#
n2 <- n2 - migrants.out + migrants.in			## 13.57#
#
# t 3#
n3 <- off.num(n2)
n3
migrants.out <- m*n3#
n3 <- n3 - migrants.out + migrants.in			## 26.51#
#
# t 4#
n4 <- off.num(n3)
n4
migrants.out <- m*n4#
n4 <- n4 - migrants.out + migrants.in			## 42.72#
#
# t 5#
n5 <- off.num(n4)
n5
migrants.out <- m*n5#
n5 <- n5 - migrants.out + migrants.in			## 58.88#
#
# t 6#
n6 <- off.num(n5)								##	## #
migrants.out <- m*n6
n6
migrants.out <- m*n6#
n6 <- n6 - migrants.out + migrants.in			## 71.71
n6
n7 <- off.num(n6)								########## 74.12
n7
n7 <- n7 - migrants.out + migrants.in			## 71.71
n7
n8 <- off.num(n7)								########## 83.52
n8
migrants.out <- m*n8#
n8 <- n8 - migrants.out + migrants.in			## 81.11
n8
# t 9#
n9 <- off.num(n8)								########## 89.57
n9
migrants.out <- m*n9#
n9 <- n9 - migrants.out + migrants.in			## 85.61
n9
n10 <- off.num(n9)								########## 92.25
n10
migrants.out <- m*n10#
n10 <- n10 - migrants.out + migrants.in			## 88.02
n10
plot(1:10, c(5, 9.52, 23.9, 41.91, 59.86, 74.12, 83.52, 89.57, 92.25, 93.63), type="o")
plot(1:10, c(5, 9.52, 23.9, 41.91, 59.86, 74.12, 83.52, 89.57, 92.25, 93.63), type="o", ylab="front deme population size", xlab="generation since colonization")
plot(1:10, c(5, 9.52, 23.9, 41.91, 59.86, 74.12, 83.52, 89.57, 92.25, 93.63), ylim=c(0,100), type="o", ylab="front deme population size", xlab="generation since colonization")
plot(1:10, c(5, 9.52, 23.9, 41.91, 59.86, 74.12, 83.52, 89.57, 92.25, 93.63), ylim=c(0,100), type="o", ylab="front deme population size", xlab="generation since colonization")#
abline(h = 100, lty=3, col="gray")
migrants.in
pop.size <- NULL#
prev.pop.size <- 5#
for(i in 1:20){#
	n <- off.num(prev.pop.size)#
	pop.size <- c(pop.size, n)#
	prev.pop.size <- n - m*n + migrants.in#
}
pop.size
plot(1:length(pop.size), pop.size, ylim=c(0,100), type="o", ylab="front deme population size", xlab="generation since colonization")#
abline(h = 100, lty=3, col="gray")
pop.size <- NULL#
prev.pop.size <- 5#
for(i in 1:20){#
	n <- off.num(prev.pop.size)#
	pop.size <- c(pop.size, n)#
	prev.pop.size <- n - m*n + migrants.in#
}#
plot(1:length(pop.size), pop.size, ylim=c(0,100), type="o", ylab="front deme population size", xlab="generation since colonization")#
abline(h = 100, lty=3, col="gray")
?rpois
rpois(1)
abline(v = c(5,10), lty=2, col="gray")
# logistic growth#
#
r <- 2#
K <- 100#
m <- 0.1#
#
off.num <- function(n){#
	ans <- n * (r/(1+(n*(r-1))/K))#
	return(ans)#
}#
#
n1 <- 5											## 5#
#
# t 2#
n2 <- off.num(n1)								########## 9.52#
migrants.out <- m*n2#
migrants.in <- 5#
n2 <- n2 - migrants.out + migrants.in			## 13.57#
#
# t 3#
n3 <- off.num(n2)								########## 23.90#
migrants.out <- m*n3#
n3 <- n3 - migrants.out + migrants.in			## 26.51#
#
# t 4#
n4 <- off.num(n3)								########## 41.91#
migrants.out <- m*n4#
n4 <- n4 - migrants.out + migrants.in			## 42.72#
#
# t 5#
n5 <- off.num(n4)								########## 59.86#
migrants.out <- m*n5#
n5 <- n5 - migrants.out + migrants.in			## 58.88#
#
# t 6#
n6 <- off.num(n5)								########## 74.12#
migrants.out <- m*n6#
n6 <- n6 - migrants.out + migrants.in			## 71.71#
#
# t 7#
n7 <- off.num(n6)								########## 83.52#
migrants.out <- m*n7#
n7 <- n7 - migrants.out + migrants.in			## 81.11#
#
# t 8#
n8 <- off.num(n7)								########## 89.57#
migrants.out <- m*n8#
n8 <- n8 - migrants.out + migrants.in			## 85.61#
#
# t 9#
n9 <- off.num(n8)								########## 92.25#
migrants.out <- m*n9#
n9 <- n9 - migrants.out + migrants.in			## 88.02#
#
# t 10#
n10 <- off.num(n9)								########## 93.63#
migrants.out <- m*n10#
n10 <- n10 - migrants.out + migrants.in			## 89.27#
#
plot(1:10, c(5, 9.52, 23.9, 41.91, 59.86, 74.12, 83.52, 89.57, 92.25, 93.63), ylim=c(0,100), type="o", ylab="front deme population size", xlab="generation since colonization")#
abline(h = 100, lty=3, col="gray")#
#<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>##
#
## AUTOMATED ###
#
#<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>##
pop.size <- NULL#
prev.pop.size <- 5#
for(i in 1:20){#
	n <- off.num(prev.pop.size)#
	pop.size <- c(pop.size, n)#
	prev.pop.size <- n - m*n + migrants.in#
}#
plot(1:length(pop.size), pop.size, ylim=c(0,100), type="o", ylab="front deme population size", xlab="generation since colonization")#
abline(h = 100, lty=3, col="gray")#
abline(v = c(5,10), lty=2, col="gray")
plot(1:length(pop.size), pop.size, ylim=c(0,100), type="b", ylab="front deme population size", xlab="generation since colonization")
plot(1:length(pop.size), pop.size, ylim=c(0,100), type="o", ylab="front deme population size", xlab="generation since colonization")
pop.size <- NULL#
prev.pop.size <- 5#
for(i in 1:20){#
	n <- off.num(prev.pop.size)#
	pop.size <- c(pop.size, n)#
	prev.pop.size <- n - m*n + migrants.in#
}#
plot(1:length(pop.size), pop.size, ylim=c(0,100), type="o", ylab="front deme population size", xlab="generation since colonization")#
abline(h = 100, lty=3, col="gray")#
abline(v = c(5,10), lty=2, col="gray")
pop.size <- NULL#
prev.pop.size <- 5#
for(i in 1:20){#
	n <- off.num(prev.pop.size)#
	pop.size <- c(pop.size, n)#
	prev.pop.size <- n - m*.5*n + migrants.in#
}#
plot(1:length(pop.size), pop.size, ylim=c(0,100), type="o", ylab="front deme population size", xlab="generation since colonization")#
abline(h = 100, lty=3, col="gray")#
abline(v = c(5,10), lty=2, col="gray")
pop.size <- NULL#
prev.pop.size <- 5#
for(i in 1:20){#
	n <- off.num(prev.pop.size)#
	pop.size <- c(pop.size, n)#
	prev.pop.size <- n - m*n + migrants.in#
}#
plot(1:length(pop.size), pop.size, ylim=c(0,100), type="o", ylab="front deme population size", xlab="generation since colonization")#
abline(h = 100, lty=3, col="gray")#
abline(v = c(5,10), lty=2, col="gray")
rnorm
library(maps)  #functions for mapmaking#
library(mapdata)   #some data for rough maps#
library(maptools)  #for other plotting tools#
#
provinces <- readShapePoly("PROVINCE.SHP")
install.packages(mapdata)
install.packages("mapdata")
library(maps)  #functions for mapmaking#
library(mapdata)   #some data for rough maps#
library(maptools)  #for other plotting tools#
#
provinces <- readShapePoly("PROVINCE.SHP")
install.packages("maptools")
library(maps)  #functions for mapmaking#
library(mapdata)   #some data for rough maps#
library(maptools)  #for other plotting tools#
#
provinces <- readShapePoly("PROVINCE.SHP")
map("world", xlim=c(-140,-114),ylim=c(48.4,60), fill=FALSE, col="white")
box()#
axis(side=2, at=c(49,50,51,52,53,54,55,56,57,58,59,60), labels=c("", expression(paste("50", degree, "N")), "", "", "", "", expression(paste("55", degree, "N")), "", "", "", "", expression(paste("60", degree, "N"))))#
axis(side=1, at=seq(-140,-114), labels=c("","","","","",expression(paste("135",degree,"W")),"","","","",expression(paste("130",degree,"W")),"","","","",expression(paste("125",degree, "W")),"","","","",expression(paste("120",degree,"W")),"","","","",expression(paste("115",degree,"W")),""))
map("world", xlim=c(-140,-114),ylim=c(48.4,60), fill=FALSE, col="gray")
pdf("~/Desktop/AmandaMap.pdf", width=6, height=6)#
#
map("world", xlim=c(-140,-114),ylim=c(48.4,60), fill=FALSE, col="gray")#
#
plot(provinces, add=TRUE, col=alpha("gray", 0), border="black", lwd=1)#
#
box()#
axis(side=2, at=c(49,50,51,52,53,54,55,56,57,58,59,60), labels=c("", expression(paste("50", degree, "N")), "", "", "", "", expression(paste("55", degree, "N")), "", "", "", "", expression(paste("60", degree, "N"))))#
axis(side=1, at=seq(-140,-114), labels=c("","","","","",expression(paste("135",degree,"W")),"","","","",expression(paste("130",degree,"W")),"","","","",expression(paste("125",degree, "W")),"","","","",expression(paste("120",degree,"W")),"","","","",expression(paste("115",degree,"W")),""))#
#
dev.off()
pdf("~/Desktop/AmandaMap.pdf", width=6, height=6)#
#
map("world", xlim=c(-140,-114),ylim=c(48.4,60), fill=FALSE, col="gray", bg="blue")#
#
plot(provinces, add=TRUE, col=alpha("gray", 0), border="black", lwd=1)#
#
box()#
axis(side=2, at=c(49,50,51,52,53,54,55,56,57,58,59,60), labels=c("", expression(paste("50", degree, "N")), "", "", "", "", expression(paste("55", degree, "N")), "", "", "", "", expression(paste("60", degree, "N"))))#
axis(side=1, at=seq(-140,-114), labels=c("","","","","",expression(paste("135",degree,"W")),"","","","",expression(paste("130",degree,"W")),"","","","",expression(paste("125",degree, "W")),"","","","",expression(paste("120",degree,"W")),"","","","",expression(paste("115",degree,"W")),""))#
#
dev.off()
pdf("~/Desktop/AmandaMap.pdf", width=6, height=6)#
par(mar=c(0,0,0,0))#
map("world", xlim=c(-140,-114),ylim=c(48.4,60), fill=FALSE, col="gray", bg="blue")#
#
plot(provinces, add=TRUE, col=alpha("gray", 0), border="black", lwd=1)#
#
box()#
axis(side=2, at=c(49,50,51,52,53,54,55,56,57,58,59,60), labels=c("", expression(paste("50", degree, "N")), "", "", "", "", expression(paste("55", degree, "N")), "", "", "", "", expression(paste("60", degree, "N"))))#
axis(side=1, at=seq(-140,-114), labels=c("","","","","",expression(paste("135",degree,"W")),"","","","",expression(paste("130",degree,"W")),"","","","",expression(paste("125",degree, "W")),"","","","",expression(paste("120",degree,"W")),"","","","",expression(paste("115",degree,"W")),""))#
#
dev.off()
pdf("~/Desktop/AmandaMap.pdf", width=6, height=5)#
par(mar=c(0,0,0,0))#
map("world", xlim=c(-140,-114),ylim=c(48.4,60), fill=FALSE, col="gray", bg="blue")#
#
plot(provinces, add=TRUE, col=alpha("gray", 0), border="black", lwd=1)#
#
box()#
axis(side=2, at=c(49,50,51,52,53,54,55,56,57,58,59,60), labels=c("", expression(paste("50", degree, "N")), "", "", "", "", expression(paste("55", degree, "N")), "", "", "", "", expression(paste("60", degree, "N"))))#
axis(side=1, at=seq(-140,-114), labels=c("","","","","",expression(paste("135",degree,"W")),"","","","",expression(paste("130",degree,"W")),"","","","",expression(paste("125",degree, "W")),"","","","",expression(paste("120",degree,"W")),"","","","",expression(paste("115",degree,"W")),""))#
#
dev.off()
pdf("~/Desktop/AmandaMap.pdf", width=5, height=4)#
par(mar=c(0,0,0,0))#
map("world", xlim=c(-140,-114),ylim=c(48.4,60), fill=FALSE, col="gray", bg="blue")#
#
plot(provinces, add=TRUE, col=alpha("gray", 0), border="black", lwd=1)#
#
box()#
axis(side=2, at=c(49,50,51,52,53,54,55,56,57,58,59,60), labels=c("", expression(paste("50", degree, "N")), "", "", "", "", expression(paste("55", degree, "N")), "", "", "", "", expression(paste("60", degree, "N"))))#
axis(side=1, at=seq(-140,-114), labels=c("","","","","",expression(paste("135",degree,"W")),"","","","",expression(paste("130",degree,"W")),"","","","",expression(paste("125",degree, "W")),"","","","",expression(paste("120",degree,"W")),"","","","",expression(paste("115",degree,"W")),""))#
#
dev.off()
pdf("~/Desktop/AmandaMap.pdf", width=5, height=4)#
par(mar=c(0,0,0,0))#
map("world", xlim=c(-140,-114),ylim=c(48.4,60), fill=FALSE, col="gray")#
polygon(x=c(-140,-140, -114,-114), y=c(48.4,60,60,48.4), col="blue")#
#
plot(provinces, add=TRUE, col=alpha("gray", 0), border="black", lwd=1)#
#
box()#
axis(side=2, at=c(49,50,51,52,53,54,55,56,57,58,59,60), labels=c("", expression(paste("50", degree, "N")), "", "", "", "", expression(paste("55", degree, "N")), "", "", "", "", expression(paste("60", degree, "N"))))#
axis(side=1, at=seq(-140,-114), labels=c("","","","","",expression(paste("135",degree,"W")),"","","","",expression(paste("130",degree,"W")),"","","","",expression(paste("125",degree, "W")),"","","","",expression(paste("120",degree,"W")),"","","","",expression(paste("115",degree,"W")),""))#
#
dev.off()
pdf("~/Desktop/AmandaMap.pdf", width=5, height=4)#
par(mar=c(0,0,0,0))#
polygon(x=c(-140,-140, -114,-114), y=c(48.4,60,60,48.4), col="blue")#
map("world", xlim=c(-140,-114),ylim=c(48.4,60), fill=FALSE, col="gray")#
#
plot(provinces, add=TRUE, col=alpha("gray", 0), border="black", lwd=1)#
#
box()#
axis(side=2, at=c(49,50,51,52,53,54,55,56,57,58,59,60), labels=c("", expression(paste("50", degree, "N")), "", "", "", "", expression(paste("55", degree, "N")), "", "", "", "", expression(paste("60", degree, "N"))))#
axis(side=1, at=seq(-140,-114), labels=c("","","","","",expression(paste("135",degree,"W")),"","","","",expression(paste("130",degree,"W")),"","","","",expression(paste("125",degree, "W")),"","","","",expression(paste("120",degree,"W")),"","","","",expression(paste("115",degree,"W")),""))#
#
dev.off()
pdf("~/Desktop/AmandaMap.pdf", width=5, height=4)#
par(mar=c(0,0,0,0))#
map("world", xlim=c(-140,-114),ylim=c(48.4,60), fill=FALSE, col="gray")#
polygon(x=c(-140,-140, -114,-114), y=c(48.4,60,60,48.4), col="blue")#
map("world", xlim=c(-140,-114),ylim=c(48.4,60), fill=FALSE, col="gray")#
#
plot(provinces, add=TRUE, col=alpha("gray", 0), border="black", lwd=1)#
#
box()#
axis(side=2, at=c(49,50,51,52,53,54,55,56,57,58,59,60), labels=c("", expression(paste("50", degree, "N")), "", "", "", "", expression(paste("55", degree, "N")), "", "", "", "", expression(paste("60", degree, "N"))))#
axis(side=1, at=seq(-140,-114), labels=c("","","","","",expression(paste("135",degree,"W")),"","","","",expression(paste("130",degree,"W")),"","","","",expression(paste("125",degree, "W")),"","","","",expression(paste("120",degree,"W")),"","","","",expression(paste("115",degree,"W")),""))#
#
dev.off()
pdf("~/Desktop/AmandaMap.pdf", width=5, height=4)#
par(mar=c(0,0,0,0))#
map("world", xlim=c(-140,-114),ylim=c(48.4,60), fill=FALSE, col="gray")#
polygon(x=c(-140,-140, -114,-114), y=c(48.4,60,60,48.4), col="blue")#
map("world", xlim=c(-140,-114),ylim=c(48.4,60), fill=FALSE, col="gray", add=TRUE)#
#
plot(provinces, add=TRUE, col=alpha("gray", 0), border="black", lwd=1)#
#
box()#
axis(side=2, at=c(49,50,51,52,53,54,55,56,57,58,59,60), labels=c("", expression(paste("50", degree, "N")), "", "", "", "", expression(paste("55", degree, "N")), "", "", "", "", expression(paste("60", degree, "N"))))#
axis(side=1, at=seq(-140,-114), labels=c("","","","","",expression(paste("135",degree,"W")),"","","","",expression(paste("130",degree,"W")),"","","","",expression(paste("125",degree, "W")),"","","","",expression(paste("120",degree,"W")),"","","","",expression(paste("115",degree,"W")),""))#
#
dev.off()
library(maps)  #functions for mapmaking#
library(mapdata)   #some data for rough maps#
library(maptools)  #for other plotting tools#
#
provinces <- readShapePoly("PROVINCE.SHP")#
pdf("~/Desktop/AmandaMap.pdf", width=5, height=4)#
par(mar=c(0,0,0,0))#
map("world", xlim=c(-140,-114),ylim=c(48.4,60), fill=FALSE, col="gray")#
polygon(x=c(-140,-140, -114,-114), y=c(48.4,60,60,48.4), col="blue")#
map("world", xlim=c(-140,-114),ylim=c(48.4,60), fill=FALSE, col="gray", add=TRUE)#
#
plot(provinces, add=TRUE, col=alpha("gray", 0), border="black", lwd=1)#
#
#box()#
axis(side=2, at=c(49,50,51,52,53,54,55,56,57,58,59,60), labels=c("", expression(paste("50", degree, "N")), "", "", "", "", expression(paste("55", degree, "N")), "", "", "", "", expression(paste("60", degree, "N"))))#
axis(side=1, at=seq(-140,-114), labels=c("","","","","",expression(paste("135",degree,"W")),"","","","",expression(paste("130",degree,"W")),"","","","",expression(paste("125",degree, "W")),"","","","",expression(paste("120",degree,"W")),"","","","",expression(paste("115",degree,"W")),""))#
#
dev.off()
?pch
install.packages("DESeq2")
if (!requireNamespace("BiocManager", quietly = TRUE))#
    install.packages("BiocManager")#
BiocManager::install("DESeq2", version = "3.8")
?paste
?heatmap
?dist
test <- matrix(1:100, ncol=10)
test
heatmap(test)
test <- matrix(c(1:10,1:10,1:80), ncol=10)
heatmap(test)
test
test <- matrix(c(rep(1,20),2:79), ncol=10)
test <- matrix(c(rep(1,20),2:81), ncol=10)
test
heatmap(test)
heatmap(test, keep.dendro = TRUE)
ans <- heatmap(test, keep.dendro = TRUE)
ans
test <- matrix(c(rep(1,20),2:91), ncol=11)
ans <- heatmap(test, keep.dendro = TRUE)
test
ans
test <- matrix(c(rep(1,20),2:131), ncol=15)#
#
ans <- heatmap(test, keep.dendro = TRUE)
ans
ans$Rowv
library(dendextend)
install.packages("dendextend")
sum(get_nodes_attr(map$Rowv, "height"))
library(dendextend)
sum(get_nodes_attr(map$Rowv, "height"))
sum(get_nodes_attr(ans$Rowv, "height"))
sum(get_nodes_attr(ans$Colv, "height"))
ans
rep(1:10,2)
test <- matrix(c(rep(1:10,2),2:131), ncol=15)#
#
ans <- heatmap(test, keep.dendro = TRUE)#
ans$Rowv
sum(get_nodes_attr(ans$Rowv, "height"))#
  sum(get_nodes_attr(ans$Colv, "height"))
test <- matrix(c(rep(1:10,15)), ncol=15)
ans <- heatmap(test, keep.dendro = TRUE)
test
test <- matrix(c(rep(1:10,14),10:1), ncol=15)
ans <- heatmap(test, keep.dendro = TRUE)
ans$Rowv
sum(get_nodes_attr(ans$Rowv, "height"))
sum(get_nodes_attr(ans$Colv, "height"))
mat <- matrix(1:100, ncol=10)
mat
ans <- heatmap(mat, keep.dendro=TRUE)
ans <- heatmap(mat, keep.dendro=TRUE, plot=FALSE)
?heatmap
start <- 0
end <- start + window.size
end
step <- 500000
window.size <- 2000000
end <- start + window.size
end
paste(c(start, end), collapse="_")
rm(list = ls(all.names = TRUE))
s1 <- 0.1#
s2 <- 0.2#
#
qe <- s1 / (s1+s2)
s1 <- 0.1#
s2 <- 0.2#
#
(qe <- s1 / (s1+s2))
s1 <- 0.1#
s2 <- 0.3#
#
(qe <- s1 / (s1+s2))
s1 <- 0.1#
s2 <- 0.11#
#
(qe <- s1 / (s1+s2))
s1 <- 0.1#
s2 <- 0.1001#
#
(qe <- s1 / (s1+s2))
s1 <- 0.1#
s2 <- 0.100001#
#
(qe <- s1 / (s1+s2))
(h <- s1 / (s1-s2))
(s <- (s2 - s1) / (s1 - 1))
s1 <- 0.1#
s2 <- 0.10001#
#
(qe <- s1 / (s1+s2))#
#
(h <- s1 / (s1-s2))#
#
(s <- (s2 - s1) / (s1 - 1))
s1 <- 0.1#
s2 <- 0.2#
(qe <- s1 / (s1+s2))
s1 <- 0.1#
s2 <- 0.3#
(qe <- s1 / (s1+s2))
s1 <- 0.1#
s2 <- 0.4#
(qe <- s1 / (s1+s2))
(h <- s1 / (s1-s2))
(s <- (s2 - s1) / (s1 - 1))
s2 <- 0.5
s1 <- 0.1#
s2 <- 0.5#
#
(qe <- s1 / (s1+s2))
s1 <- 0.1#
s2 <- 0.7#
#
(qe <- s1 / (s1+s2))
s1 <- 0.1#
s2 <- 1#
#
(qe <- s1 / (s1+s2))
s1 <- 0.1#
s2 <- 1.5#
#
(qe <- s1 / (s1+s2))
s1 <- 0.1#
s2 <- 1.7#
#
(qe <- s1 / (s1+s2))
s1 <- 0.1#
s2 <- 1.75#
#
(qe <- s1 / (s1+s2))
s1 <- 0.1#
s2 <- 1.8#
#
(qe <- s1 / (s1+s2))
s1 <- 0.1#
s2 <- 1.9#
#
(qe <- s1 / (s1+s2))
(h <- s1 / (s1-s2))#
#
(s <- (s2 - s1) / (s1 - 1))
s1 <- 0.1#
s2 <- 0.10001
(qe <- s1 / (s1+s2))#
#
(h <- s1 / (s1-s2))#
#
(s <- (s2 - s1) / (s1 - 1))#
#
het <- 1 + (h*s)#
hom <- 1-s
het
hom
s1 <- 0.1#
s2 <- 0.4
(qe <- s1 / (s1+s2))#
#
(h <- s1 / (s1-s2))#
#
(s <- (s2 - s1) / (s1 - 1))#
#
het <- 1 + (h*s)#
hom <- 1-s
het
hom
s1 <- 0.1#
s2 <- 0.4
(qe <- s1 / (s1+s2))
(h <- s1 / (s1-s2))
(s <- (s2 - s1) / (s1 - 1))
het <- 1 + (h*s)
het
h
hom <- 1-s
s1 <- 0.1#
s2 <- 1.9#
#
(qe <- s1 / (s1+s2))#
#
(h <- s1 / (s1-s2))#
#
(s <- (s2 - s1) / (s1 - 1))#
#
het <- 1 + (h*s)#
hom <- 1-s
het
hom
s1 <- 0.1#
s2 <- 0.10001
(qe <- s1 / (s1+s2))#
#
(h <- s1 / (s1-s2))#
#
(s <- (s2 - s1) / (s1 - 1))#
#
(het <- 1 + (h*s))#
(hom <- 1+s)
s1 <- 0.1#
s2 <- 0.4
(qe <- s1 / (s1+s2))#
#
(h <- s1 / (s1-s2))#
#
(s <- (s2 - s1) / (s1 - 1))#
#
(het <- 1 + (h*s))#
(hom <- 1+s)
s1 <- 0.1#
s2 <- 1.9#
#
(qe <- s1 / (s1+s2))#
#
(h <- s1 / (s1-s2))#
#
(s <- (s2 - s1) / (s1 - 1))#
#
(het <- 1 + (h*s))#
(hom <- 1+s)
s1 <- 0.1#
s2 <- 0.1001
(qe <- s1 / (s1+s2))
(h <- s1 / (s1-s2))
(s <- (s2 - s1) / (s1 - 1))
library(ape)
a <- read.dna("~/Documents/UNIL/PartitioningMethods_SimulationProject/FunctioningPipeline/results_lopho/sim_match_lophotroch/MSA/MSA_1_aa.fa", format="fasta")
a <- read.dna("~/Documents/UNIL/PartitioningMethods_SimulationProject/FunctioningPipeline/results_lopho/sim_match_lophotroch/MSA/MSA_2_aa.fa", format="fasta")
a <- read.dna("~/Documents/UNIL/PartitioningMethods_SimulationProject/FunctioningPipeline/results_lopho/sim_match_lophotroch/MSA/MSA_1_aa.fa", format="fasta")
b <- read.dna("~/Documents/UNIL/PartitioningMethods_SimulationProject/FunctioningPipeline/results_lopho/sim_match_lophotroch/MSA/MSA_2_aa.fa", format="fasta")
c <- cbind(a,b)
setwd("~/Documents/UNIL/PartitioningMethods_SimulationProject/FunctioningPipeline/AnalysisResults")
dat <- read.csv("prelim_lopho_N10.csv", na.strings="-")
plot(1:3, c(dat$AIC[3], dat$AICc[2], dat$BIC[1]), xlim=c(0.5,4.5), ylim=c(103850,104000), pch=16, xlab="Partitioning Criterion", ylab="Score", xaxt="n", main="Partitioning & Treebuilding")#
axis(side=1, at=1:4, labels=c("AIC", "AICc", "BIC", "none"))#
points(1.1:3.1, c(dat$AIC[4], dat$AICc[6], dat$BIC[5]), pch=17, col="red")#
points(c(1,1.1,2,2.1,3,3.1,4), c(dat$iqTreeAIC[3], dat$iqTreeAIC[4], dat$iqTreeAIC[2], dat$iqTreeAIC[6], dat$iqTreeAIC[1], dat$iqTreeAIC[5], dat$iqTreeAIC[7]), col="blue", lwd=2)#
##points(c(1,1.1,2,2.1,3,3.1,4), c(dat$iqTreeAICc[3], dat$iqTreeAICc[4], dat$iqTreeAICc[2], dat$iqTreeAICc[6], dat$iqTreeAICc[1], dat$iqTreeAICc[5], dat$iqTreeAICc[7]), col="green3", lwd=2)#
points(c(1,1.1,2,2.1,3,3.1,4), c(dat$iqTreeBIC[3], dat$iqTreeBIC[4], dat$iqTreeBIC[2], dat$iqTreeBIC[6], dat$iqTreeBIC[1], dat$iqTreeBIC[5], dat$iqTreeBIC[7]), col="orange", lwd=2)#
#legend("left", c("rcluster", "greedy"), col=c("black", "red"), pch=16)#
#legend("right", c("IQTree AIC", "IQTree BIC"), col=c("blue", "orange"), pch=1, pt.lwd=2)#
#
text(x=c(1,1.1,2,2.1,3,3.1,4), y=rep(103870,6), labels=c(dat$numParts[3:4], dat$numParts[2], dat$numParts[6], dat$numParts[1], dat$numParts[5], 0))
plot(1:3, c(dat$AIC[3], dat$AICc[2], dat$BIC[1]), xlim=c(0.5,4.5), ylim=c(103900,104000), pch=16, xlab="Partitioning Criterion", ylab="Score", xaxt="n", main="Partitioning & Treebuilding")#
axis(side=1, at=1:4, labels=c("AIC", "AICc", "BIC", "none"))#
points(1.1:3.1, c(dat$AIC[4], dat$AICc[6], dat$BIC[5]), pch=17, col="red")#
points(c(1,1.1,2,2.1,3,3.1,4), c(dat$iqTreeAIC[3], dat$iqTreeAIC[4], dat$iqTreeAIC[2], dat$iqTreeAIC[6], dat$iqTreeAIC[1], dat$iqTreeAIC[5], dat$iqTreeAIC[7]), col="blue", lwd=2)#
##points(c(1,1.1,2,2.1,3,3.1,4), c(dat$iqTreeAICc[3], dat$iqTreeAICc[4], dat$iqTreeAICc[2], dat$iqTreeAICc[6], dat$iqTreeAICc[1], dat$iqTreeAICc[5], dat$iqTreeAICc[7]), col="green3", lwd=2)#
points(c(1,1.1,2,2.1,3,3.1,4), c(dat$iqTreeBIC[3], dat$iqTreeBIC[4], dat$iqTreeBIC[2], dat$iqTreeBIC[6], dat$iqTreeBIC[1], dat$iqTreeBIC[5], dat$iqTreeBIC[7]), col="orange", lwd=2)#
#legend("left", c("rcluster", "greedy"), col=c("black", "red"), pch=16)#
#legend("right", c("IQTree AIC", "IQTree BIC"), col=c("blue", "orange"), pch=1, pt.lwd=2)#
#
text(x=c(1,1.1,2,2.1,3,3.1,4), y=rep(103870,6), labels=c(dat$numParts[3:4], dat$numParts[2], dat$numParts[6], dat$numParts[1], dat$numParts[5], 0))
plot(1:3, c(dat$AIC[3], dat$AICc[2], dat$BIC[1]), xlim=c(0.5,4.5), ylim=c(103900,103980), pch=16, xlab="Partitioning Criterion", ylab="Score", xaxt="n", main="Partitioning & Treebuilding")#
axis(side=1, at=1:4, labels=c("AIC", "AICc", "BIC", "none"))#
points(1.1:3.1, c(dat$AIC[4], dat$AICc[6], dat$BIC[5]), pch=17, col="red")#
points(c(1,1.1,2,2.1,3,3.1,4), c(dat$iqTreeAIC[3], dat$iqTreeAIC[4], dat$iqTreeAIC[2], dat$iqTreeAIC[6], dat$iqTreeAIC[1], dat$iqTreeAIC[5], dat$iqTreeAIC[7]), col="blue", lwd=2)#
##points(c(1,1.1,2,2.1,3,3.1,4), c(dat$iqTreeAICc[3], dat$iqTreeAICc[4], dat$iqTreeAICc[2], dat$iqTreeAICc[6], dat$iqTreeAICc[1], dat$iqTreeAICc[5], dat$iqTreeAICc[7]), col="green3", lwd=2)#
points(c(1,1.1,2,2.1,3,3.1,4), c(dat$iqTreeBIC[3], dat$iqTreeBIC[4], dat$iqTreeBIC[2], dat$iqTreeBIC[6], dat$iqTreeBIC[1], dat$iqTreeBIC[5], dat$iqTreeBIC[7]), col="orange", lwd=2)#
#legend("left", c("rcluster", "greedy"), col=c("black", "red"), pch=16)#
#legend("right", c("IQTree AIC", "IQTree BIC"), col=c("blue", "orange"), pch=1, pt.lwd=2)#
#
text(x=c(1,1.1,2,2.1,3,3.1,4), y=rep(103870,6), labels=c(dat$numParts[3:4], dat$numParts[2], dat$numParts[6], dat$numParts[1], dat$numParts[5], 0))
plot(1:3, c(dat$AIC[3], dat$AICc[2], dat$BIC[1]), xlim=c(0.5,4.5), ylim=c(103900,103990), pch=16, xlab="Partitioning Criterion", ylab="Score", xaxt="n", main="Partitioning & Treebuilding")#
axis(side=1, at=1:4, labels=c("AIC", "AICc", "BIC", "none"))#
points(1.1:3.1, c(dat$AIC[4], dat$AICc[6], dat$BIC[5]), pch=17, col="red")#
points(c(1,1.1,2,2.1,3,3.1,4), c(dat$iqTreeAIC[3], dat$iqTreeAIC[4], dat$iqTreeAIC[2], dat$iqTreeAIC[6], dat$iqTreeAIC[1], dat$iqTreeAIC[5], dat$iqTreeAIC[7]), col="blue", lwd=2)#
##points(c(1,1.1,2,2.1,3,3.1,4), c(dat$iqTreeAICc[3], dat$iqTreeAICc[4], dat$iqTreeAICc[2], dat$iqTreeAICc[6], dat$iqTreeAICc[1], dat$iqTreeAICc[5], dat$iqTreeAICc[7]), col="green3", lwd=2)#
points(c(1,1.1,2,2.1,3,3.1,4), c(dat$iqTreeBIC[3], dat$iqTreeBIC[4], dat$iqTreeBIC[2], dat$iqTreeBIC[6], dat$iqTreeBIC[1], dat$iqTreeBIC[5], dat$iqTreeBIC[7]), col="orange", lwd=2)#
#legend("left", c("rcluster", "greedy"), col=c("black", "red"), pch=16)#
#legend("right", c("IQTree AIC", "IQTree BIC"), col=c("blue", "orange"), pch=1, pt.lwd=2)#
#
text(x=c(1,1.1,2,2.1,3,3.1,4), y=rep(103870,6), labels=c(dat$numParts[3:4], dat$numParts[2], dat$numParts[6], dat$numParts[1], dat$numParts[5], 0))
plot(1:3, c(dat$AIC[3], dat$AICc[2], dat$BIC[1]), xlim=c(0.5,4.5), ylim=c(103910,103980), pch=16, xlab="Partitioning Criterion", ylab="Score", xaxt="n", main="Partitioning & Treebuilding")#
axis(side=1, at=1:4, labels=c("AIC", "AICc", "BIC", "none"))#
points(1.1:3.1, c(dat$AIC[4], dat$AICc[6], dat$BIC[5]), pch=17, col="red")#
points(c(1,1.1,2,2.1,3,3.1,4), c(dat$iqTreeAIC[3], dat$iqTreeAIC[4], dat$iqTreeAIC[2], dat$iqTreeAIC[6], dat$iqTreeAIC[1], dat$iqTreeAIC[5], dat$iqTreeAIC[7]), col="blue", lwd=2)#
##points(c(1,1.1,2,2.1,3,3.1,4), c(dat$iqTreeAICc[3], dat$iqTreeAICc[4], dat$iqTreeAICc[2], dat$iqTreeAICc[6], dat$iqTreeAICc[1], dat$iqTreeAICc[5], dat$iqTreeAICc[7]), col="green3", lwd=2)#
points(c(1,1.1,2,2.1,3,3.1,4), c(dat$iqTreeBIC[3], dat$iqTreeBIC[4], dat$iqTreeBIC[2], dat$iqTreeBIC[6], dat$iqTreeBIC[1], dat$iqTreeBIC[5], dat$iqTreeBIC[7]), col="orange", lwd=2)#
#legend("left", c("rcluster", "greedy"), col=c("black", "red"), pch=16)#
#legend("right", c("IQTree AIC", "IQTree BIC"), col=c("blue", "orange"), pch=1, pt.lwd=2)#
#
text(x=c(1,1.1,2,2.1,3,3.1,4), y=rep(103870,6), labels=c(dat$numParts[3:4], dat$numParts[2], dat$numParts[6], dat$numParts[1], dat$numParts[5], 0))
plot(1:3, c(dat$AIC[3], dat$AICc[2], dat$BIC[1]), xlim=c(0.5,4.5), ylim=c(103920,103980), pch=16, xlab="Partitioning Criterion", ylab="Score", xaxt="n", main="Partitioning & Treebuilding")#
axis(side=1, at=1:4, labels=c("AIC", "AICc", "BIC", "none"))#
points(1.1:3.1, c(dat$AIC[4], dat$AICc[6], dat$BIC[5]), pch=17, col="red")#
points(c(1,1.1,2,2.1,3,3.1,4), c(dat$iqTreeAIC[3], dat$iqTreeAIC[4], dat$iqTreeAIC[2], dat$iqTreeAIC[6], dat$iqTreeAIC[1], dat$iqTreeAIC[5], dat$iqTreeAIC[7]), col="blue", lwd=2)#
##points(c(1,1.1,2,2.1,3,3.1,4), c(dat$iqTreeAICc[3], dat$iqTreeAICc[4], dat$iqTreeAICc[2], dat$iqTreeAICc[6], dat$iqTreeAICc[1], dat$iqTreeAICc[5], dat$iqTreeAICc[7]), col="green3", lwd=2)#
points(c(1,1.1,2,2.1,3,3.1,4), c(dat$iqTreeBIC[3], dat$iqTreeBIC[4], dat$iqTreeBIC[2], dat$iqTreeBIC[6], dat$iqTreeBIC[1], dat$iqTreeBIC[5], dat$iqTreeBIC[7]), col="orange", lwd=2)#
#legend("left", c("rcluster", "greedy"), col=c("black", "red"), pch=16)#
#legend("right", c("IQTree AIC", "IQTree BIC"), col=c("blue", "orange"), pch=1, pt.lwd=2)#
#
text(x=c(1,1.1,2,2.1,3,3.1,4), y=rep(103870,6), labels=c(dat$numParts[3:4], dat$numParts[2], dat$numParts[6], dat$numParts[1], dat$numParts[5], 0))
plot(1:3, c(dat$AIC[3], dat$AICc[2], dat$BIC[1]), xlim=c(0.5,4.5), ylim=c(103920,103980), pch=16, xlab="Partitioning Criterion", ylab="Score", xaxt="n", main="Partitioning & Treebuilding")#
axis(side=1, at=1:4, labels=c("AIC", "AICc", "BIC", "none"))#
points(1.1:3.1, c(dat$AIC[4], dat$AICc[6], dat$BIC[5]), pch=17, col="red")#
points(c(1,1.1,2,2.1,3,3.1,4), c(dat$iqTreeAIC[3], dat$iqTreeAIC[4], dat$iqTreeAIC[2], dat$iqTreeAIC[6], dat$iqTreeAIC[1], dat$iqTreeAIC[5], dat$iqTreeAIC[7]), col="blue", lwd=2)#
##points(c(1,1.1,2,2.1,3,3.1,4), c(dat$iqTreeAICc[3], dat$iqTreeAICc[4], dat$iqTreeAICc[2], dat$iqTreeAICc[6], dat$iqTreeAICc[1], dat$iqTreeAICc[5], dat$iqTreeAICc[7]), col="green3", lwd=2)#
points(c(1,1.1,2,2.1,3,3.1,4), c(dat$iqTreeBIC[3], dat$iqTreeBIC[4], dat$iqTreeBIC[2], dat$iqTreeBIC[6], dat$iqTreeBIC[1], dat$iqTreeBIC[5], dat$iqTreeBIC[7]), col="orange", lwd=2)#
#legend("left", c("rcluster", "greedy"), col=c("black", "red"), pch=16)#
legend("bottomright", c("IQTree AIC"), col=c("blue"), pch=1, pt.lwd=2)#
#
text(x=c(1,1.1,2,2.1,3,3.1,4), y=rep(103870,6), labels=c(dat$numParts[3:4], dat$numParts[2], dat$numParts[6], dat$numParts[1], dat$numParts[5], 0))
plot(1:3, c(dat$AIC[3], dat$AICc[2], dat$BIC[1]), xlim=c(0.5,4.5), ylim=c(103920,103980), pch=16, xlab="Partitioning Criterion", ylab="Score", xaxt="n", main="Partitioning & Treebuilding")#
axis(side=1, at=1:4, labels=c("AIC", "AICc", "BIC", "none"))#
points(1.1:3.1, c(dat$AIC[4], dat$AICc[6], dat$BIC[5]), pch=17, col="red")#
points(c(1,1.1,2,2.1,3,3.1,4), c(dat$iqTreeAIC[3], dat$iqTreeAIC[4], dat$iqTreeAIC[2], dat$iqTreeAIC[6], dat$iqTreeAIC[1], dat$iqTreeAIC[5], dat$iqTreeAIC[7]), col="blue", lwd=2)#
##points(c(1,1.1,2,2.1,3,3.1,4), c(dat$iqTreeAICc[3], dat$iqTreeAICc[4], dat$iqTreeAICc[2], dat$iqTreeAICc[6], dat$iqTreeAICc[1], dat$iqTreeAICc[5], dat$iqTreeAICc[7]), col="green3", lwd=2)#
points(c(1,1.1,2,2.1,3,3.1,4), c(dat$iqTreeBIC[3], dat$iqTreeBIC[4], dat$iqTreeBIC[2], dat$iqTreeBIC[6], dat$iqTreeBIC[1], dat$iqTreeBIC[5], dat$iqTreeBIC[7]), col="orange", lwd=2)#
#legend("left", c("rcluster", "greedy"), col=c("black", "red"), pch=16)#
legend("bottomright", c("IQTree AIC"), col=c("blue"), pch=1, pt.lwd=2)#
#
text(x=c(1,1.1,2,2.1,3,3.1,4), y=rep(103940,6), labels=c(dat$numParts[3:4], dat$numParts[2], dat$numParts[6], dat$numParts[1], dat$numParts[5], 0))
plot(1:3, c(dat$AIC[3], dat$AICc[2], dat$BIC[1]), xlim=c(0.5,4.5), ylim=c(104520,104580), pch=16, xlab="Partitioning Criterion", ylab="Score", xaxt="n", main="Partitioning & Treebuilding")#
axis(side=1, at=1:4, labels=c("AIC", "AICc", "BIC", "none"))#
points(1.1:3.1, c(dat$AIC[4], dat$AICc[6], dat$BIC[5]), pch=17, col="red")#
points(c(1,1.1,2,2.1,3,3.1,4), c(dat$iqTreeAIC[3], dat$iqTreeAIC[4], dat$iqTreeAIC[2], dat$iqTreeAIC[6], dat$iqTreeAIC[1], dat$iqTreeAIC[5], dat$iqTreeAIC[7]), col="blue", lwd=2)#
##points(c(1,1.1,2,2.1,3,3.1,4), c(dat$iqTreeAICc[3], dat$iqTreeAICc[4], dat$iqTreeAICc[2], dat$iqTreeAICc[6], dat$iqTreeAICc[1], dat$iqTreeAICc[5], dat$iqTreeAICc[7]), col="green3", lwd=2)#
points(c(1,1.1,2,2.1,3,3.1,4), c(dat$iqTreeBIC[3], dat$iqTreeBIC[4], dat$iqTreeBIC[2], dat$iqTreeBIC[6], dat$iqTreeBIC[1], dat$iqTreeBIC[5], dat$iqTreeBIC[7]), col="orange", lwd=2)#
#legend("left", c("rcluster", "greedy"), col=c("black", "red"), pch=16)#
#legend("right", c("IQTree AIC", "IQTree BIC"), col=c("blue", "orange"), pch=1, pt.lwd=2)#
#
text(x=c(1,1.1,2,2.1,3,3.1,4), y=rep(103870,6), labels=c(dat$numParts[3:4], dat$numParts[2], dat$numParts[6], dat$numParts[1], dat$numParts[5], 0))
plot(1:3, c(dat$AIC[3], dat$AICc[2], dat$BIC[1]), xlim=c(0.5,4.5), ylim=c(104530,104570), pch=16, xlab="Partitioning Criterion", ylab="Score", xaxt="n", main="Partitioning & Treebuilding")#
axis(side=1, at=1:4, labels=c("AIC", "AICc", "BIC", "none"))#
points(1.1:3.1, c(dat$AIC[4], dat$AICc[6], dat$BIC[5]), pch=17, col="red")#
points(c(1,1.1,2,2.1,3,3.1,4), c(dat$iqTreeAIC[3], dat$iqTreeAIC[4], dat$iqTreeAIC[2], dat$iqTreeAIC[6], dat$iqTreeAIC[1], dat$iqTreeAIC[5], dat$iqTreeAIC[7]), col="blue", lwd=2)#
##points(c(1,1.1,2,2.1,3,3.1,4), c(dat$iqTreeAICc[3], dat$iqTreeAICc[4], dat$iqTreeAICc[2], dat$iqTreeAICc[6], dat$iqTreeAICc[1], dat$iqTreeAICc[5], dat$iqTreeAICc[7]), col="green3", lwd=2)#
points(c(1,1.1,2,2.1,3,3.1,4), c(dat$iqTreeBIC[3], dat$iqTreeBIC[4], dat$iqTreeBIC[2], dat$iqTreeBIC[6], dat$iqTreeBIC[1], dat$iqTreeBIC[5], dat$iqTreeBIC[7]), col="orange", lwd=2)#
#legend("left", c("rcluster", "greedy"), col=c("black", "red"), pch=16)#
#legend("right", c("IQTree AIC", "IQTree BIC"), col=c("blue", "orange"), pch=1, pt.lwd=2)#
#
text(x=c(1,1.1,2,2.1,3,3.1,4), y=rep(103870,6), labels=c(dat$numParts[3:4], dat$numParts[2], dat$numParts[6], dat$numParts[1], dat$numParts[5], 0))
plot(1:3, c(dat$AIC[3], dat$AICc[2], dat$BIC[1]), xlim=c(0.5,4.5), ylim=c(104535,104565), pch=16, xlab="Partitioning Criterion", ylab="Score", xaxt="n", main="Partitioning & Treebuilding")#
axis(side=1, at=1:4, labels=c("AIC", "AICc", "BIC", "none"))#
points(1.1:3.1, c(dat$AIC[4], dat$AICc[6], dat$BIC[5]), pch=17, col="red")#
points(c(1,1.1,2,2.1,3,3.1,4), c(dat$iqTreeAIC[3], dat$iqTreeAIC[4], dat$iqTreeAIC[2], dat$iqTreeAIC[6], dat$iqTreeAIC[1], dat$iqTreeAIC[5], dat$iqTreeAIC[7]), col="blue", lwd=2)#
##points(c(1,1.1,2,2.1,3,3.1,4), c(dat$iqTreeAICc[3], dat$iqTreeAICc[4], dat$iqTreeAICc[2], dat$iqTreeAICc[6], dat$iqTreeAICc[1], dat$iqTreeAICc[5], dat$iqTreeAICc[7]), col="green3", lwd=2)#
points(c(1,1.1,2,2.1,3,3.1,4), c(dat$iqTreeBIC[3], dat$iqTreeBIC[4], dat$iqTreeBIC[2], dat$iqTreeBIC[6], dat$iqTreeBIC[1], dat$iqTreeBIC[5], dat$iqTreeBIC[7]), col="orange", lwd=2)#
#legend("left", c("rcluster", "greedy"), col=c("black", "red"), pch=16)#
#legend("right", c("IQTree AIC", "IQTree BIC"), col=c("blue", "orange"), pch=1, pt.lwd=2)#
#
text(x=c(1,1.1,2,2.1,3,3.1,4), y=rep(103870,6), labels=c(dat$numParts[3:4], dat$numParts[2], dat$numParts[6], dat$numParts[1], dat$numParts[5], 0))
legend("topright", c("IQTree BIC"), col=c("orange"), pch=1, pt.lwd=2)
text(x=c(1,1.1,2,2.1,3,3.1,4), y=rep(104557,6), labels=c(dat$numParts[3:4], dat$numParts[2], dat$numParts[6], dat$numParts[1], dat$numParts[5], 0))
plot(c(1:4, 1.1:3.1), rep(0.0847457627118644, 7))
plot(c(1:4, 1.1:3.1), rep(0.0847457627118644, 7), xaxt="n")
plot(c(1:4, 1.1:3.1), rep(0.0847457627118644, 7), xaxt="n")
axis(side=1, at=1:4, labels=c("AIC", "AICc", "BIC", "none"))
plot(c(1:4, 1.1:3.1), rep(0.0847457627118644, 7), xaxt="n", ylim=c(0.05, 0.1), ylab="Normalized Robinson-Foulds")#
axis(side=1, at=1:4, labels=c("AIC", "AICc", "BIC", "none"))
axis(side=1, at=1:4, labels=c("AIC", "AICc", "BIC", "none"), pch=15)
plot(c(1:4, 1.1:3.1), rep(0.0847457627118644, 7), xaxt="n", ylim=c(0.05, 0.1), ylab="Normalized Robinson-Foulds", pch=15)
axis(side=1, at=1:4, labels=c("AIC", "AICc", "BIC", "none"))
plot(c(1:4, 1.1:3.1), rep(0.0847457627118644, 7), xaxt="n", ylim=c(0.08, 0.1), ylab="Normalized Robinson-Foulds", pch=15)
plot(c(1:4, 1.1:3.1), rep(0.0847457627118644, 7), xaxt="n", ylim=c(0.08, 0.095), ylab="Normalized Robinson-Foulds", pch=15)
plot(c(1:4, 1.1:3.1), rep(0.0847457627118644, 7), xaxt="n", ylim=c(0.08, 0.09), ylab="Normalized Robinson-Foulds", pch=15)
axis(side=1, at=1:4, labels=c("AIC", "AICc", "BIC", "none"))
plot(c(1:4, 1.1:3.1), rep(0.0847457627118644, 7), xaxt="n", ylim=c(0.08, 0.09), xlab="Partitioning Criterion", ylab="Normalized Robinson-Foulds", pch=15)
axis(side=1, at=1:4, labels=c("AIC", "AICc", "BIC", "none"))
plot(c(1:4, 1.1:3.1), c(498.1729185398443, 498.17346684526217, 498.1721147408412,   498.1721147408412, 498.16853197394056, 498.1586883819632     , 498.1758378443058), xaxt="n", ylim=c(0.08, 0.09), xlab="Partitioning Criterion", ylab="Normalized Robinson-Foulds", pch=15)
plot(c(1:4, 1.1:3.1), c(498.1729185398443, 498.17346684526217, 498.1721147408412,   498.1721147408412, 498.16853197394056, 498.1586883819632     , 498.1758378443058), xaxt="n", ylim=c(490,500), xlab="Partitioning Criterion", ylab="Normalized Robinson-Foulds", pch=15)
axis(side=1, at=1:4, labels=c("AIC", "AICc", "BIC", "none"))
plot(c(1:4, 1.1:3.1), c(498.1729185398443, 498.17346684526217, 498.1721147408412,   498.1721147408412, 498.16853197394056, 498.1586883819632     , 498.1758378443058), xaxt="n", ylim=c(496,499), xlab="Partitioning Criterion", ylab="Normalized Robinson-Foulds", pch=15)
plot(c(1:4, 1.1:3.1), c(498.1729185398443, 498.17346684526217, 498.1721147408412,   498.1721147408412, 498.16853197394056, 498.1586883819632     , 498.1758378443058), xaxt="n", ylim=c(497.5,499), xlab="Partitioning Criterion", ylab="Normalized Robinson-Foulds", pch=15)
plot(c(1:4, 1.1:3.1), c(498.1729185398443, 498.17346684526217, 498.1721147408412,   498.1721147408412, 498.16853197394056, 498.1586883819632     , 498.1758378443058), xaxt="n", ylim=c(498,498.5), xlab="Partitioning Criterion", ylab="Normalized Robinson-Foulds", pch=15)
plot(c(1:4, 1.1:3.1), c(498.1729185398443, 498.17346684526217, 498.1721147408412,   498.1721147408412, 498.16853197394056, 498.1586883819632     , 498.1758378443058), xaxt="n", ylim=c(498,498.25), xlab="Partitioning Criterion", ylab="Normalized Robinson-Foulds", pch=15)
plot(c(1:4, 1.1:3.1), c(498.1729185398443, 498.17346684526217, 498.1721147408412,   498.1721147408412, 498.16853197394056, 498.1586883819632     , 498.1758378443058), xaxt="n", ylim=c(498.1,498.25), xlab="Partitioning Criterion", ylab="Normalized Robinson-Foulds", pch=15)
plot(c(1:4, 1.1:3.1), c(498.1729185398443, 498.17346684526217, 498.1721147408412,   498.1721147408412, 498.16853197394056, 498.1586883819632     , 498.1758378443058), xaxt="n", ylim=c(498.1,498.2), xlab="Partitioning Criterion", ylab="Normalized Robinson-Foulds", pch=15)
axis(side=1, at=1:4, labels=c("AIC", "AICc", "BIC", "none"))
plot(c(1:4, 1.1:3.1), c(498.1729185398443, 498.17346684526217, 498.1721147408412,   498.1721147408412, 498.16853197394056, 498.1586883819632     , 498.1758378443058), xaxt="n", ylim=c(498.12,498.2), xlab="Partitioning Criterion", ylab="Normalized Robinson-Foulds", pch=15)
plot(c(1:4, 1.1:3.1), c(498.1729185398443, 498.17346684526217, 498.1721147408412,   498.1721147408412, 498.16853197394056, 498.1586883819632     , 498.1758378443058), xaxt="n", ylim=c(498.14,498.2), xlab="Partitioning Criterion", ylab="Normalized Robinson-Foulds", pch=15)
axis(side=1, at=1:4, labels=c("AIC", "AICc", "BIC", "none"))
plot(c(1:4, 1.1:3.1), c(498.1729185398443, 498.17346684526217, 498.1721147408412,   498.1721147408412, 498.16853197394056, 498.1586883819632     , 498.1758378443058), xaxt="n", ylim=c(498.14,498.2), xlab="Partitioning Criterion", ylab="Euclidean Distance", pch=15)
axis(side=1, at=1:4, labels=c("AIC", "AICc", "BIC", "none"))
